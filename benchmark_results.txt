Benchmark results:
Benchmarking sort with memory size 10000
Benchmarking sort with memory size 10000: Warming up for 3.0000 s
Benchmarking sort with memory size 10000: Collecting 50 samples in estimated 409.34 s (150 iterations)
Benchmarking sort with memory size 10000: Analyzing
                        time:   [3.0895 s 3.2236 s 3.3564 s]
                        change: [-17.060% -12.198% -7.3501%] (p = 0.00 < 0.05)
Benchmarking sort with memory size 5000
Benchmarking sort with memory size 5000: Warming up for 3.0000 s
Benchmarking sort with memory size 5000: Collecting 50 samples in estimated 335.84 s (150 iterations)
Benchmarking sort with memory size 5000: Analyzing
                        time:   [2.9383 s 3.0540 s 3.1677 s]
                        change: [-13.824% -9.1445% -3.6326%] (p = 0.00 < 0.05)
Benchmarking sort with memory size 4000
Benchmarking sort with memory size 4000: Warming up for 3.0000 s
Benchmarking sort with memory size 4000: Collecting 50 samples in estimated 337.77 s (150 iterations)
Benchmarking sort with memory size 4000: Analyzing
                        time:   [3.0435 s 3.1832 s 3.3268 s]
                        change: [-13.516% -8.6582% -3.6027%] (p = 0.00 < 0.05)
Benchmarking sort with memory size 3000
Benchmarking sort with memory size 3000: Warming up for 3.0000 s
Benchmarking sort with memory size 3000: Collecting 50 samples in estimated 338.90 s (150 iterations)
Benchmarking sort with memory size 3000: Analyzing
                        time:   [2.6951 s 2.8083 s 2.9363 s]
                        change: [-23.893% -19.726% -15.427%] (p = 0.00 < 0.05)
Benchmarking sort with memory size 2000
Benchmarking sort with memory size 2000: Warming up for 3.0000 s
Benchmarking sort with memory size 2000: Collecting 50 samples in estimated 316.72 s (150 iterations)
Benchmarking sort with memory size 2000: Analyzing
                        time:   [2.5656 s 2.6577 s 2.7596 s]
                        change: [-20.907% -17.104% -13.002%] (p = 0.00 < 0.05)
Benchmarking sort with memory size 1000
Benchmarking sort with memory size 1000: Warming up for 3.0000 s
Benchmarking sort with memory size 1000: Collecting 50 samples in estimated 323.83 s (150 iterations)
Benchmarking sort with memory size 1000: Analyzing
                        time:   [2.5693 s 2.6262 s 2.6836 s]
                        change: [-14.708% -12.088% -9.5052%] (p = 0.00 < 0.05)
Benchmarking sort with memory size 900
Benchmarking sort with memory size 900: Warming up for 3.0000 s
Benchmarking sort with memory size 900: Collecting 50 samples in estimated 314.07 s (150 iterations)
Benchmarking sort with memory size 900: Analyzing
                        time:   [2.5262 s 2.5864 s 2.6470 s]
                        change: [-18.193% -15.138% -12.247%] (p = 0.00 < 0.05)
Benchmarking sort with memory size 800
Benchmarking sort with memory size 800: Warming up for 3.0000 s
Benchmarking sort with memory size 800: Collecting 50 samples in estimated 312.95 s (150 iterations)
Benchmarking sort with memory size 800: Analyzing
                        time:   [2.4964 s 2.5579 s 2.6214 s]
                        change: [-23.271% -18.027% -13.535%] (p = 0.00 < 0.05)
Benchmarking sort with memory size 700
Benchmarking sort with memory size 700: Warming up for 3.0000 s
Benchmarking sort with memory size 700: Collecting 50 samples in estimated 309.80 s (150 iterations)
Benchmarking sort with memory size 700: Analyzing
                        time:   [2.5165 s 2.5704 s 2.6241 s]
                        change: [-16.009% -13.501% -10.969%] (p = 0.00 < 0.05)
Benchmarking sort with memory size 600
Benchmarking sort with memory size 600: Warming up for 3.0000 s
Benchmarking sort with memory size 600: Collecting 50 samples in estimated 305.47 s (150 iterations)
Benchmarking sort with memory size 600: Analyzing
                        time:   [2.5559 s 2.6176 s 2.6911 s]
                        change: [-13.138% -10.548% -7.3633%] (p = 0.00 < 0.05)
Benchmarking sort with memory size 500
Benchmarking sort with memory size 500: Warming up for 3.0000 s
Benchmarking sort with memory size 500: Collecting 50 samples in estimated 316.22 s (150 iterations)
Benchmarking sort with memory size 500: Analyzing
                        time:   [2.5855 s 2.6279 s 2.6729 s]
                        change: [-30.162% -21.282% -13.043%] (p = 0.00 < 0.05)
Benchmarking sort with memory size 400
Benchmarking sort with memory size 400: Warming up for 3.0000 s
Benchmarking sort with memory size 400: Collecting 50 samples in estimated 315.18 s (150 iterations)
Benchmarking sort with memory size 400: Analyzing
                        time:   [2.4928 s 2.5326 s 2.5740 s]
                        change: [-15.909% -13.116% -10.193%] (p = 0.00 < 0.05)
Benchmarking sort with memory size 300
Benchmarking sort with memory size 300: Warming up for 3.0000 s
Benchmarking sort with memory size 300: Collecting 50 samples in estimated 300.32 s (150 iterations)
Benchmarking sort with memory size 300: Analyzing
                        time:   [2.5036 s 2.5458 s 2.5867 s]
                        change: [-19.087% -13.181% -8.6593%] (p = 0.00 < 0.05)
Benchmarking sort with memory size 200
Benchmarking sort with memory size 200: Warming up for 3.0000 s
Benchmarking sort with memory size 200: Collecting 50 samples in estimated 302.85 s (150 iterations)
Benchmarking sort with memory size 200: Analyzing
                        time:   [2.4867 s 2.5281 s 2.5693 s]
                        change: [-17.428% -11.917% -7.0984%] (p = 0.00 < 0.05)
Benchmarking sort with memory size 100
Benchmarking sort with memory size 100: Warming up for 3.0000 s
Benchmarking sort with memory size 100: Collecting 50 samples in estimated 387.57 s (200 iterations)
Benchmarking sort with memory size 100: Analyzing
                        time:   [2.5261 s 2.5704 s 2.6146 s]
                        change: [-8.1770% -6.0135% -3.5888%] (p = 0.00 < 0.05)
