<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="565.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="27701"><g><title>benchmark_queries`&lt;fbtree::bp::buffer_pool::BufferPool as fbtree::bp::mem_pool_trait::MemPool&gt;::clear_dirty_flags (3 samples, 0.01%)</title><rect x="0.0072%" y="421" width="0.0108%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="3"/><text x="0.2572%" y="431.50"></text></g><g><title>benchmark_queries`&lt;fbtree::bp::buffer_pool::BufferPool as fbtree::bp::mem_pool_trait::MemPool&gt;::flush_all_and_reset (5 samples, 0.02%)</title><rect x="0.0180%" y="421" width="0.0180%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="5"/><text x="0.2680%" y="431.50"></text></g><g><title>benchmark_queries`&lt;fbtree::access_method::sorted_run_store::BigSortedRunStoreScanner&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.03%)</title><rect x="0.0361%" y="405" width="0.0289%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="8"/><text x="0.2861%" y="415.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$free (15 samples, 0.05%)</title><rect x="0.0650%" y="405" width="0.0541%" height="15" fill="rgb(248,212,6)" fg:x="18" fg:w="15"/><text x="0.3150%" y="415.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$malloc (6 samples, 0.02%)</title><rect x="0.1191%" y="405" width="0.0217%" height="15" fill="rgb(208,68,35)" fg:x="33" fg:w="6"/><text x="0.3691%" y="415.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcmp (3 samples, 0.01%)</title><rect x="0.1408%" y="405" width="0.0108%" height="15" fill="rgb(232,128,0)" fg:x="39" fg:w="3"/><text x="0.3908%" y="415.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcpy (6 samples, 0.02%)</title><rect x="0.1516%" y="405" width="0.0217%" height="15" fill="rgb(207,160,47)" fg:x="42" fg:w="6"/><text x="0.4016%" y="415.50"></text></g><g><title>benchmark_queries`__rdl_alloc (5 samples, 0.02%)</title><rect x="0.1733%" y="405" width="0.0180%" height="15" fill="rgb(228,23,34)" fg:x="48" fg:w="5"/><text x="0.4233%" y="415.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::get (8 samples, 0.03%)</title><rect x="0.9458%" y="373" width="0.0289%" height="15" fill="rgb(218,30,26)" fg:x="262" fg:w="8"/><text x="1.1958%" y="383.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::slot_count (25 samples, 0.09%)</title><rect x="0.9747%" y="373" width="0.0902%" height="15" fill="rgb(220,122,19)" fg:x="270" fg:w="25"/><text x="1.2247%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (15 samples, 0.05%)</title><rect x="1.0649%" y="373" width="0.0541%" height="15" fill="rgb(250,228,42)" fg:x="295" fg:w="15"/><text x="1.3149%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (16 samples, 0.06%)</title><rect x="1.1408%" y="357" width="0.0578%" height="15" fill="rgb(240,193,28)" fg:x="316" fg:w="16"/><text x="1.3908%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.01%)</title><rect x="1.1985%" y="357" width="0.0108%" height="15" fill="rgb(216,20,37)" fg:x="332" fg:w="3"/><text x="1.4485%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (14 samples, 0.05%)</title><rect x="1.2779%" y="341" width="0.0505%" height="15" fill="rgb(206,188,39)" fg:x="354" fg:w="14"/><text x="1.5279%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (4 samples, 0.01%)</title><rect x="1.4693%" y="325" width="0.0144%" height="15" fill="rgb(217,207,13)" fg:x="407" fg:w="4"/><text x="1.7193%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (133 samples, 0.48%)</title><rect x="1.1191%" y="373" width="0.4801%" height="15" fill="rgb(231,73,38)" fg:x="310" fg:w="133"/><text x="1.3691%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (108 samples, 0.39%)</title><rect x="1.2093%" y="357" width="0.3899%" height="15" fill="rgb(225,20,46)" fg:x="335" fg:w="108"/><text x="1.4593%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (75 samples, 0.27%)</title><rect x="1.3285%" y="341" width="0.2707%" height="15" fill="rgb(210,31,41)" fg:x="368" fg:w="75"/><text x="1.5785%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (32 samples, 0.12%)</title><rect x="1.4837%" y="325" width="0.1155%" height="15" fill="rgb(221,200,47)" fg:x="411" fg:w="32"/><text x="1.7337%" y="335.50"></text></g><g><title>benchmark_queries`&lt;fbtree::access_method::sorted_run_store::BigSortedRunStoreScanner&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (355 samples, 1.28%)</title><rect x="0.3393%" y="389" width="1.2815%" height="15" fill="rgb(226,26,5)" fg:x="94" fg:w="355"/><text x="0.5893%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.02%)</title><rect x="1.5992%" y="373" width="0.0217%" height="15" fill="rgb(249,33,26)" fg:x="443" fg:w="6"/><text x="1.8492%" y="383.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$malloc (9 samples, 0.03%)</title><rect x="1.6209%" y="389" width="0.0325%" height="15" fill="rgb(235,183,28)" fg:x="449" fg:w="9"/><text x="1.8709%" y="399.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcmp (19 samples, 0.07%)</title><rect x="1.6534%" y="389" width="0.0686%" height="15" fill="rgb(221,5,38)" fg:x="458" fg:w="19"/><text x="1.9034%" y="399.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcpy (5 samples, 0.02%)</title><rect x="1.7220%" y="389" width="0.0180%" height="15" fill="rgb(247,18,42)" fg:x="477" fg:w="5"/><text x="1.9720%" y="399.50"></text></g><g><title>benchmark_queries`__rdl_alloc (4 samples, 0.01%)</title><rect x="1.7400%" y="389" width="0.0144%" height="15" fill="rgb(241,131,45)" fg:x="482" fg:w="4"/><text x="1.9900%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.08%)</title><rect x="1.7653%" y="389" width="0.0830%" height="15" fill="rgb(249,31,29)" fg:x="489" fg:w="23"/><text x="2.0153%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (116 samples, 0.42%)</title><rect x="1.8483%" y="389" width="0.4188%" height="15" fill="rgb(225,111,53)" fg:x="512" fg:w="116"/><text x="2.0983%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (6 samples, 0.02%)</title><rect x="2.2671%" y="389" width="0.0217%" height="15" fill="rgb(238,160,17)" fg:x="628" fg:w="6"/><text x="2.5171%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (3 samples, 0.01%)</title><rect x="2.4187%" y="373" width="0.0108%" height="15" fill="rgb(214,148,48)" fg:x="670" fg:w="3"/><text x="2.6687%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (19 samples, 0.07%)</title><rect x="2.6208%" y="357" width="0.0686%" height="15" fill="rgb(232,36,49)" fg:x="726" fg:w="19"/><text x="2.8708%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (133 samples, 0.48%)</title><rect x="2.2887%" y="389" width="0.4801%" height="15" fill="rgb(209,103,24)" fg:x="634" fg:w="133"/><text x="2.5387%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (93 samples, 0.34%)</title><rect x="2.4331%" y="373" width="0.3357%" height="15" fill="rgb(229,88,8)" fg:x="674" fg:w="93"/><text x="2.6831%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (22 samples, 0.08%)</title><rect x="2.6894%" y="357" width="0.0794%" height="15" fill="rgb(213,181,19)" fg:x="745" fg:w="22"/><text x="2.9394%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (71 samples, 0.26%)</title><rect x="2.7689%" y="389" width="0.2563%" height="15" fill="rgb(254,191,54)" fg:x="767" fg:w="71"/><text x="3.0189%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.02%)</title><rect x="3.0324%" y="389" width="0.0217%" height="15" fill="rgb(241,83,37)" fg:x="840" fg:w="6"/><text x="3.2824%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (36 samples, 0.13%)</title><rect x="3.0540%" y="389" width="0.1300%" height="15" fill="rgb(233,36,39)" fg:x="846" fg:w="36"/><text x="3.3040%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (363 samples, 1.31%)</title><rect x="3.1840%" y="389" width="1.3104%" height="15" fill="rgb(226,3,54)" fg:x="882" fg:w="363"/><text x="3.4340%" y="399.50"></text></g><g><title>benchmark_queries`query_exec::executor::ondisk_pipeline::sort::OnDiskSort&lt;T,M&gt;::execute (1,202 samples, 4.34%)</title><rect x="0.1985%" y="405" width="4.3392%" height="15" fill="rgb(245,192,40)" fg:x="55" fg:w="1202"/><text x="0.4485%" y="415.50">bench..</text></g><g><title>libsystem_platform.dylib`_platform_memset (12 samples, 0.04%)</title><rect x="4.4944%" y="389" width="0.0433%" height="15" fill="rgb(238,167,29)" fg:x="1245" fg:w="12"/><text x="4.7444%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_free (54 samples, 0.19%)</title><rect x="4.5377%" y="405" width="0.1949%" height="15" fill="rgb(232,182,51)" fg:x="1257" fg:w="54"/><text x="4.7877%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (44 samples, 0.16%)</title><rect x="4.7327%" y="405" width="0.1588%" height="15" fill="rgb(231,60,39)" fg:x="1311" fg:w="44"/><text x="4.9827%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (18 samples, 0.06%)</title><rect x="4.8915%" y="405" width="0.0650%" height="15" fill="rgb(208,69,12)" fg:x="1355" fg:w="18"/><text x="5.1415%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (6 samples, 0.02%)</title><rect x="4.9565%" y="405" width="0.0217%" height="15" fill="rgb(235,93,37)" fg:x="1373" fg:w="6"/><text x="5.2065%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.02%)</title><rect x="4.9782%" y="405" width="0.0217%" height="15" fill="rgb(213,116,39)" fg:x="1379" fg:w="6"/><text x="5.2282%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (11 samples, 0.04%)</title><rect x="5.0034%" y="405" width="0.0397%" height="15" fill="rgb(222,207,29)" fg:x="1386" fg:w="11"/><text x="5.2534%" y="415.50"></text></g><g><title>benchmark_queries`&lt;query_exec::executor::ondisk_pipeline::OnDiskPipelineGraph&lt;T,M&gt; as query_exec::executor::Executor&lt;T&gt;&gt;::execute (1,395 samples, 5.04%)</title><rect x="0.0361%" y="421" width="5.0359%" height="15" fill="rgb(206,96,30)" fg:x="10" fg:w="1395"/><text x="0.2861%" y="431.50">benchm..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.03%)</title><rect x="5.0431%" y="405" width="0.0289%" height="15" fill="rgb(218,138,4)" fg:x="1397" fg:w="8"/><text x="5.2931%" y="415.50"></text></g><g><title>CacheDelete`CallBlockWithProxy (4 samples, 0.01%)</title><rect x="5.0756%" y="293" width="0.0144%" height="15" fill="rgb(250,191,14)" fg:x="1406" fg:w="4"/><text x="5.3256%" y="303.50"></text></g><g><title>CacheDelete`clientCachedResults (3 samples, 0.01%)</title><rect x="5.0901%" y="293" width="0.0108%" height="15" fill="rgb(239,60,40)" fg:x="1410" fg:w="3"/><text x="5.3401%" y="303.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_barrier_sync_invoke_and_complete (3 samples, 0.01%)</title><rect x="5.0901%" y="277" width="0.0108%" height="15" fill="rgb(206,27,48)" fg:x="1410" fg:w="3"/><text x="5.3401%" y="287.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (3 samples, 0.01%)</title><rect x="5.0901%" y="261" width="0.0108%" height="15" fill="rgb(225,35,8)" fg:x="1410" fg:w="3"/><text x="5.3401%" y="271.50"></text></g><g><title>CacheDelete`__clientCachedResults_block_invoke_2 (3 samples, 0.01%)</title><rect x="5.0901%" y="245" width="0.0108%" height="15" fill="rgb(250,213,24)" fg:x="1410" fg:w="3"/><text x="5.3401%" y="255.50"></text></g><g><title>CoreFoundation`CFURLCopyResourcePropertiesForKeys (9 samples, 0.03%)</title><rect x="5.0720%" y="389" width="0.0325%" height="15" fill="rgb(247,123,22)" fg:x="1405" fg:w="9"/><text x="5.3220%" y="399.50"></text></g><g><title>CoreServicesInternal`_FSURLCopyResourcePropertiesForKeysInternal(__CFURL const*, __CFArray const*, void*, __CFError**, unsigned char) (9 samples, 0.03%)</title><rect x="5.0720%" y="373" width="0.0325%" height="15" fill="rgb(231,138,38)" fg:x="1405" fg:w="9"/><text x="5.3220%" y="383.50"></text></g><g><title>CoreServicesInternal`prepareValuesForBitmap(__CFURL const*, __FileCache*, _FilePropertyBitmap*, __CFError**) (9 samples, 0.03%)</title><rect x="5.0720%" y="357" width="0.0325%" height="15" fill="rgb(231,145,46)" fg:x="1405" fg:w="9"/><text x="5.3220%" y="367.50"></text></g><g><title>CoreServicesInternal`volumePropertyProviderPrepareValues(__CFURL const*, __FileCache*, __CFString const* const*, void const**, long, void const*, __CFError**) (9 samples, 0.03%)</title><rect x="5.0720%" y="341" width="0.0325%" height="15" fill="rgb(251,118,11)" fg:x="1405" fg:w="9"/><text x="5.3220%" y="351.50"></text></g><g><title>CoreServicesInternal`Call_CacheDeleteCopyAvailableSpaceForVolume(__CFString const*, CacheDeleteAvailableSpaceClass, __CFError**) (9 samples, 0.03%)</title><rect x="5.0720%" y="325" width="0.0325%" height="15" fill="rgb(217,147,25)" fg:x="1405" fg:w="9"/><text x="5.3220%" y="335.50"></text></g><g><title>CacheDelete`CacheDeleteCopyAvailableSpaceForVolume (9 samples, 0.03%)</title><rect x="5.0720%" y="309" width="0.0325%" height="15" fill="rgb(247,81,37)" fg:x="1405" fg:w="9"/><text x="5.3220%" y="319.50"></text></g><g><title>benchmark_queries`sysinfo::apple::disk::get_disks (10 samples, 0.04%)</title><rect x="5.0720%" y="405" width="0.0361%" height="15" fill="rgb(209,12,38)" fg:x="1405" fg:w="10"/><text x="5.3220%" y="415.50"></text></g><g><title>IOKit`IOHIDEventSystemClientCreateWithType (3 samples, 0.01%)</title><rect x="5.1081%" y="389" width="0.0108%" height="15" fill="rgb(227,1,9)" fg:x="1415" fg:w="3"/><text x="5.3581%" y="399.50"></text></g><g><title>benchmark_queries`sysinfo::apple::macos::component::arm::Components::refresh (5 samples, 0.02%)</title><rect x="5.1081%" y="405" width="0.0180%" height="15" fill="rgb(248,47,43)" fg:x="1415" fg:w="5"/><text x="5.3581%" y="415.50"></text></g><g><title>benchmark_queries`&lt;sysinfo::apple::system::System as sysinfo::traits::SystemExt&gt;::new_with_specifics (20 samples, 0.07%)</title><rect x="5.0720%" y="421" width="0.0722%" height="15" fill="rgb(221,10,30)" fg:x="1405" fg:w="20"/><text x="5.3220%" y="431.50"></text></g><g><title>benchmark_queries`sysinfo::apple::users::get_users_list (4 samples, 0.01%)</title><rect x="5.1298%" y="405" width="0.0144%" height="15" fill="rgb(210,229,1)" fg:x="1421" fg:w="4"/><text x="5.3798%" y="415.50"></text></g><g><title>benchmark_queries`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (4 samples, 0.01%)</title><rect x="5.1298%" y="389" width="0.0144%" height="15" fill="rgb(222,148,37)" fg:x="1421" fg:w="4"/><text x="5.3798%" y="399.50"></text></g><g><title>libsystem_info.dylib`getgrgid (4 samples, 0.01%)</title><rect x="5.1298%" y="373" width="0.0144%" height="15" fill="rgb(234,67,33)" fg:x="1421" fg:w="4"/><text x="5.3798%" y="383.50"></text></g><g><title>libsystem_info.dylib`search_item_bynumber (4 samples, 0.01%)</title><rect x="5.1298%" y="357" width="0.0144%" height="15" fill="rgb(247,98,35)" fg:x="1421" fg:w="4"/><text x="5.3798%" y="367.50"></text></g><g><title>libsystem_info.dylib`ds_group_bygid (3 samples, 0.01%)</title><rect x="5.1334%" y="341" width="0.0108%" height="15" fill="rgb(247,138,52)" fg:x="1422" fg:w="3"/><text x="5.3834%" y="351.50"></text></g><g><title>libsystem_info.dylib`_ds_item (3 samples, 0.01%)</title><rect x="5.1334%" y="325" width="0.0108%" height="15" fill="rgb(213,79,30)" fg:x="1422" fg:w="3"/><text x="5.3834%" y="335.50"></text></g><g><title>benchmark_queries`&lt;fbtree::bp::buffer_pool::BufferPool as core::ops::drop::Drop&gt;::drop (5 samples, 0.02%)</title><rect x="5.1442%" y="405" width="0.0180%" height="15" fill="rgb(246,177,23)" fg:x="1425" fg:w="5"/><text x="5.3942%" y="415.50"></text></g><g><title>benchmark_queries`&lt;fbtree::bp::buffer_pool::BufferPool as fbtree::bp::mem_pool_trait::MemPool&gt;::flush_all_and_reset (5 samples, 0.02%)</title><rect x="5.1442%" y="389" width="0.0180%" height="15" fill="rgb(230,62,27)" fg:x="1425" fg:w="5"/><text x="5.3942%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`madvise (98 samples, 0.35%)</title><rect x="5.1695%" y="373" width="0.3538%" height="15" fill="rgb(216,154,8)" fg:x="1432" fg:w="98"/><text x="5.4195%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_scan_madvise_free (666 samples, 2.40%)</title><rect x="5.5377%" y="373" width="2.4042%" height="15" fill="rgb(244,35,45)" fg:x="1534" fg:w="666"/><text x="5.7877%" y="383.50">li..</text></g><g><title>libsystem_kernel.dylib`madvise (666 samples, 2.40%)</title><rect x="5.5377%" y="357" width="2.4042%" height="15" fill="rgb(251,115,12)" fg:x="1534" fg:w="666"/><text x="5.7877%" y="367.50">li..</text></g><g><title>libsystem_malloc.dylib`free_medium (780 samples, 2.82%)</title><rect x="5.1695%" y="389" width="2.8158%" height="15" fill="rgb(240,54,50)" fg:x="1432" fg:w="780"/><text x="5.4195%" y="399.50">li..</text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (12 samples, 0.04%)</title><rect x="7.9420%" y="373" width="0.0433%" height="15" fill="rgb(233,84,52)" fg:x="2200" fg:w="12"/><text x="8.1920%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 0.04%)</title><rect x="7.9420%" y="357" width="0.0433%" height="15" fill="rgb(207,117,47)" fg:x="2200" fg:w="12"/><text x="8.1920%" y="367.50"></text></g><g><title>benchmark_queries`core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;fbtree::bp::buffer_pool::Frames&gt;&gt; (796 samples, 2.87%)</title><rect x="5.1659%" y="405" width="2.8735%" height="15" fill="rgb(249,43,39)" fg:x="1431" fg:w="796"/><text x="5.4159%" y="415.50">be..</text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (15 samples, 0.05%)</title><rect x="7.9853%" y="389" width="0.0541%" height="15" fill="rgb(209,38,44)" fg:x="2212" fg:w="15"/><text x="8.2353%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (15 samples, 0.05%)</title><rect x="7.9853%" y="373" width="0.0541%" height="15" fill="rgb(236,212,23)" fg:x="2212" fg:w="15"/><text x="8.2353%" y="383.50"></text></g><g><title>benchmark_queries`alloc::sync::Arc&lt;T,A&gt;::drop_slow (804 samples, 2.90%)</title><rect x="5.1442%" y="421" width="2.9024%" height="15" fill="rgb(242,79,21)" fg:x="1425" fg:w="804"/><text x="5.3942%" y="431.50">be..</text></g><g><title>libsystem_malloc.dylib`medium_malloc_from_free_list (3 samples, 0.01%)</title><rect x="8.0972%" y="341" width="0.0108%" height="15" fill="rgb(211,96,35)" fg:x="2243" fg:w="3"/><text x="8.3472%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (14 samples, 0.05%)</title><rect x="8.0683%" y="357" width="0.0505%" height="15" fill="rgb(253,215,40)" fg:x="2235" fg:w="14"/><text x="8.3183%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages_plat (3 samples, 0.01%)</title><rect x="8.1080%" y="341" width="0.0108%" height="15" fill="rgb(211,81,21)" fg:x="2246" fg:w="3"/><text x="8.3580%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (3 samples, 0.01%)</title><rect x="8.1080%" y="325" width="0.0108%" height="15" fill="rgb(208,190,38)" fg:x="2246" fg:w="3"/><text x="8.3580%" y="335.50"></text></g><g><title>libsystem_platform.dylib`__bzero (3,175 samples, 11.46%)</title><rect x="8.1188%" y="357" width="11.4617%" height="15" fill="rgb(235,213,38)" fg:x="2249" fg:w="3175"/><text x="8.3688%" y="367.50">libsystem_platfor..</text></g><g><title>benchmark_queries`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,194 samples, 11.53%)</title><rect x="8.0539%" y="389" width="11.5303%" height="15" fill="rgb(237,122,38)" fg:x="2231" fg:w="3194"/><text x="8.3039%" y="399.50">benchmark_queries..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3,192 samples, 11.52%)</title><rect x="8.0611%" y="373" width="11.5230%" height="15" fill="rgb(244,218,35)" fg:x="2233" fg:w="3192"/><text x="8.3111%" y="383.50">libsystem_malloc...</text></g><g><title>benchmark_queries`fbtree::bp::buffer_pool::Frames::new (3,200 samples, 11.55%)</title><rect x="8.0539%" y="405" width="11.5519%" height="15" fill="rgb(240,68,47)" fg:x="2231" fg:w="3200"/><text x="8.3039%" y="415.50">benchmark_queries..</text></g><g><title>benchmark_queries`fbtree::bp::buffer_pool::BufferPool::new (3,201 samples, 11.56%)</title><rect x="8.0539%" y="421" width="11.5555%" height="15" fill="rgb(210,16,53)" fg:x="2231" fg:w="3201"/><text x="8.3039%" y="431.50">benchmark_queries..</text></g><g><title>benchmark_queries`&lt;sysinfo::apple::macos::component::arm::Component as sysinfo::traits::ComponentExt&gt;::refresh (7 samples, 0.03%)</title><rect x="19.6202%" y="405" width="0.0253%" height="15" fill="rgb(235,124,12)" fg:x="5435" fg:w="7"/><text x="19.8702%" y="415.50"></text></g><g><title>IOKit`_IOHIDEventSystemClientCopyEventForService (6 samples, 0.02%)</title><rect x="19.6238%" y="389" width="0.0217%" height="15" fill="rgb(224,169,11)" fg:x="5436" fg:w="6"/><text x="19.8738%" y="399.50"></text></g><g><title>dyld`start (5,441 samples, 19.64%)</title><rect x="0.0072%" y="517" width="19.6419%" height="15" fill="rgb(250,166,2)" fg:x="2" fg:w="5441"/><text x="0.2572%" y="527.50">dyld`start</text></g><g><title>benchmark_queries`main (5,441 samples, 19.64%)</title><rect x="0.0072%" y="501" width="19.6419%" height="15" fill="rgb(242,216,29)" fg:x="2" fg:w="5441"/><text x="0.2572%" y="511.50">benchmark_queries`main</text></g><g><title>benchmark_queries`std::rt::lang_start_internal (5,441 samples, 19.64%)</title><rect x="0.0072%" y="485" width="19.6419%" height="15" fill="rgb(230,116,27)" fg:x="2" fg:w="5441"/><text x="0.2572%" y="495.50">benchmark_queries`std::rt::lang..</text></g><g><title>benchmark_queries`std::rt::lang_start::_{{closure}} (5,441 samples, 19.64%)</title><rect x="0.0072%" y="469" width="19.6419%" height="15" fill="rgb(228,99,48)" fg:x="2" fg:w="5441"/><text x="0.2572%" y="479.50">benchmark_queries`std::rt::lang..</text></g><g><title>benchmark_queries`std::sys::backtrace::__rust_begin_short_backtrace (5,441 samples, 19.64%)</title><rect x="0.0072%" y="453" width="19.6419%" height="15" fill="rgb(253,11,6)" fg:x="2" fg:w="5441"/><text x="0.2572%" y="463.50">benchmark_queries`std::sys::bac..</text></g><g><title>benchmark_queries`benchmark_queries::main (5,441 samples, 19.64%)</title><rect x="0.0072%" y="437" width="19.6419%" height="15" fill="rgb(247,143,39)" fg:x="2" fg:w="5441"/><text x="0.2572%" y="447.50">benchmark_queries`benchmark_que..</text></g><g><title>benchmark_queries`sysinfo::traits::SystemExt::refresh_all (8 samples, 0.03%)</title><rect x="19.6202%" y="421" width="0.0289%" height="15" fill="rgb(236,97,10)" fg:x="5435" fg:w="8"/><text x="19.8702%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`__sysctl (3 samples, 0.01%)</title><rect x="19.6563%" y="517" width="0.0108%" height="15" fill="rgb(233,208,19)" fg:x="5445" fg:w="3"/><text x="19.9063%" y="527.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$free (28 samples, 0.10%)</title><rect x="19.6744%" y="357" width="0.1011%" height="15" fill="rgb(216,164,2)" fg:x="5450" fg:w="28"/><text x="19.9244%" y="367.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::append (3 samples, 0.01%)</title><rect x="19.8946%" y="341" width="0.0108%" height="15" fill="rgb(220,129,5)" fg:x="5511" fg:w="3"/><text x="20.1446%" y="351.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::append (4 samples, 0.01%)</title><rect x="19.9054%" y="341" width="0.0144%" height="15" fill="rgb(242,17,10)" fg:x="5514" fg:w="4"/><text x="20.1554%" y="351.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (3 samples, 0.01%)</title><rect x="19.9199%" y="341" width="0.0108%" height="15" fill="rgb(242,107,0)" fg:x="5518" fg:w="3"/><text x="20.1699%" y="351.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot_count (3 samples, 0.01%)</title><rect x="19.9379%" y="341" width="0.0108%" height="15" fill="rgb(251,28,31)" fg:x="5523" fg:w="3"/><text x="20.1879%" y="351.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$free (5 samples, 0.02%)</title><rect x="19.9487%" y="341" width="0.0180%" height="15" fill="rgb(233,223,10)" fg:x="5526" fg:w="5"/><text x="20.1987%" y="351.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (45 samples, 0.16%)</title><rect x="19.9884%" y="309" width="0.1624%" height="15" fill="rgb(215,21,27)" fg:x="5537" fg:w="45"/><text x="20.2384%" y="319.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (7 samples, 0.03%)</title><rect x="20.4794%" y="293" width="0.0253%" height="15" fill="rgb(232,23,21)" fg:x="5673" fg:w="7"/><text x="20.7294%" y="303.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (22 samples, 0.08%)</title><rect x="20.5913%" y="277" width="0.0794%" height="15" fill="rgb(244,5,23)" fg:x="5704" fg:w="22"/><text x="20.8413%" y="287.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (67 samples, 0.24%)</title><rect x="20.5047%" y="293" width="0.2419%" height="15" fill="rgb(226,81,46)" fg:x="5680" fg:w="67"/><text x="20.7547%" y="303.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (21 samples, 0.08%)</title><rect x="20.6707%" y="277" width="0.0758%" height="15" fill="rgb(247,70,30)" fg:x="5726" fg:w="21"/><text x="20.9207%" y="287.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (17 samples, 0.06%)</title><rect x="20.7465%" y="293" width="0.0614%" height="15" fill="rgb(212,68,19)" fg:x="5747" fg:w="17"/><text x="20.9965%" y="303.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcmp (3 samples, 0.01%)</title><rect x="20.8079%" y="293" width="0.0108%" height="15" fill="rgb(240,187,13)" fg:x="5764" fg:w="3"/><text x="21.0579%" y="303.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::pivot::choose_pivot (6 samples, 0.02%)</title><rect x="20.8187%" y="293" width="0.0217%" height="15" fill="rgb(223,113,26)" fg:x="5767" fg:w="6"/><text x="21.0687%" y="303.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::pivot::median3_rec (6 samples, 0.02%)</title><rect x="20.8187%" y="277" width="0.0217%" height="15" fill="rgb(206,192,2)" fg:x="5767" fg:w="6"/><text x="21.0687%" y="287.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::pivot::median3_rec (6 samples, 0.02%)</title><rect x="20.8187%" y="261" width="0.0217%" height="15" fill="rgb(241,108,4)" fg:x="5767" fg:w="6"/><text x="21.0687%" y="271.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::pivot::median3_rec (6 samples, 0.02%)</title><rect x="20.8187%" y="245" width="0.0217%" height="15" fill="rgb(247,173,49)" fg:x="5767" fg:w="6"/><text x="21.0687%" y="255.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::pivot::median3_rec (6 samples, 0.02%)</title><rect x="20.8187%" y="229" width="0.0217%" height="15" fill="rgb(224,114,35)" fg:x="5767" fg:w="6"/><text x="21.0687%" y="239.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (6 samples, 0.02%)</title><rect x="20.9018%" y="277" width="0.0217%" height="15" fill="rgb(245,159,27)" fg:x="5790" fg:w="6"/><text x="21.1518%" y="287.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (13 samples, 0.05%)</title><rect x="20.9920%" y="261" width="0.0469%" height="15" fill="rgb(245,172,44)" fg:x="5815" fg:w="13"/><text x="21.2420%" y="271.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (42 samples, 0.15%)</title><rect x="20.9234%" y="277" width="0.1516%" height="15" fill="rgb(236,23,11)" fg:x="5796" fg:w="42"/><text x="21.1734%" y="287.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (10 samples, 0.04%)</title><rect x="21.0390%" y="261" width="0.0361%" height="15" fill="rgb(205,117,38)" fg:x="5828" fg:w="10"/><text x="21.2890%" y="271.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (11 samples, 0.04%)</title><rect x="21.0751%" y="277" width="0.0397%" height="15" fill="rgb(237,72,25)" fg:x="5838" fg:w="11"/><text x="21.3251%" y="287.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (3 samples, 0.01%)</title><rect x="21.1256%" y="277" width="0.0108%" height="15" fill="rgb(244,70,9)" fg:x="5852" fg:w="3"/><text x="21.3756%" y="287.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (5 samples, 0.02%)</title><rect x="21.1870%" y="261" width="0.0180%" height="15" fill="rgb(217,125,39)" fg:x="5869" fg:w="5"/><text x="21.4370%" y="271.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (17 samples, 0.06%)</title><rect x="21.2519%" y="245" width="0.0614%" height="15" fill="rgb(235,36,10)" fg:x="5887" fg:w="17"/><text x="21.5019%" y="255.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (40 samples, 0.14%)</title><rect x="21.2050%" y="261" width="0.1444%" height="15" fill="rgb(251,123,47)" fg:x="5874" fg:w="40"/><text x="21.4550%" y="271.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (10 samples, 0.04%)</title><rect x="21.3133%" y="245" width="0.0361%" height="15" fill="rgb(221,13,13)" fg:x="5904" fg:w="10"/><text x="21.5633%" y="255.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (9 samples, 0.03%)</title><rect x="21.3494%" y="261" width="0.0325%" height="15" fill="rgb(238,131,9)" fg:x="5914" fg:w="9"/><text x="21.5994%" y="271.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcmp (3 samples, 0.01%)</title><rect x="21.3819%" y="261" width="0.0108%" height="15" fill="rgb(211,50,8)" fg:x="5923" fg:w="3"/><text x="21.6319%" y="271.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::insert_tail (3 samples, 0.01%)</title><rect x="21.3999%" y="245" width="0.0108%" height="15" fill="rgb(245,182,24)" fg:x="5928" fg:w="3"/><text x="21.6499%" y="255.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (8 samples, 0.03%)</title><rect x="21.3963%" y="261" width="0.0289%" height="15" fill="rgb(242,14,37)" fg:x="5927" fg:w="8"/><text x="21.6463%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (4 samples, 0.01%)</title><rect x="21.4108%" y="245" width="0.0144%" height="15" fill="rgb(246,228,12)" fg:x="5931" fg:w="4"/><text x="21.6608%" y="255.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (5 samples, 0.02%)</title><rect x="21.4505%" y="245" width="0.0180%" height="15" fill="rgb(213,55,15)" fg:x="5942" fg:w="5"/><text x="21.7005%" y="255.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (18 samples, 0.06%)</title><rect x="21.5227%" y="229" width="0.0650%" height="15" fill="rgb(209,9,3)" fg:x="5962" fg:w="18"/><text x="21.7727%" y="239.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (49 samples, 0.18%)</title><rect x="21.4685%" y="245" width="0.1769%" height="15" fill="rgb(230,59,30)" fg:x="5947" fg:w="49"/><text x="21.7185%" y="255.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (16 samples, 0.06%)</title><rect x="21.5877%" y="229" width="0.0578%" height="15" fill="rgb(209,121,21)" fg:x="5980" fg:w="16"/><text x="21.8377%" y="239.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (7 samples, 0.03%)</title><rect x="21.6454%" y="245" width="0.0253%" height="15" fill="rgb(220,109,13)" fg:x="5996" fg:w="7"/><text x="21.8954%" y="255.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::pivot::median3_rec (3 samples, 0.01%)</title><rect x="21.6815%" y="213" width="0.0108%" height="15" fill="rgb(232,18,1)" fg:x="6006" fg:w="3"/><text x="21.9315%" y="223.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::pivot::choose_pivot (8 samples, 0.03%)</title><rect x="21.6743%" y="245" width="0.0289%" height="15" fill="rgb(215,41,42)" fg:x="6004" fg:w="8"/><text x="21.9243%" y="255.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::pivot::median3_rec (8 samples, 0.03%)</title><rect x="21.6743%" y="229" width="0.0289%" height="15" fill="rgb(224,123,36)" fg:x="6004" fg:w="8"/><text x="21.9243%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (3 samples, 0.01%)</title><rect x="21.6924%" y="213" width="0.0108%" height="15" fill="rgb(240,125,3)" fg:x="6009" fg:w="3"/><text x="21.9424%" y="223.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::bidirectional_merge (6 samples, 0.02%)</title><rect x="21.7176%" y="229" width="0.0217%" height="15" fill="rgb(205,98,50)" fg:x="6016" fg:w="6"/><text x="21.9676%" y="239.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (4 samples, 0.01%)</title><rect x="21.7248%" y="213" width="0.0144%" height="15" fill="rgb(205,185,37)" fg:x="6018" fg:w="4"/><text x="21.9748%" y="223.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (3 samples, 0.01%)</title><rect x="21.7285%" y="197" width="0.0108%" height="15" fill="rgb(238,207,15)" fg:x="6019" fg:w="3"/><text x="21.9785%" y="207.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::insert_tail (6 samples, 0.02%)</title><rect x="21.7393%" y="229" width="0.0217%" height="15" fill="rgb(213,199,42)" fg:x="6022" fg:w="6"/><text x="21.9893%" y="239.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (5 samples, 0.02%)</title><rect x="21.7429%" y="213" width="0.0180%" height="15" fill="rgb(235,201,11)" fg:x="6023" fg:w="5"/><text x="21.9929%" y="223.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (3 samples, 0.01%)</title><rect x="21.7501%" y="197" width="0.0108%" height="15" fill="rgb(207,46,11)" fg:x="6025" fg:w="3"/><text x="22.0001%" y="207.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (25 samples, 0.09%)</title><rect x="21.7032%" y="245" width="0.0902%" height="15" fill="rgb(241,35,35)" fg:x="6012" fg:w="25"/><text x="21.9532%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (7 samples, 0.03%)</title><rect x="21.7682%" y="229" width="0.0253%" height="15" fill="rgb(243,32,47)" fg:x="6030" fg:w="7"/><text x="22.0182%" y="239.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (4 samples, 0.01%)</title><rect x="21.8187%" y="229" width="0.0144%" height="15" fill="rgb(247,202,23)" fg:x="6044" fg:w="4"/><text x="22.0687%" y="239.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (12 samples, 0.04%)</title><rect x="21.8584%" y="213" width="0.0433%" height="15" fill="rgb(219,102,11)" fg:x="6055" fg:w="12"/><text x="22.1084%" y="223.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (28 samples, 0.10%)</title><rect x="21.8331%" y="229" width="0.1011%" height="15" fill="rgb(243,110,44)" fg:x="6048" fg:w="28"/><text x="22.0831%" y="239.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (9 samples, 0.03%)</title><rect x="21.9017%" y="213" width="0.0325%" height="15" fill="rgb(222,74,54)" fg:x="6067" fg:w="9"/><text x="22.1517%" y="223.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (5 samples, 0.02%)</title><rect x="21.9342%" y="229" width="0.0180%" height="15" fill="rgb(216,99,12)" fg:x="6076" fg:w="5"/><text x="22.1842%" y="239.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (5 samples, 0.02%)</title><rect x="21.9703%" y="213" width="0.0180%" height="15" fill="rgb(226,22,26)" fg:x="6086" fg:w="5"/><text x="22.2203%" y="223.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::bidirectional_merge (4 samples, 0.01%)</title><rect x="21.9920%" y="213" width="0.0144%" height="15" fill="rgb(217,163,10)" fg:x="6092" fg:w="4"/><text x="22.2420%" y="223.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (3 samples, 0.01%)</title><rect x="22.0245%" y="197" width="0.0108%" height="15" fill="rgb(213,25,53)" fg:x="6101" fg:w="3"/><text x="22.2745%" y="207.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::insert_tail (11 samples, 0.04%)</title><rect x="22.0064%" y="213" width="0.0397%" height="15" fill="rgb(252,105,26)" fg:x="6096" fg:w="11"/><text x="22.2564%" y="223.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (3 samples, 0.01%)</title><rect x="22.0353%" y="197" width="0.0108%" height="15" fill="rgb(220,39,43)" fg:x="6104" fg:w="3"/><text x="22.2853%" y="207.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (5 samples, 0.02%)</title><rect x="22.0534%" y="197" width="0.0180%" height="15" fill="rgb(229,68,48)" fg:x="6109" fg:w="5"/><text x="22.3034%" y="207.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (3 samples, 0.01%)</title><rect x="22.0606%" y="181" width="0.0108%" height="15" fill="rgb(252,8,32)" fg:x="6111" fg:w="3"/><text x="22.3106%" y="191.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::sort4_stable (8 samples, 0.03%)</title><rect x="22.0461%" y="213" width="0.0289%" height="15" fill="rgb(223,20,43)" fg:x="6107" fg:w="8"/><text x="22.2961%" y="223.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (41 samples, 0.15%)</title><rect x="21.9631%" y="229" width="0.1480%" height="15" fill="rgb(229,81,49)" fg:x="6084" fg:w="41"/><text x="22.2131%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (10 samples, 0.04%)</title><rect x="22.0750%" y="213" width="0.0361%" height="15" fill="rgb(236,28,36)" fg:x="6115" fg:w="10"/><text x="22.3250%" y="223.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (11 samples, 0.04%)</title><rect x="22.1833%" y="197" width="0.0397%" height="15" fill="rgb(249,185,26)" fg:x="6145" fg:w="11"/><text x="22.4333%" y="207.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (25 samples, 0.09%)</title><rect x="22.1508%" y="213" width="0.0902%" height="15" fill="rgb(249,174,33)" fg:x="6136" fg:w="25"/><text x="22.4008%" y="223.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (5 samples, 0.02%)</title><rect x="22.2230%" y="197" width="0.0180%" height="15" fill="rgb(233,201,37)" fg:x="6156" fg:w="5"/><text x="22.4730%" y="207.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (3 samples, 0.01%)</title><rect x="22.2411%" y="213" width="0.0108%" height="15" fill="rgb(221,78,26)" fg:x="6161" fg:w="3"/><text x="22.4911%" y="223.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (5 samples, 0.02%)</title><rect x="22.2591%" y="197" width="0.0180%" height="15" fill="rgb(250,127,30)" fg:x="6166" fg:w="5"/><text x="22.5091%" y="207.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (4 samples, 0.01%)</title><rect x="22.2916%" y="181" width="0.0144%" height="15" fill="rgb(230,49,44)" fg:x="6175" fg:w="4"/><text x="22.5416%" y="191.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::bidirectional_merge (9 samples, 0.03%)</title><rect x="22.2808%" y="197" width="0.0325%" height="15" fill="rgb(229,67,23)" fg:x="6172" fg:w="9"/><text x="22.5308%" y="207.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (3 samples, 0.01%)</title><rect x="22.3205%" y="165" width="0.0108%" height="15" fill="rgb(249,83,47)" fg:x="6183" fg:w="3"/><text x="22.5705%" y="175.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (5 samples, 0.02%)</title><rect x="22.3169%" y="181" width="0.0180%" height="15" fill="rgb(215,43,3)" fg:x="6182" fg:w="5"/><text x="22.5669%" y="191.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::insert_tail (9 samples, 0.03%)</title><rect x="22.3133%" y="197" width="0.0325%" height="15" fill="rgb(238,154,13)" fg:x="6181" fg:w="9"/><text x="22.5633%" y="207.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (3 samples, 0.01%)</title><rect x="22.3349%" y="181" width="0.0108%" height="15" fill="rgb(219,56,2)" fg:x="6187" fg:w="3"/><text x="22.5849%" y="191.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::sort4_stable (3 samples, 0.01%)</title><rect x="22.3458%" y="197" width="0.0108%" height="15" fill="rgb(233,0,4)" fg:x="6190" fg:w="3"/><text x="22.5958%" y="207.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (40 samples, 0.14%)</title><rect x="22.2591%" y="213" width="0.1444%" height="15" fill="rgb(235,30,7)" fg:x="6166" fg:w="40"/><text x="22.5091%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (13 samples, 0.05%)</title><rect x="22.3566%" y="197" width="0.0469%" height="15" fill="rgb(250,79,13)" fg:x="6193" fg:w="13"/><text x="22.6066%" y="207.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (4 samples, 0.01%)</title><rect x="22.4288%" y="197" width="0.0144%" height="15" fill="rgb(211,146,34)" fg:x="6213" fg:w="4"/><text x="22.6788%" y="207.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (5 samples, 0.02%)</title><rect x="22.4432%" y="197" width="0.0180%" height="15" fill="rgb(228,22,38)" fg:x="6217" fg:w="5"/><text x="22.6932%" y="207.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (3 samples, 0.01%)</title><rect x="22.4505%" y="181" width="0.0108%" height="15" fill="rgb(235,168,5)" fg:x="6219" fg:w="3"/><text x="22.7005%" y="191.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::bidirectional_merge (9 samples, 0.03%)</title><rect x="22.4793%" y="181" width="0.0325%" height="15" fill="rgb(221,155,16)" fg:x="6227" fg:w="9"/><text x="22.7293%" y="191.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (6 samples, 0.02%)</title><rect x="22.4902%" y="165" width="0.0217%" height="15" fill="rgb(215,215,53)" fg:x="6230" fg:w="6"/><text x="22.7402%" y="175.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (4 samples, 0.01%)</title><rect x="22.4974%" y="149" width="0.0144%" height="15" fill="rgb(223,4,10)" fg:x="6232" fg:w="4"/><text x="22.7474%" y="159.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (4 samples, 0.01%)</title><rect x="22.5190%" y="149" width="0.0144%" height="15" fill="rgb(234,103,6)" fg:x="6238" fg:w="4"/><text x="22.7690%" y="159.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (5 samples, 0.02%)</title><rect x="22.5190%" y="165" width="0.0180%" height="15" fill="rgb(227,97,0)" fg:x="6238" fg:w="5"/><text x="22.7690%" y="175.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::insert_tail (8 samples, 0.03%)</title><rect x="22.5118%" y="181" width="0.0289%" height="15" fill="rgb(234,150,53)" fg:x="6236" fg:w="8"/><text x="22.7618%" y="191.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (3 samples, 0.01%)</title><rect x="22.5443%" y="165" width="0.0108%" height="15" fill="rgb(228,201,54)" fg:x="6245" fg:w="3"/><text x="22.7943%" y="175.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::sort4_stable (6 samples, 0.02%)</title><rect x="22.5407%" y="181" width="0.0217%" height="15" fill="rgb(222,22,37)" fg:x="6244" fg:w="6"/><text x="22.7907%" y="191.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (36 samples, 0.13%)</title><rect x="22.4721%" y="197" width="0.1300%" height="15" fill="rgb(237,53,32)" fg:x="6225" fg:w="36"/><text x="22.7221%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (11 samples, 0.04%)</title><rect x="22.5624%" y="181" width="0.0397%" height="15" fill="rgb(233,25,53)" fg:x="6250" fg:w="11"/><text x="22.8124%" y="191.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (3 samples, 0.01%)</title><rect x="22.6273%" y="165" width="0.0108%" height="15" fill="rgb(210,40,34)" fg:x="6268" fg:w="3"/><text x="22.8773%" y="175.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::bidirectional_merge (6 samples, 0.02%)</title><rect x="22.6418%" y="165" width="0.0217%" height="15" fill="rgb(241,220,44)" fg:x="6272" fg:w="6"/><text x="22.8918%" y="175.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (3 samples, 0.01%)</title><rect x="22.6707%" y="133" width="0.0108%" height="15" fill="rgb(235,28,35)" fg:x="6280" fg:w="3"/><text x="22.9207%" y="143.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (5 samples, 0.02%)</title><rect x="22.6671%" y="149" width="0.0180%" height="15" fill="rgb(210,56,17)" fg:x="6279" fg:w="5"/><text x="22.9171%" y="159.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::insert_tail (7 samples, 0.03%)</title><rect x="22.6634%" y="165" width="0.0253%" height="15" fill="rgb(224,130,29)" fg:x="6278" fg:w="7"/><text x="22.9134%" y="175.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::sort4_stable (4 samples, 0.01%)</title><rect x="22.6887%" y="165" width="0.0144%" height="15" fill="rgb(235,212,8)" fg:x="6285" fg:w="4"/><text x="22.9387%" y="175.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (3 samples, 0.01%)</title><rect x="22.6923%" y="149" width="0.0108%" height="15" fill="rgb(223,33,50)" fg:x="6286" fg:w="3"/><text x="22.9423%" y="159.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (30 samples, 0.11%)</title><rect x="22.6273%" y="181" width="0.1083%" height="15" fill="rgb(219,149,13)" fg:x="6268" fg:w="30"/><text x="22.8773%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (9 samples, 0.03%)</title><rect x="22.7032%" y="165" width="0.0325%" height="15" fill="rgb(250,156,29)" fg:x="6289" fg:w="9"/><text x="22.9532%" y="175.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::bidirectional_merge (7 samples, 0.03%)</title><rect x="22.7537%" y="149" width="0.0253%" height="15" fill="rgb(216,193,19)" fg:x="6303" fg:w="7"/><text x="23.0037%" y="159.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (3 samples, 0.01%)</title><rect x="22.7681%" y="133" width="0.0108%" height="15" fill="rgb(216,135,14)" fg:x="6307" fg:w="3"/><text x="23.0181%" y="143.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::insert_tail (5 samples, 0.02%)</title><rect x="22.7790%" y="149" width="0.0180%" height="15" fill="rgb(241,47,5)" fg:x="6310" fg:w="5"/><text x="23.0290%" y="159.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (3 samples, 0.01%)</title><rect x="22.7862%" y="133" width="0.0108%" height="15" fill="rgb(233,42,35)" fg:x="6312" fg:w="3"/><text x="23.0362%" y="143.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::sort4_stable (3 samples, 0.01%)</title><rect x="22.7970%" y="149" width="0.0108%" height="15" fill="rgb(231,13,6)" fg:x="6315" fg:w="3"/><text x="23.0470%" y="159.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (22 samples, 0.08%)</title><rect x="22.7501%" y="165" width="0.0794%" height="15" fill="rgb(207,181,40)" fg:x="6302" fg:w="22"/><text x="23.0001%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (6 samples, 0.02%)</title><rect x="22.8078%" y="149" width="0.0217%" height="15" fill="rgb(254,173,49)" fg:x="6318" fg:w="6"/><text x="23.0578%" y="159.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::bidirectional_merge (4 samples, 0.01%)</title><rect x="22.8331%" y="133" width="0.0144%" height="15" fill="rgb(221,1,38)" fg:x="6325" fg:w="4"/><text x="23.0831%" y="143.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (8 samples, 0.03%)</title><rect x="22.8295%" y="149" width="0.0289%" height="15" fill="rgb(206,124,46)" fg:x="6324" fg:w="8"/><text x="23.0795%" y="159.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (11 samples, 0.04%)</title><rect x="22.8295%" y="165" width="0.0397%" height="15" fill="rgb(249,21,11)" fg:x="6324" fg:w="11"/><text x="23.0795%" y="175.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (3 samples, 0.01%)</title><rect x="22.8584%" y="149" width="0.0108%" height="15" fill="rgb(222,201,40)" fg:x="6332" fg:w="3"/><text x="23.1084%" y="159.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (39 samples, 0.14%)</title><rect x="22.7356%" y="181" width="0.1408%" height="15" fill="rgb(235,61,29)" fg:x="6298" fg:w="39"/><text x="22.9856%" y="191.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (77 samples, 0.28%)</title><rect x="22.6021%" y="197" width="0.2780%" height="15" fill="rgb(219,207,3)" fg:x="6261" fg:w="77"/><text x="22.8521%" y="207.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (137 samples, 0.49%)</title><rect x="22.4035%" y="213" width="0.4946%" height="15" fill="rgb(222,56,46)" fg:x="6206" fg:w="137"/><text x="22.6535%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (5 samples, 0.02%)</title><rect x="22.8800%" y="197" width="0.0180%" height="15" fill="rgb(239,76,54)" fg:x="6338" fg:w="5"/><text x="23.1300%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (9 samples, 0.03%)</title><rect x="22.8981%" y="213" width="0.0325%" height="15" fill="rgb(231,124,27)" fg:x="6343" fg:w="9"/><text x="23.1481%" y="223.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (228 samples, 0.82%)</title><rect x="22.1111%" y="229" width="0.8231%" height="15" fill="rgb(249,195,6)" fg:x="6125" fg:w="228"/><text x="22.3611%" y="239.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (327 samples, 1.18%)</title><rect x="21.7934%" y="245" width="1.1805%" height="15" fill="rgb(237,174,47)" fg:x="6037" fg:w="327"/><text x="22.0434%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (11 samples, 0.04%)</title><rect x="22.9342%" y="229" width="0.0397%" height="15" fill="rgb(206,201,31)" fg:x="6353" fg:w="11"/><text x="23.1842%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (15 samples, 0.05%)</title><rect x="22.9739%" y="245" width="0.0541%" height="15" fill="rgb(231,57,52)" fg:x="6364" fg:w="15"/><text x="23.2239%" y="255.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (446 samples, 1.61%)</title><rect x="21.4252%" y="261" width="1.6101%" height="15" fill="rgb(248,177,22)" fg:x="5935" fg:w="446"/><text x="21.6752%" y="271.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (562 samples, 2.03%)</title><rect x="21.1364%" y="277" width="2.0288%" height="15" fill="rgb(215,211,37)" fg:x="5855" fg:w="562"/><text x="21.3864%" y="287.50">b..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (36 samples, 0.13%)</title><rect x="23.0353%" y="261" width="0.1300%" height="15" fill="rgb(241,128,51)" fg:x="6381" fg:w="36"/><text x="23.2853%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (33 samples, 0.12%)</title><rect x="23.1652%" y="277" width="0.1191%" height="15" fill="rgb(227,165,31)" fg:x="6417" fg:w="33"/><text x="23.4152%" y="287.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (678 samples, 2.45%)</title><rect x="20.8404%" y="293" width="2.4476%" height="15" fill="rgb(228,167,24)" fg:x="5773" fg:w="678"/><text x="21.0904%" y="303.50">be..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (34 samples, 0.12%)</title><rect x="23.2880%" y="293" width="0.1227%" height="15" fill="rgb(228,143,12)" fg:x="6451" fg:w="34"/><text x="23.5380%" y="303.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (902 samples, 3.26%)</title><rect x="20.1581%" y="309" width="3.2562%" height="15" fill="rgb(249,149,8)" fg:x="5584" fg:w="902"/><text x="20.4081%" y="319.50">ben..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (33 samples, 0.12%)</title><rect x="23.4143%" y="309" width="0.1191%" height="15" fill="rgb(243,35,44)" fg:x="6486" fg:w="33"/><text x="23.6643%" y="319.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::drift::sort (987 samples, 3.56%)</title><rect x="19.9740%" y="325" width="3.5630%" height="15" fill="rgb(246,89,9)" fg:x="5533" fg:w="987"/><text x="20.2240%" y="335.50">benc..</text></g><g><title>benchmark_queries`core::slice::sort::stable::driftsort_main (988 samples, 3.57%)</title><rect x="19.9740%" y="341" width="3.5667%" height="15" fill="rgb(233,213,13)" fg:x="5533" fg:w="988"/><text x="20.2240%" y="351.50">benc..</text></g><g><title>benchmark_queries`fbtree::bp::buffer_pool::BufferPool::handle_page_fault (18 samples, 0.06%)</title><rect x="23.7861%" y="309" width="0.0650%" height="15" fill="rgb(233,141,41)" fg:x="6589" fg:w="18"/><text x="24.0361%" y="319.50"></text></g><g><title>benchmark_queries`std::fs::OpenOptions::_open (13 samples, 0.05%)</title><rect x="23.8511%" y="293" width="0.0469%" height="15" fill="rgb(239,167,4)" fg:x="6607" fg:w="13"/><text x="24.1011%" y="303.50"></text></g><g><title>benchmark_queries`std::sys::pal::unix::fs::File::open_c (13 samples, 0.05%)</title><rect x="23.8511%" y="277" width="0.0469%" height="15" fill="rgb(209,217,16)" fg:x="6607" fg:w="13"/><text x="24.1011%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__open (13 samples, 0.05%)</title><rect x="23.8511%" y="261" width="0.0469%" height="15" fill="rgb(219,88,35)" fg:x="6607" fg:w="13"/><text x="24.1011%" y="271.50"></text></g><g><title>benchmark_queries`&lt;fbtree::bp::buffer_pool::BufferPool as fbtree::bp::mem_pool_trait::MemPool&gt;::create_new_page_for_write (96 samples, 0.35%)</title><rect x="23.5551%" y="325" width="0.3466%" height="15" fill="rgb(220,193,23)" fg:x="6525" fg:w="96"/><text x="23.8051%" y="335.50"></text></g><g><title>benchmark_queries`fbtree::file_manager::sync_write::FileManager::new (14 samples, 0.05%)</title><rect x="23.8511%" y="309" width="0.0505%" height="15" fill="rgb(230,90,52)" fg:x="6607" fg:w="14"/><text x="24.1011%" y="319.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (4 samples, 0.01%)</title><rect x="23.9017%" y="325" width="0.0144%" height="15" fill="rgb(252,106,19)" fg:x="6621" fg:w="4"/><text x="24.1517%" y="335.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::get (5 samples, 0.02%)</title><rect x="23.9594%" y="309" width="0.0180%" height="15" fill="rgb(206,74,20)" fg:x="6637" fg:w="5"/><text x="24.2094%" y="319.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::insert_slot (5 samples, 0.02%)</title><rect x="23.9775%" y="309" width="0.0180%" height="15" fill="rgb(230,138,44)" fg:x="6642" fg:w="5"/><text x="24.2275%" y="319.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::search_key (256 samples, 0.92%)</title><rect x="23.9955%" y="309" width="0.9242%" height="15" fill="rgb(235,182,43)" fg:x="6647" fg:w="256"/><text x="24.2455%" y="319.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::get (111 samples, 0.40%)</title><rect x="24.5190%" y="293" width="0.4007%" height="15" fill="rgb(242,16,51)" fg:x="6792" fg:w="111"/><text x="24.7690%" y="303.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcmp (19 samples, 0.07%)</title><rect x="24.9197%" y="309" width="0.0686%" height="15" fill="rgb(248,9,4)" fg:x="6903" fg:w="19"/><text x="25.1697%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (241 samples, 0.87%)</title><rect x="24.9919%" y="309" width="0.8700%" height="15" fill="rgb(210,31,22)" fg:x="6923" fg:w="241"/><text x="25.2419%" y="319.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::append (550 samples, 1.99%)</title><rect x="23.9161%" y="325" width="1.9855%" height="15" fill="rgb(239,54,39)" fg:x="6625" fg:w="550"/><text x="24.1661%" y="335.50">b..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.04%)</title><rect x="25.8619%" y="309" width="0.0397%" height="15" fill="rgb(230,99,41)" fg:x="7164" fg:w="11"/><text x="26.1119%" y="319.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::insert_slot (9 samples, 0.03%)</title><rect x="25.9016%" y="325" width="0.0325%" height="15" fill="rgb(253,106,12)" fg:x="7175" fg:w="9"/><text x="26.1516%" y="335.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (4 samples, 0.01%)</title><rect x="25.9485%" y="309" width="0.0144%" height="15" fill="rgb(213,46,41)" fg:x="7188" fg:w="4"/><text x="26.1985%" y="319.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (19 samples, 0.07%)</title><rect x="25.9413%" y="325" width="0.0686%" height="15" fill="rgb(215,133,35)" fg:x="7186" fg:w="19"/><text x="26.1913%" y="335.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (13 samples, 0.05%)</title><rect x="25.9630%" y="309" width="0.0469%" height="15" fill="rgb(213,28,5)" fg:x="7192" fg:w="13"/><text x="26.2130%" y="319.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (3 samples, 0.01%)</title><rect x="26.0099%" y="309" width="0.0108%" height="15" fill="rgb(215,77,49)" fg:x="7205" fg:w="3"/><text x="26.2599%" y="319.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_val (8 samples, 0.03%)</title><rect x="26.0099%" y="325" width="0.0289%" height="15" fill="rgb(248,100,22)" fg:x="7205" fg:w="8"/><text x="26.2599%" y="335.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (5 samples, 0.02%)</title><rect x="26.0207%" y="309" width="0.0180%" height="15" fill="rgb(208,67,9)" fg:x="7208" fg:w="5"/><text x="26.2707%" y="319.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (4 samples, 0.01%)</title><rect x="26.0388%" y="325" width="0.0144%" height="15" fill="rgb(219,133,21)" fg:x="7213" fg:w="4"/><text x="26.2888%" y="335.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcpy (3 samples, 0.01%)</title><rect x="26.0532%" y="325" width="0.0108%" height="15" fill="rgb(246,46,29)" fg:x="7217" fg:w="3"/><text x="26.3032%" y="335.50"></text></g><g><title>benchmark_queries`fbtree::access_method::sorted_run_store::SortedRunStore&lt;T&gt;::new (960 samples, 3.47%)</title><rect x="23.5407%" y="341" width="3.4656%" height="15" fill="rgb(246,185,52)" fg:x="6521" fg:w="960"/><text x="23.7907%" y="351.50">ben..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (260 samples, 0.94%)</title><rect x="26.0677%" y="325" width="0.9386%" height="15" fill="rgb(252,136,11)" fg:x="7221" fg:w="260"/><text x="26.3177%" y="335.50"></text></g><g><title>benchmark_queries`&lt;fbtree::txn_storage::ondisk::OnDiskStorage&lt;M&gt; as fbtree::txn_storage::txn_storage_trait::TxnStorageTrait&gt;::iter_next (4 samples, 0.01%)</title><rect x="27.0351%" y="325" width="0.0144%" height="15" fill="rgb(219,138,53)" fg:x="7489" fg:w="4"/><text x="27.2851%" y="335.50"></text></g><g><title>benchmark_queries`&lt;fbtree::access_method::append_only_store::AppendOnlyStoreScanner&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.03%)</title><rect x="27.0893%" y="309" width="0.0253%" height="15" fill="rgb(211,51,23)" fg:x="7504" fg:w="7"/><text x="27.3393%" y="319.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::append_only_store::append_only_page::AppendOnlyPage&gt;::get (4 samples, 0.01%)</title><rect x="27.1940%" y="277" width="0.0144%" height="15" fill="rgb(247,221,28)" fg:x="7533" fg:w="4"/><text x="27.4440%" y="287.50"></text></g><g><title>benchmark_queries`fbtree::file_manager::sync_write::FileManager::read_page (63 samples, 0.23%)</title><rect x="27.7896%" y="229" width="0.2274%" height="15" fill="rgb(251,222,45)" fg:x="7698" fg:w="63"/><text x="28.0396%" y="239.50"></text></g><g><title>benchmark_queries`std::io::default_read_exact (63 samples, 0.23%)</title><rect x="27.7896%" y="213" width="0.2274%" height="15" fill="rgb(217,162,53)" fg:x="7698" fg:w="63"/><text x="28.0396%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`read (63 samples, 0.23%)</title><rect x="27.7896%" y="197" width="0.2274%" height="15" fill="rgb(229,93,14)" fg:x="7698" fg:w="63"/><text x="28.0396%" y="207.50"></text></g><g><title>benchmark_queries`fbtree::access_method::append_only_store::AppendOnlyStore&lt;T&gt;::read_page (238 samples, 0.86%)</title><rect x="27.2084%" y="277" width="0.8592%" height="15" fill="rgb(209,67,49)" fg:x="7537" fg:w="238"/><text x="27.4584%" y="287.50"></text></g><g><title>benchmark_queries`&lt;fbtree::bp::buffer_pool::BufferPool as fbtree::bp::mem_pool_trait::MemPool&gt;::get_page_for_read (238 samples, 0.86%)</title><rect x="27.2084%" y="261" width="0.8592%" height="15" fill="rgb(213,87,29)" fg:x="7537" fg:w="238"/><text x="27.4584%" y="271.50"></text></g><g><title>benchmark_queries`fbtree::bp::buffer_pool::BufferPool::handle_page_fault (77 samples, 0.28%)</title><rect x="27.7896%" y="245" width="0.2780%" height="15" fill="rgb(205,151,52)" fg:x="7698" fg:w="77"/><text x="28.0396%" y="255.50"></text></g><g><title>benchmark_queries`fbtree::file_manager::sync_write::FileManager::write_page (14 samples, 0.05%)</title><rect x="28.0170%" y="229" width="0.0505%" height="15" fill="rgb(253,215,39)" fg:x="7761" fg:w="14"/><text x="28.2670%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`write (14 samples, 0.05%)</title><rect x="28.0170%" y="213" width="0.0505%" height="15" fill="rgb(221,220,41)" fg:x="7761" fg:w="14"/><text x="28.2670%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (10 samples, 0.04%)</title><rect x="28.0676%" y="277" width="0.0361%" height="15" fill="rgb(218,133,21)" fg:x="7775" fg:w="10"/><text x="28.3176%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (7 samples, 0.03%)</title><rect x="28.1217%" y="261" width="0.0253%" height="15" fill="rgb(221,193,43)" fg:x="7790" fg:w="7"/><text x="28.3717%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (12 samples, 0.04%)</title><rect x="28.1831%" y="245" width="0.0433%" height="15" fill="rgb(240,128,52)" fg:x="7807" fg:w="12"/><text x="28.4331%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (3 samples, 0.01%)</title><rect x="28.2842%" y="229" width="0.0108%" height="15" fill="rgb(253,114,12)" fg:x="7835" fg:w="3"/><text x="28.5342%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (66 samples, 0.24%)</title><rect x="28.1037%" y="277" width="0.2383%" height="15" fill="rgb(215,223,47)" fg:x="7785" fg:w="66"/><text x="28.3537%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (52 samples, 0.19%)</title><rect x="28.1542%" y="261" width="0.1877%" height="15" fill="rgb(248,225,23)" fg:x="7799" fg:w="52"/><text x="28.4042%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (32 samples, 0.12%)</title><rect x="28.2264%" y="245" width="0.1155%" height="15" fill="rgb(250,108,0)" fg:x="7819" fg:w="32"/><text x="28.4764%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (13 samples, 0.05%)</title><rect x="28.2950%" y="229" width="0.0469%" height="15" fill="rgb(228,208,7)" fg:x="7838" fg:w="13"/><text x="28.5450%" y="239.50"></text></g><g><title>benchmark_queries`&lt;fbtree::access_method::append_only_store::AppendOnlyStoreScanner&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (329 samples, 1.19%)</title><rect x="27.1651%" y="293" width="1.1877%" height="15" fill="rgb(244,45,10)" fg:x="7525" fg:w="329"/><text x="27.4151%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.01%)</title><rect x="28.3419%" y="277" width="0.0108%" height="15" fill="rgb(207,125,25)" fg:x="7851" fg:w="3"/><text x="28.5919%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (21 samples, 0.08%)</title><rect x="28.3744%" y="293" width="0.0758%" height="15" fill="rgb(210,195,18)" fg:x="7860" fg:w="21"/><text x="28.6244%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (21 samples, 0.08%)</title><rect x="28.4611%" y="293" width="0.0758%" height="15" fill="rgb(249,80,12)" fg:x="7884" fg:w="21"/><text x="28.7111%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (8 samples, 0.03%)</title><rect x="28.5369%" y="293" width="0.0289%" height="15" fill="rgb(221,65,9)" fg:x="7905" fg:w="8"/><text x="28.7869%" y="303.50"></text></g><g><title>benchmark_queries`&lt;fbtree::txn_storage::ondisk::OnDiskStorage&lt;M&gt; as fbtree::txn_storage::txn_storage_trait::TxnStorageTrait&gt;::iter_next (409 samples, 1.48%)</title><rect x="27.1145%" y="309" width="1.4765%" height="15" fill="rgb(235,49,36)" fg:x="7511" fg:w="409"/><text x="27.3645%" y="319.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (7 samples, 0.03%)</title><rect x="28.5658%" y="293" width="0.0253%" height="15" fill="rgb(225,32,20)" fg:x="7913" fg:w="7"/><text x="28.8158%" y="303.50"></text></g><g><title>benchmark_queries`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (6 samples, 0.02%)</title><rect x="28.5910%" y="309" width="0.0217%" height="15" fill="rgb(215,141,46)" fg:x="7920" fg:w="6"/><text x="28.8410%" y="319.50"></text></g><g><title>benchmark_queries`&lt;query_exec::tuple::_::&lt;impl serde::de::Deserialize for query_exec::tuple::Field&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (27 samples, 0.10%)</title><rect x="28.6307%" y="293" width="0.0975%" height="15" fill="rgb(250,160,47)" fg:x="7931" fg:w="27"/><text x="28.8807%" y="303.50"></text></g><g><title>benchmark_queries`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_option (31 samples, 0.11%)</title><rect x="29.1325%" y="277" width="0.1119%" height="15" fill="rgb(216,222,40)" fg:x="8070" fg:w="31"/><text x="29.3825%" y="287.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcmp (14 samples, 0.05%)</title><rect x="30.1072%" y="213" width="0.0505%" height="15" fill="rgb(234,217,39)" fg:x="8340" fg:w="14"/><text x="30.3572%" y="223.50"></text></g><g><title>benchmark_queries`chrono::format::parse::parse_internal (227 samples, 0.82%)</title><rect x="30.1578%" y="213" width="0.8195%" height="15" fill="rgb(207,178,40)" fg:x="8354" fg:w="227"/><text x="30.4078%" y="223.50"></text></g><g><title>benchmark_queries`chrono::format::parsed::Parsed::set_day (13 samples, 0.05%)</title><rect x="30.9772%" y="213" width="0.0469%" height="15" fill="rgb(221,136,13)" fg:x="8581" fg:w="13"/><text x="31.2272%" y="223.50"></text></g><g><title>benchmark_queries`chrono::format::parsed::Parsed::set_month (12 samples, 0.04%)</title><rect x="31.0242%" y="213" width="0.0433%" height="15" fill="rgb(249,199,10)" fg:x="8594" fg:w="12"/><text x="31.2742%" y="223.50"></text></g><g><title>benchmark_queries`chrono::format::parsed::Parsed::set_year (8 samples, 0.03%)</title><rect x="31.0675%" y="213" width="0.0289%" height="15" fill="rgb(249,222,13)" fg:x="8606" fg:w="8"/><text x="31.3175%" y="223.50"></text></g><g><title>benchmark_queries`chrono::format::parsed::Parsed::to_naive_date (40 samples, 0.14%)</title><rect x="31.0964%" y="213" width="0.1444%" height="15" fill="rgb(244,185,38)" fg:x="8614" fg:w="40"/><text x="31.3464%" y="223.50"></text></g><g><title>benchmark_queries`chrono::format::parsed::Parsed::to_naive_date::_{{closure}} (179 samples, 0.65%)</title><rect x="31.2407%" y="213" width="0.6462%" height="15" fill="rgb(236,202,9)" fg:x="8654" fg:w="179"/><text x="31.4907%" y="223.50"></text></g><g><title>benchmark_queries`core::str::_&lt;impl str&gt;::trim_start_matches (105 samples, 0.38%)</title><rect x="31.8869%" y="213" width="0.3790%" height="15" fill="rgb(250,229,37)" fg:x="8833" fg:w="105"/><text x="32.1369%" y="223.50"></text></g><g><title>benchmark_queries`&lt;chrono::naive::date::NaiveDate as core::str::traits::FromStr&gt;::from_str (682 samples, 2.46%)</title><rect x="29.9664%" y="229" width="2.4620%" height="15" fill="rgb(206,174,23)" fg:x="8301" fg:w="682"/><text x="30.2164%" y="239.50">be..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (45 samples, 0.16%)</title><rect x="32.2660%" y="213" width="0.1624%" height="15" fill="rgb(211,33,43)" fg:x="8938" fg:w="45"/><text x="32.5160%" y="223.50"></text></g><g><title>benchmark_queries`chrono::format::parse::parse_internal (9 samples, 0.03%)</title><rect x="32.4284%" y="229" width="0.0325%" height="15" fill="rgb(245,58,50)" fg:x="8983" fg:w="9"/><text x="32.6784%" y="239.50"></text></g><g><title>benchmark_queries`chrono::format::parsed::Parsed::to_naive_date (11 samples, 0.04%)</title><rect x="32.4609%" y="229" width="0.0397%" height="15" fill="rgb(244,68,36)" fg:x="8992" fg:w="11"/><text x="32.7109%" y="239.50"></text></g><g><title>benchmark_queries`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_str (804 samples, 2.90%)</title><rect x="29.8870%" y="245" width="2.9024%" height="15" fill="rgb(232,229,15)" fg:x="8279" fg:w="804"/><text x="30.1370%" y="255.50">be..</text></g><g><title>benchmark_queries`core::str::converts::from_utf8 (80 samples, 0.29%)</title><rect x="32.5006%" y="229" width="0.2888%" height="15" fill="rgb(254,30,23)" fg:x="9003" fg:w="80"/><text x="32.7506%" y="239.50"></text></g><g><title>benchmark_queries`core::str::converts::from_utf8 (67 samples, 0.24%)</title><rect x="32.9663%" y="229" width="0.2419%" height="15" fill="rgb(235,160,14)" fg:x="9132" fg:w="67"/><text x="33.2163%" y="239.50"></text></g><g><title>benchmark_queries`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_string (265 samples, 0.96%)</title><rect x="32.7894%" y="245" width="0.9566%" height="15" fill="rgb(212,155,44)" fg:x="9083" fg:w="265"/><text x="33.0394%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (149 samples, 0.54%)</title><rect x="33.2082%" y="229" width="0.5379%" height="15" fill="rgb(226,2,50)" fg:x="9199" fg:w="149"/><text x="33.4582%" y="239.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$malloc (8 samples, 0.03%)</title><rect x="33.7461%" y="245" width="0.0289%" height="15" fill="rgb(234,177,6)" fg:x="9348" fg:w="8"/><text x="33.9961%" y="255.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcpy (4 samples, 0.01%)</title><rect x="33.7750%" y="245" width="0.0144%" height="15" fill="rgb(217,24,9)" fg:x="9356" fg:w="4"/><text x="34.0250%" y="255.50"></text></g><g><title>benchmark_queries`__rdl_alloc (5 samples, 0.02%)</title><rect x="33.7894%" y="245" width="0.0180%" height="15" fill="rgb(220,13,46)" fg:x="9360" fg:w="5"/><text x="34.0394%" y="255.50"></text></g><g><title>benchmark_queries`bincode::config::int::cast_u64_to_usize (8 samples, 0.03%)</title><rect x="33.8074%" y="245" width="0.0289%" height="15" fill="rgb(239,221,27)" fg:x="9365" fg:w="8"/><text x="34.0574%" y="255.50"></text></g><g><title>benchmark_queries`core::str::converts::from_utf8 (15 samples, 0.05%)</title><rect x="33.8363%" y="245" width="0.0541%" height="15" fill="rgb(222,198,25)" fg:x="9373" fg:w="15"/><text x="34.0863%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (35 samples, 0.13%)</title><rect x="33.8905%" y="245" width="0.1263%" height="15" fill="rgb(211,99,13)" fg:x="9388" fg:w="35"/><text x="34.1405%" y="255.50"></text></g><g><title>benchmark_queries`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_option (1,283 samples, 4.63%)</title><rect x="29.6885%" y="261" width="4.6316%" height="15" fill="rgb(232,111,31)" fg:x="8224" fg:w="1283"/><text x="29.9385%" y="271.50">bench..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (82 samples, 0.30%)</title><rect x="34.0240%" y="245" width="0.2960%" height="15" fill="rgb(245,82,37)" fg:x="9425" fg:w="82"/><text x="34.2740%" y="255.50"></text></g><g><title>benchmark_queries`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_str (10 samples, 0.04%)</title><rect x="34.3201%" y="261" width="0.0361%" height="15" fill="rgb(227,149,46)" fg:x="9507" fg:w="10"/><text x="34.5701%" y="271.50"></text></g><g><title>benchmark_queries`&lt;query_exec::tuple::_::&lt;impl serde::de::Deserialize for query_exec::tuple::Field&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (1,430 samples, 5.16%)</title><rect x="29.2444%" y="277" width="5.1623%" height="15" fill="rgb(218,36,50)" fg:x="8101" fg:w="1430"/><text x="29.4944%" y="287.50">benchm..</text></g><g><title>benchmark_queries`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_string (14 samples, 0.05%)</title><rect x="34.3562%" y="261" width="0.0505%" height="15" fill="rgb(226,80,48)" fg:x="9517" fg:w="14"/><text x="34.6062%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (7 samples, 0.03%)</title><rect x="34.4248%" y="261" width="0.0253%" height="15" fill="rgb(238,224,15)" fg:x="9536" fg:w="7"/><text x="34.6748%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (11 samples, 0.04%)</title><rect x="34.5006%" y="245" width="0.0397%" height="15" fill="rgb(241,136,10)" fg:x="9557" fg:w="11"/><text x="34.7506%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (45 samples, 0.16%)</title><rect x="34.4103%" y="277" width="0.1624%" height="15" fill="rgb(208,32,45)" fg:x="9532" fg:w="45"/><text x="34.6603%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (32 samples, 0.12%)</title><rect x="34.4572%" y="261" width="0.1155%" height="15" fill="rgb(207,135,9)" fg:x="9545" fg:w="32"/><text x="34.7072%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (9 samples, 0.03%)</title><rect x="34.5403%" y="245" width="0.0325%" height="15" fill="rgb(206,86,44)" fg:x="9568" fg:w="9"/><text x="34.7903%" y="255.50"></text></g><g><title>benchmark_queries`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1,621 samples, 5.85%)</title><rect x="28.7282%" y="293" width="5.8518%" height="15" fill="rgb(245,177,15)" fg:x="7958" fg:w="1621"/><text x="28.9782%" y="303.50">benchma..</text></g><g><title>benchmark_queries`query_exec::tuple::Tuple::from_bytes (1,654 samples, 5.97%)</title><rect x="28.6271%" y="309" width="5.9709%" height="15" fill="rgb(206,64,50)" fg:x="7930" fg:w="1654"/><text x="28.8771%" y="319.50">benchmar..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (16 samples, 0.06%)</title><rect x="34.5980%" y="309" width="0.0578%" height="15" fill="rgb(234,36,40)" fg:x="9584" fg:w="16"/><text x="34.8480%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (11 samples, 0.04%)</title><rect x="34.9157%" y="277" width="0.0397%" height="15" fill="rgb(213,64,8)" fg:x="9672" fg:w="11"/><text x="35.1657%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (91 samples, 0.33%)</title><rect x="34.6558%" y="309" width="0.3285%" height="15" fill="rgb(210,75,36)" fg:x="9600" fg:w="91"/><text x="34.9058%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (65 samples, 0.23%)</title><rect x="34.7496%" y="293" width="0.2346%" height="15" fill="rgb(229,88,21)" fg:x="9626" fg:w="65"/><text x="34.9996%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (8 samples, 0.03%)</title><rect x="34.9554%" y="277" width="0.0289%" height="15" fill="rgb(252,204,47)" fg:x="9683" fg:w="8"/><text x="35.2054%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.01%)</title><rect x="34.9843%" y="309" width="0.0108%" height="15" fill="rgb(208,77,27)" fg:x="9691" fg:w="3"/><text x="35.2343%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.03%)</title><rect x="34.9951%" y="309" width="0.0253%" height="15" fill="rgb(221,76,26)" fg:x="9694" fg:w="7"/><text x="35.2451%" y="319.50"></text></g><g><title>benchmark_queries`&lt;query_exec::executor::ondisk_pipeline::disk_buffer::OnDiskBufferIter&lt;T,M&gt; as query_exec::executor::TupleBufferIter&gt;::next (2,211 samples, 7.98%)</title><rect x="27.0496%" y="325" width="7.9817%" height="15" fill="rgb(225,139,18)" fg:x="7493" fg:w="2211"/><text x="27.2996%" y="335.50">benchmark_q..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (3 samples, 0.01%)</title><rect x="35.0204%" y="309" width="0.0108%" height="15" fill="rgb(230,137,11)" fg:x="9701" fg:w="3"/><text x="35.2704%" y="319.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$free (8 samples, 0.03%)</title><rect x="35.0312%" y="325" width="0.0289%" height="15" fill="rgb(212,28,1)" fg:x="9704" fg:w="8"/><text x="35.2812%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.01%)</title><rect x="35.5077%" y="309" width="0.0108%" height="15" fill="rgb(248,164,17)" fg:x="9836" fg:w="3"/><text x="35.7577%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (9 samples, 0.03%)</title><rect x="35.6738%" y="277" width="0.0325%" height="15" fill="rgb(222,171,42)" fg:x="9882" fg:w="9"/><text x="35.9238%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (52 samples, 0.19%)</title><rect x="35.5258%" y="309" width="0.1877%" height="15" fill="rgb(243,84,45)" fg:x="9841" fg:w="52"/><text x="35.7758%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (30 samples, 0.11%)</title><rect x="35.6052%" y="293" width="0.1083%" height="15" fill="rgb(252,49,23)" fg:x="9863" fg:w="30"/><text x="35.8552%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (11 samples, 0.04%)</title><rect x="35.7424%" y="293" width="0.0397%" height="15" fill="rgb(215,19,7)" fg:x="9901" fg:w="11"/><text x="35.9924%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.03%)</title><rect x="35.7821%" y="293" width="0.0253%" height="15" fill="rgb(238,81,41)" fg:x="9912" fg:w="7"/><text x="36.0321%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (7 samples, 0.03%)</title><rect x="35.8399%" y="277" width="0.0253%" height="15" fill="rgb(210,199,37)" fg:x="9928" fg:w="7"/><text x="36.0899%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (57 samples, 0.21%)</title><rect x="35.7171%" y="309" width="0.2058%" height="15" fill="rgb(244,192,49)" fg:x="9894" fg:w="57"/><text x="35.9671%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (32 samples, 0.12%)</title><rect x="35.8074%" y="293" width="0.1155%" height="15" fill="rgb(226,211,11)" fg:x="9919" fg:w="32"/><text x="36.0574%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (16 samples, 0.06%)</title><rect x="35.8651%" y="277" width="0.0578%" height="15" fill="rgb(236,162,54)" fg:x="9935" fg:w="16"/><text x="36.1151%" y="287.50"></text></g><g><title>benchmark_queries`query_exec::tuple::Tuple::project (244 samples, 0.88%)</title><rect x="35.0673%" y="325" width="0.8808%" height="15" fill="rgb(220,229,9)" fg:x="9714" fg:w="244"/><text x="35.3173%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.01%)</title><rect x="35.9337%" y="309" width="0.0144%" height="15" fill="rgb(250,87,22)" fg:x="9954" fg:w="4"/><text x="36.1837%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_free (19 samples, 0.07%)</title><rect x="35.9482%" y="325" width="0.0686%" height="15" fill="rgb(239,43,17)" fg:x="9958" fg:w="19"/><text x="36.1982%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.02%)</title><rect x="36.0168%" y="325" width="0.0217%" height="15" fill="rgb(231,177,25)" fg:x="9977" fg:w="6"/><text x="36.2668%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.03%)</title><rect x="36.0384%" y="325" width="0.0289%" height="15" fill="rgb(219,179,1)" fg:x="9983" fg:w="8"/><text x="36.2884%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (7 samples, 0.03%)</title><rect x="36.0673%" y="325" width="0.0253%" height="15" fill="rgb(238,219,53)" fg:x="9991" fg:w="7"/><text x="36.3173%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (5 samples, 0.02%)</title><rect x="36.0998%" y="325" width="0.0180%" height="15" fill="rgb(232,167,36)" fg:x="10000" fg:w="5"/><text x="36.3498%" y="335.50"></text></g><g><title>benchmark_queries`query_exec::executor::ondisk_pipeline::NonBlockingOp&lt;T,M&gt;::next (2,529 samples, 9.13%)</title><rect x="27.0062%" y="341" width="9.1296%" height="15" fill="rgb(244,19,51)" fg:x="7481" fg:w="2529"/><text x="27.2562%" y="351.50">benchmark_que..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (4 samples, 0.01%)</title><rect x="36.1214%" y="325" width="0.0144%" height="15" fill="rgb(224,6,22)" fg:x="10006" fg:w="4"/><text x="36.3714%" y="335.50"></text></g><g><title>benchmark_queries`&lt;fbtree::bp::buffer_pool::BufferPool as fbtree::bp::mem_pool_trait::MemPool&gt;::create_new_page_for_write (11 samples, 0.04%)</title><rect x="36.1720%" y="325" width="0.0397%" height="15" fill="rgb(224,145,5)" fg:x="10020" fg:w="11"/><text x="36.4220%" y="335.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (5 samples, 0.02%)</title><rect x="36.2117%" y="325" width="0.0180%" height="15" fill="rgb(234,130,49)" fg:x="10031" fg:w="5"/><text x="36.4617%" y="335.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::DerefMut&gt;::deref_mut (6 samples, 0.02%)</title><rect x="36.2297%" y="325" width="0.0217%" height="15" fill="rgb(254,6,2)" fg:x="10036" fg:w="6"/><text x="36.4797%" y="335.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (6 samples, 0.02%)</title><rect x="36.3055%" y="309" width="0.0217%" height="15" fill="rgb(208,96,46)" fg:x="10057" fg:w="6"/><text x="36.5555%" y="319.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::DerefMut&gt;::deref_mut (6 samples, 0.02%)</title><rect x="36.3272%" y="309" width="0.0217%" height="15" fill="rgb(239,3,39)" fg:x="10063" fg:w="6"/><text x="36.5772%" y="319.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::append (46 samples, 0.17%)</title><rect x="36.2514%" y="325" width="0.1661%" height="15" fill="rgb(233,210,1)" fg:x="10042" fg:w="46"/><text x="36.5014%" y="335.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::append_slot (19 samples, 0.07%)</title><rect x="36.3489%" y="309" width="0.0686%" height="15" fill="rgb(244,137,37)" fg:x="10069" fg:w="19"/><text x="36.5989%" y="319.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::append_slot (7 samples, 0.03%)</title><rect x="36.4175%" y="325" width="0.0253%" height="15" fill="rgb(240,136,2)" fg:x="10088" fg:w="7"/><text x="36.6675%" y="335.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot_count (4 samples, 0.01%)</title><rect x="36.4427%" y="325" width="0.0144%" height="15" fill="rgb(239,18,37)" fg:x="10095" fg:w="4"/><text x="36.6927%" y="335.50"></text></g><g><title>benchmark_queries`bincode::internal::serialize (3 samples, 0.01%)</title><rect x="36.4608%" y="325" width="0.0108%" height="15" fill="rgb(218,185,22)" fg:x="10100" fg:w="3"/><text x="36.7108%" y="335.50"></text></g><g><title>benchmark_queries`&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (21 samples, 0.08%)</title><rect x="36.4788%" y="309" width="0.0758%" height="15" fill="rgb(225,218,4)" fg:x="10105" fg:w="21"/><text x="36.7288%" y="319.50"></text></g><g><title>benchmark_queries`&lt;chrono::naive::date::NaiveDate as core::fmt::Debug&gt;::fmt (6 samples, 0.02%)</title><rect x="37.0528%" y="277" width="0.0217%" height="15" fill="rgb(230,182,32)" fg:x="10264" fg:w="6"/><text x="37.3028%" y="287.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$free (8 samples, 0.03%)</title><rect x="37.0745%" y="277" width="0.0289%" height="15" fill="rgb(242,56,43)" fg:x="10270" fg:w="8"/><text x="37.3245%" y="287.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcpy (3 samples, 0.01%)</title><rect x="37.1034%" y="277" width="0.0108%" height="15" fill="rgb(233,99,24)" fg:x="10278" fg:w="3"/><text x="37.3534%" y="287.50"></text></g><g><title>benchmark_queries`&lt;alloc::string::String as core::fmt::Write&gt;::write_char (78 samples, 0.28%)</title><rect x="37.2117%" y="261" width="0.2816%" height="15" fill="rgb(234,209,42)" fg:x="10308" fg:w="78"/><text x="37.4617%" y="271.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$malloc (5 samples, 0.02%)</title><rect x="37.9048%" y="213" width="0.0180%" height="15" fill="rgb(227,7,12)" fg:x="10500" fg:w="5"/><text x="38.1548%" y="223.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$realloc (3 samples, 0.01%)</title><rect x="37.9228%" y="213" width="0.0108%" height="15" fill="rgb(245,203,43)" fg:x="10505" fg:w="3"/><text x="38.1728%" y="223.50"></text></g><g><title>benchmark_queries`__rdl_alloc (3 samples, 0.01%)</title><rect x="37.9336%" y="213" width="0.0108%" height="15" fill="rgb(238,205,33)" fg:x="10508" fg:w="3"/><text x="38.1836%" y="223.50"></text></g><g><title>benchmark_queries`__rdl_realloc (5 samples, 0.02%)</title><rect x="37.9445%" y="213" width="0.0180%" height="15" fill="rgb(231,56,7)" fg:x="10511" fg:w="5"/><text x="38.1945%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (25 samples, 0.09%)</title><rect x="38.2658%" y="165" width="0.0902%" height="15" fill="rgb(244,186,29)" fg:x="10600" fg:w="25"/><text x="38.5158%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (72 samples, 0.26%)</title><rect x="38.1250%" y="181" width="0.2599%" height="15" fill="rgb(234,111,31)" fg:x="10561" fg:w="72"/><text x="38.3750%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (8 samples, 0.03%)</title><rect x="38.3560%" y="165" width="0.0289%" height="15" fill="rgb(241,149,10)" fg:x="10625" fg:w="8"/><text x="38.6060%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (108 samples, 0.39%)</title><rect x="38.0239%" y="197" width="0.3899%" height="15" fill="rgb(249,206,44)" fg:x="10533" fg:w="108"/><text x="38.2739%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (7 samples, 0.03%)</title><rect x="38.3885%" y="181" width="0.0253%" height="15" fill="rgb(251,153,30)" fg:x="10634" fg:w="7"/><text x="38.6385%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (46 samples, 0.17%)</title><rect x="38.4138%" y="197" width="0.1661%" height="15" fill="rgb(239,152,38)" fg:x="10641" fg:w="46"/><text x="38.6638%" y="207.50"></text></g><g><title>benchmark_queries`alloc::raw_vec::finish_grow (195 samples, 0.70%)</title><rect x="37.9625%" y="213" width="0.7039%" height="15" fill="rgb(249,139,47)" fg:x="10516" fg:w="195"/><text x="38.2125%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (24 samples, 0.09%)</title><rect x="38.5798%" y="197" width="0.0866%" height="15" fill="rgb(244,64,35)" fg:x="10687" fg:w="24"/><text x="38.8298%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (22 samples, 0.08%)</title><rect x="38.6665%" y="213" width="0.0794%" height="15" fill="rgb(216,46,15)" fg:x="10711" fg:w="22"/><text x="38.9165%" y="223.50"></text></g><g><title>benchmark_queries`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (264 samples, 0.95%)</title><rect x="37.8109%" y="229" width="0.9530%" height="15" fill="rgb(250,74,19)" fg:x="10474" fg:w="264"/><text x="38.0609%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (5 samples, 0.02%)</title><rect x="38.7459%" y="213" width="0.0180%" height="15" fill="rgb(249,42,33)" fg:x="10733" fg:w="5"/><text x="38.9959%" y="223.50"></text></g><g><title>benchmark_queries`&lt;alloc::string::String as core::fmt::Write&gt;::write_char (305 samples, 1.10%)</title><rect x="37.6665%" y="245" width="1.1010%" height="15" fill="rgb(242,149,17)" fg:x="10434" fg:w="305"/><text x="37.9165%" y="255.50"></text></g><g><title>benchmark_queries`&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (42 samples, 0.15%)</title><rect x="38.7676%" y="245" width="0.1516%" height="15" fill="rgb(244,29,21)" fg:x="10739" fg:w="42"/><text x="39.0176%" y="255.50"></text></g><g><title>benchmark_queries`&lt;chrono::naive::date::NaiveDate as core::fmt::Debug&gt;::fmt (401 samples, 1.45%)</title><rect x="37.4932%" y="261" width="1.4476%" height="15" fill="rgb(220,130,37)" fg:x="10386" fg:w="401"/><text x="37.7432%" y="271.50"></text></g><g><title>benchmark_queries`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (6 samples, 0.02%)</title><rect x="38.9192%" y="245" width="0.0217%" height="15" fill="rgb(211,67,2)" fg:x="10781" fg:w="6"/><text x="39.1692%" y="255.50"></text></g><g><title>benchmark_queries`&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (4 samples, 0.01%)</title><rect x="38.9408%" y="261" width="0.0144%" height="15" fill="rgb(235,68,52)" fg:x="10787" fg:w="4"/><text x="39.1908%" y="271.50"></text></g><g><title>benchmark_queries`serde::ser::Serializer::collect_str (546 samples, 1.97%)</title><rect x="37.1142%" y="277" width="1.9710%" height="15" fill="rgb(246,142,3)" fg:x="10281" fg:w="546"/><text x="37.3642%" y="287.50">b..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (36 samples, 0.13%)</title><rect x="38.9553%" y="261" width="0.1300%" height="15" fill="rgb(241,25,7)" fg:x="10791" fg:w="36"/><text x="39.2053%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_free (22 samples, 0.08%)</title><rect x="39.0852%" y="277" width="0.0794%" height="15" fill="rgb(242,119,39)" fg:x="10827" fg:w="22"/><text x="39.3352%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.02%)</title><rect x="39.1647%" y="277" width="0.0180%" height="15" fill="rgb(241,98,45)" fg:x="10849" fg:w="5"/><text x="39.4147%" y="287.50"></text></g><g><title>benchmark_queries`&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (695 samples, 2.51%)</title><rect x="36.7315%" y="293" width="2.5089%" height="15" fill="rgb(254,28,30)" fg:x="10175" fg:w="695"/><text x="36.9815%" y="303.50">be..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.06%)</title><rect x="39.1827%" y="277" width="0.0578%" height="15" fill="rgb(241,142,54)" fg:x="10854" fg:w="16"/><text x="39.4327%" y="287.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcpy (11 samples, 0.04%)</title><rect x="39.2405%" y="293" width="0.0397%" height="15" fill="rgb(222,85,15)" fg:x="10870" fg:w="11"/><text x="39.4905%" y="303.50"></text></g><g><title>benchmark_queries`core::ptr::drop_in_place&lt;bincode::error::ErrorKind&gt; (5 samples, 0.02%)</title><rect x="39.2802%" y="293" width="0.0180%" height="15" fill="rgb(210,85,47)" fg:x="10881" fg:w="5"/><text x="39.5302%" y="303.50"></text></g><g><title>benchmark_queries`&lt;chrono::naive::date::NaiveDate as core::fmt::Debug&gt;::fmt (7 samples, 0.03%)</title><rect x="39.5726%" y="277" width="0.0253%" height="15" fill="rgb(224,206,25)" fg:x="10962" fg:w="7"/><text x="39.8226%" y="287.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$free (5 samples, 0.02%)</title><rect x="39.5978%" y="277" width="0.0180%" height="15" fill="rgb(243,201,19)" fg:x="10969" fg:w="5"/><text x="39.8478%" y="287.50"></text></g><g><title>benchmark_queries`&lt;alloc::string::String as core::fmt::Write&gt;::write_char (78 samples, 0.28%)</title><rect x="39.6881%" y="261" width="0.2816%" height="15" fill="rgb(236,59,4)" fg:x="10994" fg:w="78"/><text x="39.9381%" y="271.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$malloc (5 samples, 0.02%)</title><rect x="40.3198%" y="213" width="0.0180%" height="15" fill="rgb(254,179,45)" fg:x="11169" fg:w="5"/><text x="40.5698%" y="223.50"></text></g><g><title>benchmark_queries`__rdl_alloc (6 samples, 0.02%)</title><rect x="40.3451%" y="213" width="0.0217%" height="15" fill="rgb(226,14,10)" fg:x="11176" fg:w="6"/><text x="40.5951%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (11 samples, 0.04%)</title><rect x="40.4209%" y="197" width="0.0397%" height="15" fill="rgb(244,27,41)" fg:x="11197" fg:w="11"/><text x="40.6709%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (24 samples, 0.09%)</title><rect x="40.6628%" y="165" width="0.0866%" height="15" fill="rgb(235,35,32)" fg:x="11264" fg:w="24"/><text x="40.9128%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (66 samples, 0.24%)</title><rect x="40.5328%" y="181" width="0.2383%" height="15" fill="rgb(218,68,31)" fg:x="11228" fg:w="66"/><text x="40.7828%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (6 samples, 0.02%)</title><rect x="40.7494%" y="165" width="0.0217%" height="15" fill="rgb(207,120,37)" fg:x="11288" fg:w="6"/><text x="40.9994%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (6 samples, 0.02%)</title><rect x="40.7711%" y="181" width="0.0217%" height="15" fill="rgb(227,98,0)" fg:x="11294" fg:w="6"/><text x="41.0211%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (95 samples, 0.34%)</title><rect x="40.4606%" y="197" width="0.3429%" height="15" fill="rgb(207,7,3)" fg:x="11208" fg:w="95"/><text x="40.7106%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.01%)</title><rect x="40.7928%" y="181" width="0.0108%" height="15" fill="rgb(206,98,19)" fg:x="11300" fg:w="3"/><text x="41.0428%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (49 samples, 0.18%)</title><rect x="40.8036%" y="197" width="0.1769%" height="15" fill="rgb(217,5,26)" fg:x="11303" fg:w="49"/><text x="41.0536%" y="207.50"></text></g><g><title>benchmark_queries`alloc::raw_vec::finish_grow (196 samples, 0.71%)</title><rect x="40.3668%" y="213" width="0.7076%" height="15" fill="rgb(235,190,38)" fg:x="11182" fg:w="196"/><text x="40.6168%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (26 samples, 0.09%)</title><rect x="40.9805%" y="197" width="0.0939%" height="15" fill="rgb(247,86,24)" fg:x="11352" fg:w="26"/><text x="41.2305%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.07%)</title><rect x="41.0743%" y="213" width="0.0686%" height="15" fill="rgb(205,101,16)" fg:x="11378" fg:w="19"/><text x="41.3243%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (7 samples, 0.03%)</title><rect x="41.1429%" y="213" width="0.0253%" height="15" fill="rgb(246,168,33)" fg:x="11397" fg:w="7"/><text x="41.3929%" y="223.50"></text></g><g><title>benchmark_queries`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (266 samples, 0.96%)</title><rect x="40.2188%" y="229" width="0.9603%" height="15" fill="rgb(231,114,1)" fg:x="11141" fg:w="266"/><text x="40.4688%" y="239.50"></text></g><g><title>benchmark_queries`&lt;alloc::string::String as core::fmt::Write&gt;::write_char (296 samples, 1.07%)</title><rect x="40.1141%" y="245" width="1.0686%" height="15" fill="rgb(207,184,53)" fg:x="11112" fg:w="296"/><text x="40.3641%" y="255.50"></text></g><g><title>benchmark_queries`&lt;chrono::naive::date::NaiveDate as core::fmt::Debug&gt;::fmt (363 samples, 1.31%)</title><rect x="39.9697%" y="261" width="1.3104%" height="15" fill="rgb(224,95,51)" fg:x="11072" fg:w="363"/><text x="40.2197%" y="271.50"></text></g><g><title>benchmark_queries`&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (27 samples, 0.10%)</title><rect x="41.1826%" y="245" width="0.0975%" height="15" fill="rgb(212,188,45)" fg:x="11408" fg:w="27"/><text x="41.4326%" y="255.50"></text></g><g><title>benchmark_queries`&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (3 samples, 0.01%)</title><rect x="41.2801%" y="261" width="0.0108%" height="15" fill="rgb(223,154,38)" fg:x="11435" fg:w="3"/><text x="41.5301%" y="271.50"></text></g><g><title>benchmark_queries`serde::ser::Serializer::collect_str (505 samples, 1.82%)</title><rect x="39.6159%" y="277" width="1.8230%" height="15" fill="rgb(251,22,52)" fg:x="10974" fg:w="505"/><text x="39.8659%" y="287.50">b..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (41 samples, 0.15%)</title><rect x="41.2909%" y="261" width="0.1480%" height="15" fill="rgb(229,209,22)" fg:x="11438" fg:w="41"/><text x="41.5409%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_free (25 samples, 0.09%)</title><rect x="41.4389%" y="277" width="0.0902%" height="15" fill="rgb(234,138,34)" fg:x="11479" fg:w="25"/><text x="41.6889%" y="287.50"></text></g><g><title>benchmark_queries`query_exec::tuple::_::_&lt;impl serde::ser::Serialize for query_exec::tuple::Field&gt;::serialize (624 samples, 2.25%)</title><rect x="39.2982%" y="293" width="2.2526%" height="15" fill="rgb(212,95,11)" fg:x="10886" fg:w="624"/><text x="39.5482%" y="303.50">b..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.02%)</title><rect x="41.5292%" y="277" width="0.0217%" height="15" fill="rgb(240,179,47)" fg:x="11504" fg:w="6"/><text x="41.7792%" y="287.50"></text></g><g><title>benchmark_queries`serde::ser::Serializer::collect_str (8 samples, 0.03%)</title><rect x="41.5508%" y="293" width="0.0289%" height="15" fill="rgb(240,163,11)" fg:x="11510" fg:w="8"/><text x="41.8008%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (8 samples, 0.03%)</title><rect x="41.5942%" y="277" width="0.0289%" height="15" fill="rgb(236,37,12)" fg:x="11522" fg:w="8"/><text x="41.8442%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.01%)</title><rect x="41.6230%" y="277" width="0.0144%" height="15" fill="rgb(232,164,16)" fg:x="11530" fg:w="4"/><text x="41.8730%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (8 samples, 0.03%)</title><rect x="41.6736%" y="261" width="0.0289%" height="15" fill="rgb(244,205,15)" fg:x="11544" fg:w="8"/><text x="41.9236%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (69 samples, 0.25%)</title><rect x="41.5833%" y="293" width="0.2491%" height="15" fill="rgb(223,117,47)" fg:x="11519" fg:w="69"/><text x="41.8333%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (54 samples, 0.19%)</title><rect x="41.6375%" y="277" width="0.1949%" height="15" fill="rgb(244,107,35)" fg:x="11534" fg:w="54"/><text x="41.8875%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (36 samples, 0.13%)</title><rect x="41.7025%" y="261" width="0.1300%" height="15" fill="rgb(205,140,8)" fg:x="11552" fg:w="36"/><text x="41.9525%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (14 samples, 0.05%)</title><rect x="41.7819%" y="245" width="0.0505%" height="15" fill="rgb(228,84,46)" fg:x="11574" fg:w="14"/><text x="42.0319%" y="255.50"></text></g><g><title>benchmark_queries`bincode::internal::serialize (1,527 samples, 5.51%)</title><rect x="36.5619%" y="309" width="5.5124%" height="15" fill="rgb(254,188,9)" fg:x="10128" fg:w="1527"/><text x="36.8119%" y="319.50">benchma..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (67 samples, 0.24%)</title><rect x="41.8324%" y="293" width="0.2419%" height="15" fill="rgb(206,112,54)" fg:x="11588" fg:w="67"/><text x="42.0824%" y="303.50"></text></g><g><title>benchmark_queries`core::ptr::drop_in_place&lt;bincode::error::ErrorKind&gt; (5 samples, 0.02%)</title><rect x="42.0743%" y="309" width="0.0180%" height="15" fill="rgb(216,84,49)" fg:x="11655" fg:w="5"/><text x="42.3243%" y="319.50"></text></g><g><title>benchmark_queries`query_exec::tuple::_::_&lt;impl serde::ser::Serialize for query_exec::tuple::Field&gt;::serialize (94 samples, 0.34%)</title><rect x="42.0923%" y="309" width="0.3393%" height="15" fill="rgb(214,194,35)" fg:x="11660" fg:w="94"/><text x="42.3423%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.03%)</title><rect x="42.4317%" y="309" width="0.0289%" height="15" fill="rgb(249,28,3)" fg:x="11754" fg:w="8"/><text x="42.6817%" y="319.50"></text></g><g><title>benchmark_queries`query_exec::tuple::Tuple::to_bytes (1,661 samples, 6.00%)</title><rect x="36.4716%" y="325" width="5.9962%" height="15" fill="rgb(222,56,52)" fg:x="10103" fg:w="1661"/><text x="36.7216%" y="335.50">benchmar..</text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.03%)</title><rect x="42.6591%" y="245" width="0.0289%" height="15" fill="rgb(245,217,50)" fg:x="11817" fg:w="8"/><text x="42.9091%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (17 samples, 0.06%)</title><rect x="42.6411%" y="261" width="0.0614%" height="15" fill="rgb(213,201,24)" fg:x="11812" fg:w="17"/><text x="42.8911%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (4 samples, 0.01%)</title><rect x="42.6880%" y="245" width="0.0144%" height="15" fill="rgb(248,116,28)" fg:x="11825" fg:w="4"/><text x="42.9380%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (24 samples, 0.09%)</title><rect x="42.6194%" y="277" width="0.0866%" height="15" fill="rgb(219,72,43)" fg:x="11806" fg:w="24"/><text x="42.8694%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (18 samples, 0.06%)</title><rect x="42.7060%" y="277" width="0.0650%" height="15" fill="rgb(209,138,14)" fg:x="11830" fg:w="18"/><text x="42.9560%" y="287.50"></text></g><g><title>benchmark_queries`alloc::raw_vec::finish_grow (59 samples, 0.21%)</title><rect x="42.6050%" y="293" width="0.2130%" height="15" fill="rgb(222,18,33)" fg:x="11802" fg:w="59"/><text x="42.8550%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (13 samples, 0.05%)</title><rect x="42.7710%" y="277" width="0.0469%" height="15" fill="rgb(213,199,7)" fg:x="11848" fg:w="13"/><text x="43.0210%" y="287.50"></text></g><g><title>benchmark_queries`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (72 samples, 0.26%)</title><rect x="42.5725%" y="309" width="0.2599%" height="15" fill="rgb(250,110,10)" fg:x="11793" fg:w="72"/><text x="42.8225%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.01%)</title><rect x="42.8179%" y="293" width="0.0144%" height="15" fill="rgb(248,123,6)" fg:x="11861" fg:w="4"/><text x="43.0679%" y="303.50"></text></g><g><title>benchmark_queries`query_exec::tuple::Tuple::to_normalized_key_bytes (103 samples, 0.37%)</title><rect x="42.4678%" y="325" width="0.3718%" height="15" fill="rgb(206,91,31)" fg:x="11764" fg:w="103"/><text x="42.7178%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (26 samples, 0.09%)</title><rect x="42.8468%" y="325" width="0.0939%" height="15" fill="rgb(211,154,13)" fg:x="11869" fg:w="26"/><text x="43.0968%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (4 samples, 0.01%)</title><rect x="42.9407%" y="325" width="0.0144%" height="15" fill="rgb(225,148,7)" fg:x="11895" fg:w="4"/><text x="43.1907%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (4 samples, 0.01%)</title><rect x="43.0057%" y="309" width="0.0144%" height="15" fill="rgb(220,160,43)" fg:x="11913" fg:w="4"/><text x="43.2557%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (14 samples, 0.05%)</title><rect x="43.1284%" y="293" width="0.0505%" height="15" fill="rgb(213,52,39)" fg:x="11947" fg:w="14"/><text x="43.3784%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (70 samples, 0.25%)</title><rect x="42.9551%" y="325" width="0.2527%" height="15" fill="rgb(243,137,7)" fg:x="11899" fg:w="70"/><text x="43.2051%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (52 samples, 0.19%)</title><rect x="43.0201%" y="309" width="0.1877%" height="15" fill="rgb(230,79,13)" fg:x="11917" fg:w="52"/><text x="43.2701%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (8 samples, 0.03%)</title><rect x="43.1789%" y="293" width="0.0289%" height="15" fill="rgb(247,105,23)" fg:x="11961" fg:w="8"/><text x="43.4289%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (29 samples, 0.10%)</title><rect x="43.2150%" y="325" width="0.1047%" height="15" fill="rgb(223,179,41)" fg:x="11971" fg:w="29"/><text x="43.4650%" y="335.50"></text></g><g><title>benchmark_queries`query_exec::executor::ondisk_pipeline::sort::SortBuffer&lt;M&gt;::append (1,994 samples, 7.20%)</title><rect x="36.1359%" y="341" width="7.1983%" height="15" fill="rgb(218,9,34)" fg:x="10010" fg:w="1994"/><text x="36.3859%" y="351.50">benchmark_..</text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.01%)</title><rect x="43.3197%" y="325" width="0.0144%" height="15" fill="rgb(222,106,8)" fg:x="12000" fg:w="4"/><text x="43.5697%" y="335.50"></text></g><g><title>benchmark_queries`query_exec::tuple::Tuple::project (3 samples, 0.01%)</title><rect x="43.3342%" y="341" width="0.0108%" height="15" fill="rgb(211,220,0)" fg:x="12004" fg:w="3"/><text x="43.5842%" y="351.50"></text></g><g><title>benchmark_queries`query_exec::tuple::Tuple::to_bytes (3 samples, 0.01%)</title><rect x="43.3450%" y="341" width="0.0108%" height="15" fill="rgb(229,52,16)" fg:x="12007" fg:w="3"/><text x="43.5950%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_free (18 samples, 0.06%)</title><rect x="43.3667%" y="341" width="0.0650%" height="15" fill="rgb(212,155,18)" fg:x="12013" fg:w="18"/><text x="43.6167%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (162 samples, 0.58%)</title><rect x="43.4316%" y="341" width="0.5848%" height="15" fill="rgb(242,21,14)" fg:x="12031" fg:w="162"/><text x="43.6816%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (4 samples, 0.01%)</title><rect x="44.0165%" y="341" width="0.0144%" height="15" fill="rgb(222,19,48)" fg:x="12193" fg:w="4"/><text x="44.2665%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (5 samples, 0.02%)</title><rect x="44.1356%" y="325" width="0.0180%" height="15" fill="rgb(232,45,27)" fg:x="12226" fg:w="5"/><text x="44.3856%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (113 samples, 0.41%)</title><rect x="44.0345%" y="341" width="0.4079%" height="15" fill="rgb(249,103,42)" fg:x="12198" fg:w="113"/><text x="44.2845%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (80 samples, 0.29%)</title><rect x="44.1536%" y="325" width="0.2888%" height="15" fill="rgb(246,81,33)" fg:x="12231" fg:w="80"/><text x="44.4036%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (12 samples, 0.04%)</title><rect x="44.3991%" y="309" width="0.0433%" height="15" fill="rgb(252,33,42)" fg:x="12299" fg:w="12"/><text x="44.6491%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.01%)</title><rect x="44.4424%" y="341" width="0.0144%" height="15" fill="rgb(209,212,41)" fg:x="12311" fg:w="4"/><text x="44.6924%" y="351.50"></text></g><g><title>benchmark_queries`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (6,862 samples, 24.77%)</title><rect x="19.7791%" y="357" width="24.7717%" height="15" fill="rgb(207,154,6)" fg:x="5479" fg:w="6862"/><text x="20.0291%" y="367.50">benchmark_queries`core::ops::function::..</text></g><g><title>libsystem_platform.dylib`_platform_memset (25 samples, 0.09%)</title><rect x="44.4605%" y="341" width="0.0902%" height="15" fill="rgb(223,64,47)" fg:x="12316" fg:w="25"/><text x="44.7105%" y="351.50"></text></g><g><title>benchmark_queries`query_exec::executor::ondisk_pipeline::NonBlockingOp&lt;T,M&gt;::next (4 samples, 0.01%)</title><rect x="44.5507%" y="357" width="0.0144%" height="15" fill="rgb(211,161,38)" fg:x="12341" fg:w="4"/><text x="44.8007%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_free (48 samples, 0.17%)</title><rect x="44.5652%" y="357" width="0.1733%" height="15" fill="rgb(219,138,40)" fg:x="12345" fg:w="48"/><text x="44.8152%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (11 samples, 0.04%)</title><rect x="44.7385%" y="357" width="0.0397%" height="15" fill="rgb(241,228,46)" fg:x="12393" fg:w="11"/><text x="44.9885%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.01%)</title><rect x="44.7782%" y="357" width="0.0108%" height="15" fill="rgb(223,209,38)" fg:x="12404" fg:w="3"/><text x="45.0282%" y="367.50"></text></g><g><title>benchmark_queries`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6,958 samples, 25.12%)</title><rect x="19.6744%" y="373" width="25.1182%" height="15" fill="rgb(236,164,45)" fg:x="5450" fg:w="6958"/><text x="19.9244%" y="383.50">benchmark_queries`&lt;alloc::vec::Vec&lt;T,A&gt; ..</text></g><g><title>benchmark_queries`&lt;fbtree::bp::buffer_pool::BufferPool as fbtree::bp::mem_pool_trait::MemPool&gt;::get_page_for_read (22 samples, 0.08%)</title><rect x="44.8034%" y="325" width="0.0794%" height="15" fill="rgb(231,15,5)" fg:x="12411" fg:w="22"/><text x="45.0534%" y="335.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::get (3 samples, 0.01%)</title><rect x="44.8829%" y="325" width="0.0108%" height="15" fill="rgb(252,35,15)" fg:x="12433" fg:w="3"/><text x="45.1329%" y="335.50"></text></g><g><title>benchmark_queries`&lt;fbtree::access_method::sorted_run_store::BigSortedRunStoreScanner&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.13%)</title><rect x="44.7962%" y="341" width="0.1300%" height="15" fill="rgb(248,181,18)" fg:x="12409" fg:w="36"/><text x="45.0462%" y="351.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::slot_count (9 samples, 0.03%)</title><rect x="44.8937%" y="325" width="0.0325%" height="15" fill="rgb(233,39,42)" fg:x="12436" fg:w="9"/><text x="45.1437%" y="335.50"></text></g><g><title>benchmark_queries`&lt;query_exec::executor::ondisk_pipeline::sort::MergeIter&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.04%)</title><rect x="44.9298%" y="341" width="0.0361%" height="15" fill="rgb(238,110,33)" fg:x="12446" fg:w="10"/><text x="45.1798%" y="351.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$free (4 samples, 0.01%)</title><rect x="44.9659%" y="341" width="0.0144%" height="15" fill="rgb(233,195,10)" fg:x="12456" fg:w="4"/><text x="45.2159%" y="351.50"></text></g><g><title>benchmark_queries`&lt;fbtree::access_method::sorted_run_store::BigSortedRunStoreScanner&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.03%)</title><rect x="45.0525%" y="325" width="0.0289%" height="15" fill="rgb(254,105,3)" fg:x="12480" fg:w="8"/><text x="45.3025%" y="335.50"></text></g><g><title>benchmark_queries`fbtree::bp::buffer_pool::BufferPool::handle_page_fault (55 samples, 0.20%)</title><rect x="45.3774%" y="309" width="0.1985%" height="15" fill="rgb(221,225,9)" fg:x="12570" fg:w="55"/><text x="45.6274%" y="319.50"></text></g><g><title>benchmark_queries`&lt;fbtree::bp::buffer_pool::BufferPool as fbtree::bp::mem_pool_trait::MemPool&gt;::create_new_page_for_write (138 samples, 0.50%)</title><rect x="45.0814%" y="325" width="0.4982%" height="15" fill="rgb(224,227,45)" fg:x="12488" fg:w="138"/><text x="45.3314%" y="335.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::insert_slot (20 samples, 0.07%)</title><rect x="45.6662%" y="309" width="0.0722%" height="15" fill="rgb(229,198,43)" fg:x="12650" fg:w="20"/><text x="45.9162%" y="319.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::search_key (70 samples, 0.25%)</title><rect x="45.7384%" y="309" width="0.2527%" height="15" fill="rgb(206,209,35)" fg:x="12670" fg:w="70"/><text x="45.9884%" y="319.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::get (36 samples, 0.13%)</title><rect x="45.8612%" y="293" width="0.1300%" height="15" fill="rgb(245,195,53)" fg:x="12704" fg:w="36"/><text x="46.1112%" y="303.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcmp (3 samples, 0.01%)</title><rect x="45.9911%" y="309" width="0.0108%" height="15" fill="rgb(240,92,26)" fg:x="12740" fg:w="3"/><text x="46.2411%" y="319.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memmove (3 samples, 0.01%)</title><rect x="46.0019%" y="309" width="0.0108%" height="15" fill="rgb(207,40,23)" fg:x="12743" fg:w="3"/><text x="46.2519%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (66 samples, 0.24%)</title><rect x="46.0128%" y="309" width="0.2383%" height="15" fill="rgb(223,111,35)" fg:x="12746" fg:w="66"/><text x="46.2628%" y="319.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::append (347 samples, 1.25%)</title><rect x="45.5796%" y="325" width="1.2527%" height="15" fill="rgb(229,147,28)" fg:x="12626" fg:w="347"/><text x="45.8296%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (161 samples, 0.58%)</title><rect x="46.2510%" y="309" width="0.5812%" height="15" fill="rgb(211,29,28)" fg:x="12812" fg:w="161"/><text x="46.5010%" y="319.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::insert_slot (8 samples, 0.03%)</title><rect x="46.8322%" y="325" width="0.0289%" height="15" fill="rgb(228,72,33)" fg:x="12973" fg:w="8"/><text x="47.0822%" y="335.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::search_key (4 samples, 0.01%)</title><rect x="46.8611%" y="325" width="0.0144%" height="15" fill="rgb(205,214,31)" fg:x="12981" fg:w="4"/><text x="47.1111%" y="335.50"></text></g><g><title>benchmark_queries`std::io::default_read_exact (9 samples, 0.03%)</title><rect x="47.6481%" y="245" width="0.0325%" height="15" fill="rgb(224,111,15)" fg:x="13199" fg:w="9"/><text x="47.8981%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`read (9 samples, 0.03%)</title><rect x="47.6481%" y="229" width="0.0325%" height="15" fill="rgb(253,21,26)" fg:x="13199" fg:w="9"/><text x="47.8981%" y="239.50"></text></g><g><title>benchmark_queries`&lt;fbtree::bp::buffer_pool::BufferPool as fbtree::bp::mem_pool_trait::MemPool&gt;::get_page_for_read (45 samples, 0.16%)</title><rect x="47.5218%" y="293" width="0.1624%" height="15" fill="rgb(245,139,43)" fg:x="13164" fg:w="45"/><text x="47.7718%" y="303.50"></text></g><g><title>benchmark_queries`fbtree::bp::buffer_pool::BufferPool::handle_page_fault (10 samples, 0.04%)</title><rect x="47.6481%" y="277" width="0.0361%" height="15" fill="rgb(252,170,7)" fg:x="13199" fg:w="10"/><text x="47.8981%" y="287.50"></text></g><g><title>benchmark_queries`fbtree::file_manager::sync_write::FileManager::read_page (10 samples, 0.04%)</title><rect x="47.6481%" y="261" width="0.0361%" height="15" fill="rgb(231,118,14)" fg:x="13199" fg:w="10"/><text x="47.8981%" y="271.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::get (25 samples, 0.09%)</title><rect x="47.6842%" y="293" width="0.0902%" height="15" fill="rgb(238,83,0)" fg:x="13209" fg:w="25"/><text x="47.9342%" y="303.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::slot_count (60 samples, 0.22%)</title><rect x="47.7744%" y="293" width="0.2166%" height="15" fill="rgb(221,39,39)" fg:x="13234" fg:w="60"/><text x="48.0244%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (47 samples, 0.17%)</title><rect x="47.9910%" y="293" width="0.1697%" height="15" fill="rgb(222,119,46)" fg:x="13294" fg:w="47"/><text x="48.2410%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (38 samples, 0.14%)</title><rect x="48.2943%" y="277" width="0.1372%" height="15" fill="rgb(222,165,49)" fg:x="13378" fg:w="38"/><text x="48.5443%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (22 samples, 0.08%)</title><rect x="48.4315%" y="277" width="0.0794%" height="15" fill="rgb(219,113,52)" fg:x="13416" fg:w="22"/><text x="48.6815%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait2 (23 samples, 0.08%)</title><rect x="48.8719%" y="261" width="0.0830%" height="15" fill="rgb(214,7,15)" fg:x="13538" fg:w="23"/><text x="49.1219%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (5 samples, 0.02%)</title><rect x="48.9549%" y="261" width="0.0180%" height="15" fill="rgb(235,32,4)" fg:x="13561" fg:w="5"/><text x="49.2049%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (27 samples, 0.10%)</title><rect x="48.9730%" y="261" width="0.0975%" height="15" fill="rgb(238,90,54)" fg:x="13566" fg:w="27"/><text x="49.2230%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (4 samples, 0.01%)</title><rect x="49.4314%" y="245" width="0.0144%" height="15" fill="rgb(213,208,19)" fg:x="13693" fg:w="4"/><text x="49.6814%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (138 samples, 0.50%)</title><rect x="49.0704%" y="261" width="0.4982%" height="15" fill="rgb(233,156,4)" fg:x="13593" fg:w="138"/><text x="49.3204%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (34 samples, 0.12%)</title><rect x="49.4459%" y="245" width="0.1227%" height="15" fill="rgb(207,194,5)" fg:x="13697" fg:w="34"/><text x="49.6959%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (296 samples, 1.07%)</title><rect x="48.5109%" y="277" width="1.0686%" height="15" fill="rgb(206,111,30)" fg:x="13438" fg:w="296"/><text x="48.7609%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_os_unfair_lock_lock_slow (3 samples, 0.01%)</title><rect x="49.5686%" y="261" width="0.0108%" height="15" fill="rgb(243,70,54)" fg:x="13731" fg:w="3"/><text x="49.8186%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (395 samples, 1.43%)</title><rect x="48.1607%" y="293" width="1.4259%" height="15" fill="rgb(242,28,8)" fg:x="13341" fg:w="395"/><text x="48.4107%" y="303.50"></text></g><g><title>benchmark_queries`&lt;fbtree::access_method::sorted_run_store::BigSortedRunStoreScanner&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (707 samples, 2.55%)</title><rect x="47.0597%" y="309" width="2.5523%" height="15" fill="rgb(219,106,18)" fg:x="13036" fg:w="707"/><text x="47.3097%" y="319.50">be..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.03%)</title><rect x="49.5867%" y="293" width="0.0253%" height="15" fill="rgb(244,222,10)" fg:x="13736" fg:w="7"/><text x="49.8367%" y="303.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$malloc (9 samples, 0.03%)</title><rect x="49.6191%" y="309" width="0.0325%" height="15" fill="rgb(236,179,52)" fg:x="13745" fg:w="9"/><text x="49.8691%" y="319.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcmp (31 samples, 0.11%)</title><rect x="49.6516%" y="309" width="0.1119%" height="15" fill="rgb(213,23,39)" fg:x="13754" fg:w="31"/><text x="49.9016%" y="319.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcpy (5 samples, 0.02%)</title><rect x="49.7635%" y="309" width="0.0180%" height="15" fill="rgb(238,48,10)" fg:x="13785" fg:w="5"/><text x="50.0135%" y="319.50"></text></g><g><title>benchmark_queries`__rdl_alloc (4 samples, 0.01%)</title><rect x="49.7816%" y="309" width="0.0144%" height="15" fill="rgb(251,196,23)" fg:x="13790" fg:w="4"/><text x="50.0316%" y="319.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcmp (6 samples, 0.02%)</title><rect x="50.2184%" y="293" width="0.0217%" height="15" fill="rgb(250,152,24)" fg:x="13911" fg:w="6"/><text x="50.4684%" y="303.50"></text></g><g><title>benchmark_queries`alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (27 samples, 0.10%)</title><rect x="50.2401%" y="293" width="0.0975%" height="15" fill="rgb(209,150,17)" fg:x="13917" fg:w="27"/><text x="50.4901%" y="303.50"></text></g><g><title>benchmark_queries`alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (185 samples, 0.67%)</title><rect x="49.7996%" y="309" width="0.6678%" height="15" fill="rgb(234,202,34)" fg:x="13795" fg:w="185"/><text x="50.0496%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (36 samples, 0.13%)</title><rect x="50.3375%" y="293" width="0.1300%" height="15" fill="rgb(253,148,53)" fg:x="13944" fg:w="36"/><text x="50.5875%" y="303.50"></text></g><g><title>benchmark_queries`alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (87 samples, 0.31%)</title><rect x="50.4675%" y="309" width="0.3141%" height="15" fill="rgb(218,129,16)" fg:x="13980" fg:w="87"/><text x="50.7175%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (48 samples, 0.17%)</title><rect x="50.7816%" y="309" width="0.1733%" height="15" fill="rgb(216,85,19)" fg:x="14067" fg:w="48"/><text x="51.0316%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (6 samples, 0.02%)</title><rect x="50.9621%" y="309" width="0.0217%" height="15" fill="rgb(235,228,7)" fg:x="14117" fg:w="6"/><text x="51.2121%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.05%)</title><rect x="50.9837%" y="309" width="0.0469%" height="15" fill="rgb(245,175,0)" fg:x="14123" fg:w="13"/><text x="51.2337%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (915 samples, 3.30%)</title><rect x="51.0306%" y="309" width="3.3031%" height="15" fill="rgb(208,168,36)" fg:x="14136" fg:w="915"/><text x="51.2806%" y="319.50">lib..</text></g><g><title>benchmark_queries`&lt;query_exec::executor::ondisk_pipeline::sort::MergeIter&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,160 samples, 7.80%)</title><rect x="46.8756%" y="325" width="7.7976%" height="15" fill="rgb(246,171,24)" fg:x="12985" fg:w="2160"/><text x="47.1256%" y="335.50">benchmark_q..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (94 samples, 0.34%)</title><rect x="54.3338%" y="309" width="0.3393%" height="15" fill="rgb(215,142,24)" fg:x="15051" fg:w="94"/><text x="54.5838%" y="319.50"></text></g><g><title>benchmark_queries`__rdl_dealloc (6 samples, 0.02%)</title><rect x="54.6803%" y="325" width="0.0217%" height="15" fill="rgb(250,187,7)" fg:x="15147" fg:w="6"/><text x="54.9303%" y="335.50"></text></g><g><title>benchmark_queries`alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (6 samples, 0.02%)</title><rect x="54.7020%" y="325" width="0.0217%" height="15" fill="rgb(228,66,33)" fg:x="15153" fg:w="6"/><text x="54.9520%" y="335.50"></text></g><g><title>benchmark_queries`alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (15 samples, 0.05%)</title><rect x="54.7237%" y="325" width="0.0541%" height="15" fill="rgb(234,215,21)" fg:x="15159" fg:w="15"/><text x="54.9737%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (30 samples, 0.11%)</title><rect x="54.7778%" y="325" width="0.1083%" height="15" fill="rgb(222,191,20)" fg:x="15174" fg:w="30"/><text x="55.0278%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (49 samples, 0.18%)</title><rect x="54.8933%" y="325" width="0.1769%" height="15" fill="rgb(245,79,54)" fg:x="15206" fg:w="49"/><text x="55.1433%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (10 samples, 0.04%)</title><rect x="55.0702%" y="325" width="0.0361%" height="15" fill="rgb(240,10,37)" fg:x="15255" fg:w="10"/><text x="55.3202%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait2 (54 samples, 0.19%)</title><rect x="55.4673%" y="309" width="0.1949%" height="15" fill="rgb(214,192,32)" fg:x="15365" fg:w="54"/><text x="55.7173%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (10 samples, 0.04%)</title><rect x="55.6623%" y="309" width="0.0361%" height="15" fill="rgb(209,36,54)" fg:x="15419" fg:w="10"/><text x="55.9123%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (42 samples, 0.15%)</title><rect x="56.0305%" y="293" width="0.1516%" height="15" fill="rgb(220,10,11)" fg:x="15521" fg:w="42"/><text x="56.2805%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (163 samples, 0.59%)</title><rect x="55.7020%" y="309" width="0.5884%" height="15" fill="rgb(221,106,17)" fg:x="15430" fg:w="163"/><text x="55.9520%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (30 samples, 0.11%)</title><rect x="56.1821%" y="293" width="0.1083%" height="15" fill="rgb(251,142,44)" fg:x="15563" fg:w="30"/><text x="56.4321%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (341 samples, 1.23%)</title><rect x="55.1063%" y="325" width="1.2310%" height="15" fill="rgb(238,13,15)" fg:x="15265" fg:w="341"/><text x="55.3563%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_os_unfair_lock_lock_slow (13 samples, 0.05%)</title><rect x="56.2904%" y="309" width="0.0469%" height="15" fill="rgb(208,107,27)" fg:x="15593" fg:w="13"/><text x="56.5404%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.03%)</title><rect x="56.3373%" y="325" width="0.0289%" height="15" fill="rgb(205,136,37)" fg:x="15606" fg:w="8"/><text x="56.5873%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (725 samples, 2.62%)</title><rect x="56.3662%" y="325" width="2.6172%" height="15" fill="rgb(250,205,27)" fg:x="15614" fg:w="725"/><text x="56.6162%" y="335.50">li..</text></g><g><title>libsystem_platform.dylib`_platform_memset (39 samples, 0.14%)</title><rect x="58.9834%" y="325" width="0.1408%" height="15" fill="rgb(210,80,43)" fg:x="16339" fg:w="39"/><text x="59.2334%" y="335.50"></text></g><g><title>benchmark_queries`fbtree::access_method::sorted_run_store::SortedRunStore&lt;T&gt;::new (3,922 samples, 14.16%)</title><rect x="44.9803%" y="341" width="14.1583%" height="15" fill="rgb(247,160,36)" fg:x="12460" fg:w="3922"/><text x="45.2303%" y="351.50">benchmark_queries`fbt..</text></g><g><title>libsystem_platform.dylib`os_unfair_lock_lock_with_options (4 samples, 0.01%)</title><rect x="59.1242%" y="325" width="0.0144%" height="15" fill="rgb(234,13,49)" fg:x="16378" fg:w="4"/><text x="59.3742%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_free (31 samples, 0.11%)</title><rect x="59.1387%" y="341" width="0.1119%" height="15" fill="rgb(234,122,0)" fg:x="16382" fg:w="31"/><text x="59.3887%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.03%)</title><rect x="59.2506%" y="341" width="0.0289%" height="15" fill="rgb(207,146,38)" fg:x="16413" fg:w="8"/><text x="59.5006%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (13 samples, 0.05%)</title><rect x="59.2794%" y="341" width="0.0469%" height="15" fill="rgb(207,177,25)" fg:x="16421" fg:w="13"/><text x="59.5294%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.01%)</title><rect x="59.3336%" y="341" width="0.0108%" height="15" fill="rgb(211,178,42)" fg:x="16436" fg:w="3"/><text x="59.5836%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (65 samples, 0.23%)</title><rect x="59.3480%" y="341" width="0.2346%" height="15" fill="rgb(230,69,54)" fg:x="16440" fg:w="65"/><text x="59.5980%" y="351.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::Folder::consume_iter (4,098 samples, 14.79%)</title><rect x="44.7926%" y="373" width="14.7937%" height="15" fill="rgb(214,135,41)" fg:x="12408" fg:w="4098"/><text x="45.0426%" y="383.50">benchmark_queries`rayon..</text></g><g><title>benchmark_queries`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (4,098 samples, 14.79%)</title><rect x="44.7926%" y="357" width="14.7937%" height="15" fill="rgb(237,67,25)" fg:x="12408" fg:w="4098"/><text x="45.0426%" y="367.50">benchmark_queries`core:..</text></g><g><title>benchmark_queries`&lt;fbtree::bp::buffer_pool::BufferPool as fbtree::bp::mem_pool_trait::MemPool&gt;::get_page_for_read (14 samples, 0.05%)</title><rect x="59.5863%" y="293" width="0.0505%" height="15" fill="rgb(222,189,50)" fg:x="16506" fg:w="14"/><text x="59.8363%" y="303.50"></text></g><g><title>benchmark_queries`&lt;fbtree::access_method::sorted_run_store::BigSortedRunStoreScanner&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.07%)</title><rect x="59.5863%" y="309" width="0.0686%" height="15" fill="rgb(245,148,34)" fg:x="16506" fg:w="19"/><text x="59.8363%" y="319.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::slot_count (3 samples, 0.01%)</title><rect x="59.6441%" y="293" width="0.0108%" height="15" fill="rgb(222,29,6)" fg:x="16522" fg:w="3"/><text x="59.8941%" y="303.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::append (4 samples, 0.01%)</title><rect x="59.6549%" y="309" width="0.0144%" height="15" fill="rgb(221,189,43)" fg:x="16525" fg:w="4"/><text x="59.9049%" y="319.50"></text></g><g><title>benchmark_queries`&lt;query_exec::executor::ondisk_pipeline::sort::MergeIter&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="59.6693%" y="309" width="0.0144%" height="15" fill="rgb(207,36,27)" fg:x="16529" fg:w="4"/><text x="59.9193%" y="319.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$free (4 samples, 0.01%)</title><rect x="59.6838%" y="309" width="0.0144%" height="15" fill="rgb(217,90,24)" fg:x="16533" fg:w="4"/><text x="59.9338%" y="319.50"></text></g><g><title>benchmark_queries`&lt;fbtree::access_method::sorted_run_store::BigSortedRunStoreScanner&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="59.7560%" y="293" width="0.0144%" height="15" fill="rgb(224,66,35)" fg:x="16553" fg:w="4"/><text x="60.0060%" y="303.50"></text></g><g><title>benchmark_queries`&lt;fbtree::bp::buffer_pool::BufferPool as fbtree::bp::mem_pool_trait::MemPool&gt;::create_new_page_for_write (61 samples, 0.22%)</title><rect x="59.7704%" y="293" width="0.2202%" height="15" fill="rgb(221,13,50)" fg:x="16557" fg:w="61"/><text x="60.0204%" y="303.50"></text></g><g><title>benchmark_queries`fbtree::bp::buffer_pool::BufferPool::handle_page_fault (27 samples, 0.10%)</title><rect x="59.8931%" y="277" width="0.0975%" height="15" fill="rgb(236,68,49)" fg:x="16591" fg:w="27"/><text x="60.1431%" y="287.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::insert_slot (4 samples, 0.01%)</title><rect x="60.0520%" y="277" width="0.0144%" height="15" fill="rgb(229,146,28)" fg:x="16635" fg:w="4"/><text x="60.3020%" y="287.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::search_key (33 samples, 0.12%)</title><rect x="60.0664%" y="277" width="0.1191%" height="15" fill="rgb(225,31,38)" fg:x="16639" fg:w="33"/><text x="60.3164%" y="287.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::get (17 samples, 0.06%)</title><rect x="60.1242%" y="261" width="0.0614%" height="15" fill="rgb(250,208,3)" fg:x="16655" fg:w="17"/><text x="60.3742%" y="271.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcmp (4 samples, 0.01%)</title><rect x="60.1856%" y="277" width="0.0144%" height="15" fill="rgb(246,54,23)" fg:x="16672" fg:w="4"/><text x="60.4356%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (45 samples, 0.16%)</title><rect x="60.2036%" y="277" width="0.1624%" height="15" fill="rgb(243,76,11)" fg:x="16677" fg:w="45"/><text x="60.4536%" y="287.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::append (184 samples, 0.66%)</title><rect x="59.9906%" y="293" width="0.6642%" height="15" fill="rgb(245,21,50)" fg:x="16618" fg:w="184"/><text x="60.2406%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (80 samples, 0.29%)</title><rect x="60.3661%" y="277" width="0.2888%" height="15" fill="rgb(228,9,43)" fg:x="16722" fg:w="80"/><text x="60.6161%" y="287.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::insert_slot (5 samples, 0.02%)</title><rect x="60.6549%" y="293" width="0.0180%" height="15" fill="rgb(208,100,47)" fg:x="16802" fg:w="5"/><text x="60.9049%" y="303.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::search_key (3 samples, 0.01%)</title><rect x="60.6729%" y="293" width="0.0108%" height="15" fill="rgb(232,26,8)" fg:x="16807" fg:w="3"/><text x="60.9229%" y="303.50"></text></g><g><title>benchmark_queries`&lt;fbtree::bp::buffer_pool::BufferPool as fbtree::bp::mem_pool_trait::MemPool&gt;::get_page_for_read (29 samples, 0.10%)</title><rect x="60.9870%" y="261" width="0.1047%" height="15" fill="rgb(216,166,38)" fg:x="16894" fg:w="29"/><text x="61.2370%" y="271.50"></text></g><g><title>benchmark_queries`fbtree::bp::buffer_pool::BufferPool::handle_page_fault (9 samples, 0.03%)</title><rect x="61.0592%" y="245" width="0.0325%" height="15" fill="rgb(251,202,51)" fg:x="16914" fg:w="9"/><text x="61.3092%" y="255.50"></text></g><g><title>benchmark_queries`fbtree::file_manager::sync_write::FileManager::read_page (9 samples, 0.03%)</title><rect x="61.0592%" y="229" width="0.0325%" height="15" fill="rgb(254,216,34)" fg:x="16914" fg:w="9"/><text x="61.3092%" y="239.50"></text></g><g><title>benchmark_queries`std::io::default_read_exact (9 samples, 0.03%)</title><rect x="61.0592%" y="213" width="0.0325%" height="15" fill="rgb(251,32,27)" fg:x="16914" fg:w="9"/><text x="61.3092%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`read (9 samples, 0.03%)</title><rect x="61.0592%" y="197" width="0.0325%" height="15" fill="rgb(208,127,28)" fg:x="16914" fg:w="9"/><text x="61.3092%" y="207.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::get (9 samples, 0.03%)</title><rect x="61.0917%" y="261" width="0.0325%" height="15" fill="rgb(224,137,22)" fg:x="16923" fg:w="9"/><text x="61.3417%" y="271.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::slot_count (31 samples, 0.11%)</title><rect x="61.1241%" y="261" width="0.1119%" height="15" fill="rgb(254,70,32)" fg:x="16932" fg:w="31"/><text x="61.3741%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (27 samples, 0.10%)</title><rect x="61.2361%" y="261" width="0.0975%" height="15" fill="rgb(229,75,37)" fg:x="16963" fg:w="27"/><text x="61.4861%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (18 samples, 0.06%)</title><rect x="61.3877%" y="245" width="0.0650%" height="15" fill="rgb(252,64,23)" fg:x="17005" fg:w="18"/><text x="61.6377%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (15 samples, 0.05%)</title><rect x="61.4527%" y="245" width="0.0541%" height="15" fill="rgb(232,162,48)" fg:x="17023" fg:w="15"/><text x="61.7027%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait2 (16 samples, 0.06%)</title><rect x="61.6873%" y="229" width="0.0578%" height="15" fill="rgb(246,160,12)" fg:x="17088" fg:w="16"/><text x="61.9373%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (15 samples, 0.05%)</title><rect x="61.7595%" y="229" width="0.0541%" height="15" fill="rgb(247,166,0)" fg:x="17108" fg:w="15"/><text x="62.0095%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (4 samples, 0.01%)</title><rect x="61.9689%" y="213" width="0.0144%" height="15" fill="rgb(249,219,21)" fg:x="17166" fg:w="4"/><text x="62.2189%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (66 samples, 0.24%)</title><rect x="61.8137%" y="229" width="0.2383%" height="15" fill="rgb(205,209,3)" fg:x="17123" fg:w="66"/><text x="62.0637%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (19 samples, 0.07%)</title><rect x="61.9833%" y="213" width="0.0686%" height="15" fill="rgb(243,44,1)" fg:x="17170" fg:w="19"/><text x="62.2333%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (152 samples, 0.55%)</title><rect x="61.5068%" y="245" width="0.5487%" height="15" fill="rgb(206,159,16)" fg:x="17038" fg:w="152"/><text x="61.7568%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (201 samples, 0.73%)</title><rect x="61.3335%" y="261" width="0.7256%" height="15" fill="rgb(244,77,30)" fg:x="16990" fg:w="201"/><text x="61.5835%" y="271.50"></text></g><g><title>benchmark_queries`&lt;fbtree::access_method::sorted_run_store::BigSortedRunStoreScanner&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (362 samples, 1.31%)</title><rect x="60.7631%" y="277" width="1.3068%" height="15" fill="rgb(218,69,12)" fg:x="16832" fg:w="362"/><text x="61.0131%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.01%)</title><rect x="62.0591%" y="261" width="0.0108%" height="15" fill="rgb(212,87,7)" fg:x="17191" fg:w="3"/><text x="62.3091%" y="271.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$malloc (4 samples, 0.01%)</title><rect x="62.0808%" y="277" width="0.0144%" height="15" fill="rgb(245,114,25)" fg:x="17197" fg:w="4"/><text x="62.3308%" y="287.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcmp (14 samples, 0.05%)</title><rect x="62.0952%" y="277" width="0.0505%" height="15" fill="rgb(210,61,42)" fg:x="17201" fg:w="14"/><text x="62.3452%" y="287.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcmp (3 samples, 0.01%)</title><rect x="62.3515%" y="261" width="0.0108%" height="15" fill="rgb(211,52,33)" fg:x="17272" fg:w="3"/><text x="62.6015%" y="271.50"></text></g><g><title>benchmark_queries`alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (15 samples, 0.05%)</title><rect x="62.3624%" y="261" width="0.0541%" height="15" fill="rgb(234,58,33)" fg:x="17275" fg:w="15"/><text x="62.6124%" y="271.50"></text></g><g><title>benchmark_queries`alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (91 samples, 0.33%)</title><rect x="62.1530%" y="277" width="0.3285%" height="15" fill="rgb(220,115,36)" fg:x="17217" fg:w="91"/><text x="62.4030%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (18 samples, 0.06%)</title><rect x="62.4165%" y="261" width="0.0650%" height="15" fill="rgb(243,153,54)" fg:x="17290" fg:w="18"/><text x="62.6665%" y="271.50"></text></g><g><title>benchmark_queries`alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (58 samples, 0.21%)</title><rect x="62.4815%" y="277" width="0.2094%" height="15" fill="rgb(251,47,18)" fg:x="17308" fg:w="58"/><text x="62.7315%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.06%)</title><rect x="62.6909%" y="277" width="0.0578%" height="15" fill="rgb(242,102,42)" fg:x="17366" fg:w="16"/><text x="62.9409%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (7 samples, 0.03%)</title><rect x="62.7522%" y="277" width="0.0253%" height="15" fill="rgb(234,31,38)" fg:x="17383" fg:w="7"/><text x="63.0022%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.02%)</title><rect x="62.7775%" y="277" width="0.0180%" height="15" fill="rgb(221,117,51)" fg:x="17390" fg:w="5"/><text x="63.0275%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (431 samples, 1.56%)</title><rect x="62.7956%" y="277" width="1.5559%" height="15" fill="rgb(212,20,18)" fg:x="17395" fg:w="431"/><text x="63.0456%" y="287.50"></text></g><g><title>benchmark_queries`&lt;query_exec::executor::ondisk_pipeline::sort::MergeIter&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,059 samples, 3.82%)</title><rect x="60.6837%" y="293" width="3.8230%" height="15" fill="rgb(245,133,36)" fg:x="16810" fg:w="1059"/><text x="60.9337%" y="303.50">benc..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (43 samples, 0.16%)</title><rect x="64.3515%" y="277" width="0.1552%" height="15" fill="rgb(212,6,19)" fg:x="17826" fg:w="43"/><text x="64.6015%" y="287.50"></text></g><g><title>benchmark_queries`__rdl_dealloc (4 samples, 0.01%)</title><rect x="64.5139%" y="293" width="0.0144%" height="15" fill="rgb(218,1,36)" fg:x="17871" fg:w="4"/><text x="64.7639%" y="303.50"></text></g><g><title>benchmark_queries`alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (3 samples, 0.01%)</title><rect x="64.5284%" y="293" width="0.0108%" height="15" fill="rgb(246,84,54)" fg:x="17875" fg:w="3"/><text x="64.7784%" y="303.50"></text></g><g><title>benchmark_queries`alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (6 samples, 0.02%)</title><rect x="64.5392%" y="293" width="0.0217%" height="15" fill="rgb(242,110,6)" fg:x="17878" fg:w="6"/><text x="64.7892%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (18 samples, 0.06%)</title><rect x="64.5645%" y="293" width="0.0650%" height="15" fill="rgb(214,47,5)" fg:x="17885" fg:w="18"/><text x="64.8145%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (24 samples, 0.09%)</title><rect x="64.6367%" y="293" width="0.0866%" height="15" fill="rgb(218,159,25)" fg:x="17905" fg:w="24"/><text x="64.8867%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (6 samples, 0.02%)</title><rect x="64.7233%" y="293" width="0.0217%" height="15" fill="rgb(215,211,28)" fg:x="17929" fg:w="6"/><text x="64.9733%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait2 (32 samples, 0.12%)</title><rect x="64.8677%" y="277" width="0.1155%" height="15" fill="rgb(238,59,32)" fg:x="17969" fg:w="32"/><text x="65.1177%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (26 samples, 0.09%)</title><rect x="65.1529%" y="261" width="0.0939%" height="15" fill="rgb(226,82,3)" fg:x="18048" fg:w="26"/><text x="65.4029%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (86 samples, 0.31%)</title><rect x="64.9904%" y="277" width="0.3105%" height="15" fill="rgb(240,164,32)" fg:x="18003" fg:w="86"/><text x="65.2404%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (15 samples, 0.05%)</title><rect x="65.2467%" y="261" width="0.0541%" height="15" fill="rgb(232,46,7)" fg:x="18074" fg:w="15"/><text x="65.4967%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (159 samples, 0.57%)</title><rect x="64.7450%" y="293" width="0.5740%" height="15" fill="rgb(229,129,53)" fg:x="17935" fg:w="159"/><text x="64.9950%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_os_unfair_lock_lock_slow (5 samples, 0.02%)</title><rect x="65.3009%" y="277" width="0.0180%" height="15" fill="rgb(234,188,29)" fg:x="18089" fg:w="5"/><text x="65.5509%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (397 samples, 1.43%)</title><rect x="65.3226%" y="293" width="1.4332%" height="15" fill="rgb(246,141,4)" fg:x="18095" fg:w="397"/><text x="65.5726%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (15 samples, 0.05%)</title><rect x="66.7557%" y="293" width="0.0541%" height="15" fill="rgb(229,23,39)" fg:x="18492" fg:w="15"/><text x="67.0057%" y="303.50"></text></g><g><title>benchmark_queries`fbtree::access_method::sorted_run_store::SortedRunStore&lt;T&gt;::new (1,971 samples, 7.12%)</title><rect x="59.6982%" y="309" width="7.1153%" height="15" fill="rgb(206,12,3)" fg:x="16537" fg:w="1971"/><text x="59.9482%" y="319.50">benchmark_..</text></g><g><title>libsystem_malloc.dylib`_free (13 samples, 0.05%)</title><rect x="66.8171%" y="309" width="0.0469%" height="15" fill="rgb(252,226,20)" fg:x="18509" fg:w="13"/><text x="67.0671%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.02%)</title><rect x="66.8640%" y="309" width="0.0217%" height="15" fill="rgb(216,123,35)" fg:x="18522" fg:w="6"/><text x="67.1140%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (6 samples, 0.02%)</title><rect x="66.8857%" y="309" width="0.0217%" height="15" fill="rgb(212,68,40)" fg:x="18528" fg:w="6"/><text x="67.1357%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (20 samples, 0.07%)</title><rect x="66.9146%" y="309" width="0.0722%" height="15" fill="rgb(254,125,32)" fg:x="18536" fg:w="20"/><text x="67.1646%" y="319.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::Folder::consume_iter (2,051 samples, 7.40%)</title><rect x="59.5863%" y="341" width="7.4041%" height="15" fill="rgb(253,97,22)" fg:x="16506" fg:w="2051"/><text x="59.8363%" y="351.50">benchmark_..</text></g><g><title>benchmark_queries`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (2,051 samples, 7.40%)</title><rect x="59.5863%" y="325" width="7.4041%" height="15" fill="rgb(241,101,14)" fg:x="16506" fg:w="2051"/><text x="59.8363%" y="335.50">benchmark_..</text></g><g><title>benchmark_queries`&lt;fbtree::bp::buffer_pool::BufferPool as fbtree::bp::mem_pool_trait::MemPool&gt;::get_page_for_read (6 samples, 0.02%)</title><rect x="66.9976%" y="261" width="0.0217%" height="15" fill="rgb(238,103,29)" fg:x="18559" fg:w="6"/><text x="67.2476%" y="271.50"></text></g><g><title>benchmark_queries`&lt;fbtree::access_method::sorted_run_store::BigSortedRunStoreScanner&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.03%)</title><rect x="66.9940%" y="277" width="0.0325%" height="15" fill="rgb(233,195,47)" fg:x="18558" fg:w="9"/><text x="67.2440%" y="287.50"></text></g><g><title>benchmark_queries`&lt;query_exec::executor::ondisk_pipeline::sort::MergeIter&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="67.0265%" y="277" width="0.0144%" height="15" fill="rgb(246,218,30)" fg:x="18567" fg:w="4"/><text x="67.2765%" y="287.50"></text></g><g><title>benchmark_queries`&lt;fbtree::bp::buffer_pool::BufferPool as fbtree::bp::mem_pool_trait::MemPool&gt;::create_new_page_for_write (26 samples, 0.09%)</title><rect x="67.0698%" y="261" width="0.0939%" height="15" fill="rgb(219,145,47)" fg:x="18579" fg:w="26"/><text x="67.3198%" y="271.50"></text></g><g><title>benchmark_queries`fbtree::bp::buffer_pool::BufferPool::handle_page_fault (11 samples, 0.04%)</title><rect x="67.1239%" y="245" width="0.0397%" height="15" fill="rgb(243,12,26)" fg:x="18594" fg:w="11"/><text x="67.3739%" y="255.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::insert_slot (12 samples, 0.04%)</title><rect x="67.1889%" y="245" width="0.0433%" height="15" fill="rgb(214,87,16)" fg:x="18612" fg:w="12"/><text x="67.4389%" y="255.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::search_key (19 samples, 0.07%)</title><rect x="67.2322%" y="245" width="0.0686%" height="15" fill="rgb(208,99,42)" fg:x="18624" fg:w="19"/><text x="67.4822%" y="255.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::get (8 samples, 0.03%)</title><rect x="67.2719%" y="229" width="0.0289%" height="15" fill="rgb(253,99,2)" fg:x="18635" fg:w="8"/><text x="67.5219%" y="239.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcmp (6 samples, 0.02%)</title><rect x="67.3008%" y="245" width="0.0217%" height="15" fill="rgb(220,168,23)" fg:x="18643" fg:w="6"/><text x="67.5508%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (16 samples, 0.06%)</title><rect x="67.3225%" y="245" width="0.0578%" height="15" fill="rgb(242,38,24)" fg:x="18649" fg:w="16"/><text x="67.5725%" y="255.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::append (109 samples, 0.39%)</title><rect x="67.1636%" y="261" width="0.3935%" height="15" fill="rgb(225,182,9)" fg:x="18605" fg:w="109"/><text x="67.4136%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (49 samples, 0.18%)</title><rect x="67.3802%" y="245" width="0.1769%" height="15" fill="rgb(243,178,37)" fg:x="18665" fg:w="49"/><text x="67.6302%" y="255.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::insert_slot (4 samples, 0.01%)</title><rect x="67.5571%" y="261" width="0.0144%" height="15" fill="rgb(232,139,19)" fg:x="18714" fg:w="4"/><text x="67.8071%" y="271.50"></text></g><g><title>benchmark_queries`&lt;fbtree::bp::buffer_pool::BufferPool as fbtree::bp::mem_pool_trait::MemPool&gt;::get_page_for_read (14 samples, 0.05%)</title><rect x="67.7521%" y="229" width="0.0505%" height="15" fill="rgb(225,201,24)" fg:x="18768" fg:w="14"/><text x="68.0021%" y="239.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::get (4 samples, 0.01%)</title><rect x="67.8026%" y="229" width="0.0144%" height="15" fill="rgb(221,47,46)" fg:x="18782" fg:w="4"/><text x="68.0526%" y="239.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::slot_count (11 samples, 0.04%)</title><rect x="67.8170%" y="229" width="0.0397%" height="15" fill="rgb(249,23,13)" fg:x="18786" fg:w="11"/><text x="68.0670%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (9 samples, 0.03%)</title><rect x="67.8568%" y="229" width="0.0325%" height="15" fill="rgb(219,9,5)" fg:x="18797" fg:w="9"/><text x="68.1068%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (12 samples, 0.04%)</title><rect x="67.9290%" y="213" width="0.0433%" height="15" fill="rgb(254,171,16)" fg:x="18817" fg:w="12"/><text x="68.1790%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.02%)</title><rect x="67.9723%" y="213" width="0.0180%" height="15" fill="rgb(230,171,20)" fg:x="18829" fg:w="5"/><text x="68.2223%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait2 (7 samples, 0.03%)</title><rect x="68.0770%" y="197" width="0.0253%" height="15" fill="rgb(210,71,41)" fg:x="18858" fg:w="7"/><text x="68.3270%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (10 samples, 0.04%)</title><rect x="68.1022%" y="197" width="0.0361%" height="15" fill="rgb(206,173,20)" fg:x="18865" fg:w="10"/><text x="68.3522%" y="207.50"></text></g><g><title>benchmark_queries`&lt;fbtree::access_method::sorted_run_store::BigSortedRunStoreScanner&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (186 samples, 0.67%)</title><rect x="67.6113%" y="245" width="0.6715%" height="15" fill="rgb(233,88,34)" fg:x="18729" fg:w="186"/><text x="67.8613%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (109 samples, 0.39%)</title><rect x="67.8892%" y="229" width="0.3935%" height="15" fill="rgb(223,209,46)" fg:x="18806" fg:w="109"/><text x="68.1392%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (81 samples, 0.29%)</title><rect x="67.9903%" y="213" width="0.2924%" height="15" fill="rgb(250,43,18)" fg:x="18834" fg:w="81"/><text x="68.2403%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (40 samples, 0.14%)</title><rect x="68.1383%" y="197" width="0.1444%" height="15" fill="rgb(208,13,10)" fg:x="18875" fg:w="40"/><text x="68.3883%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (9 samples, 0.03%)</title><rect x="68.2502%" y="181" width="0.0325%" height="15" fill="rgb(212,200,36)" fg:x="18906" fg:w="9"/><text x="68.5002%" y="191.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$malloc (3 samples, 0.01%)</title><rect x="68.2863%" y="245" width="0.0108%" height="15" fill="rgb(225,90,30)" fg:x="18916" fg:w="3"/><text x="68.5363%" y="255.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcmp (7 samples, 0.03%)</title><rect x="68.2972%" y="245" width="0.0253%" height="15" fill="rgb(236,182,39)" fg:x="18919" fg:w="7"/><text x="68.5472%" y="255.50"></text></g><g><title>benchmark_queries`alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (5 samples, 0.02%)</title><rect x="68.4668%" y="229" width="0.0180%" height="15" fill="rgb(212,144,35)" fg:x="18966" fg:w="5"/><text x="68.7168%" y="239.50"></text></g><g><title>benchmark_queries`alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (55 samples, 0.20%)</title><rect x="68.3261%" y="245" width="0.1985%" height="15" fill="rgb(228,63,44)" fg:x="18927" fg:w="55"/><text x="68.5761%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (11 samples, 0.04%)</title><rect x="68.4849%" y="229" width="0.0397%" height="15" fill="rgb(228,109,6)" fg:x="18971" fg:w="11"/><text x="68.7349%" y="239.50"></text></g><g><title>benchmark_queries`alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (15 samples, 0.05%)</title><rect x="68.5246%" y="245" width="0.0541%" height="15" fill="rgb(238,117,24)" fg:x="18982" fg:w="15"/><text x="68.7746%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.04%)</title><rect x="68.5788%" y="245" width="0.0397%" height="15" fill="rgb(242,26,26)" fg:x="18997" fg:w="11"/><text x="68.8288%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.01%)</title><rect x="68.6221%" y="245" width="0.0108%" height="15" fill="rgb(221,92,48)" fg:x="19009" fg:w="3"/><text x="68.8721%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (214 samples, 0.77%)</title><rect x="68.6329%" y="245" width="0.7725%" height="15" fill="rgb(209,209,32)" fg:x="19012" fg:w="214"/><text x="68.8829%" y="255.50"></text></g><g><title>benchmark_queries`&lt;query_exec::executor::ondisk_pipeline::sort::MergeIter&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (524 samples, 1.89%)</title><rect x="67.5788%" y="261" width="1.8916%" height="15" fill="rgb(221,70,22)" fg:x="18720" fg:w="524"/><text x="67.8288%" y="271.50">b..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (18 samples, 0.06%)</title><rect x="69.4054%" y="245" width="0.0650%" height="15" fill="rgb(248,145,5)" fg:x="19226" fg:w="18"/><text x="69.6554%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (7 samples, 0.03%)</title><rect x="69.4849%" y="261" width="0.0253%" height="15" fill="rgb(226,116,26)" fg:x="19248" fg:w="7"/><text x="69.7349%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (11 samples, 0.04%)</title><rect x="69.5101%" y="261" width="0.0397%" height="15" fill="rgb(244,5,17)" fg:x="19255" fg:w="11"/><text x="69.7601%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (5 samples, 0.02%)</title><rect x="69.5498%" y="261" width="0.0180%" height="15" fill="rgb(252,159,33)" fg:x="19266" fg:w="5"/><text x="69.7998%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait2 (13 samples, 0.05%)</title><rect x="69.6617%" y="245" width="0.0469%" height="15" fill="rgb(206,71,0)" fg:x="19297" fg:w="13"/><text x="69.9117%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (5 samples, 0.02%)</title><rect x="69.7087%" y="245" width="0.0180%" height="15" fill="rgb(233,118,54)" fg:x="19310" fg:w="5"/><text x="69.9587%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (8 samples, 0.03%)</title><rect x="69.8061%" y="229" width="0.0289%" height="15" fill="rgb(234,83,48)" fg:x="19337" fg:w="8"/><text x="70.0561%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (44 samples, 0.16%)</title><rect x="69.7267%" y="245" width="0.1588%" height="15" fill="rgb(228,3,54)" fg:x="19315" fg:w="44"/><text x="69.9767%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (14 samples, 0.05%)</title><rect x="69.8350%" y="229" width="0.0505%" height="15" fill="rgb(226,155,13)" fg:x="19345" fg:w="14"/><text x="70.0850%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (89 samples, 0.32%)</title><rect x="69.5679%" y="261" width="0.3213%" height="15" fill="rgb(241,28,37)" fg:x="19271" fg:w="89"/><text x="69.8179%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (191 samples, 0.69%)</title><rect x="69.8892%" y="261" width="0.6895%" height="15" fill="rgb(233,93,10)" fg:x="19360" fg:w="191"/><text x="70.1392%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (15 samples, 0.05%)</title><rect x="70.5787%" y="261" width="0.0541%" height="15" fill="rgb(225,113,19)" fg:x="19551" fg:w="15"/><text x="70.8287%" y="271.50"></text></g><g><title>benchmark_queries`fbtree::access_method::sorted_run_store::SortedRunStore&lt;T&gt;::new (995 samples, 3.59%)</title><rect x="67.0445%" y="277" width="3.5919%" height="15" fill="rgb(241,2,18)" fg:x="18572" fg:w="995"/><text x="67.2945%" y="287.50">benc..</text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (3,089 samples, 11.15%)</title><rect x="59.5863%" y="373" width="11.1512%" height="15" fill="rgb(228,207,21)" fg:x="16506" fg:w="3089"/><text x="59.8363%" y="383.50">benchmark_querie..</text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (3,089 samples, 11.15%)</title><rect x="59.5863%" y="357" width="11.1512%" height="15" fill="rgb(213,211,35)" fg:x="16506" fg:w="3089"/><text x="59.8363%" y="367.50">benchmark_querie..</text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (1,038 samples, 3.75%)</title><rect x="66.9904%" y="341" width="3.7472%" height="15" fill="rgb(209,83,10)" fg:x="18557" fg:w="1038"/><text x="67.2404%" y="351.50">benc..</text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (1,038 samples, 3.75%)</title><rect x="66.9904%" y="325" width="3.7472%" height="15" fill="rgb(209,164,1)" fg:x="18557" fg:w="1038"/><text x="67.2404%" y="335.50">benc..</text></g><g><title>benchmark_queries`rayon::iter::plumbing::Folder::consume_iter (1,038 samples, 3.75%)</title><rect x="66.9904%" y="309" width="3.7472%" height="15" fill="rgb(213,184,43)" fg:x="18557" fg:w="1038"/><text x="67.2404%" y="319.50">benc..</text></g><g><title>benchmark_queries`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1,038 samples, 3.75%)</title><rect x="66.9904%" y="293" width="3.7472%" height="15" fill="rgb(231,61,34)" fg:x="18557" fg:w="1038"/><text x="67.2404%" y="303.50">benc..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (23 samples, 0.08%)</title><rect x="70.6545%" y="277" width="0.0830%" height="15" fill="rgb(235,75,3)" fg:x="19572" fg:w="23"/><text x="70.9045%" y="287.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$free (10 samples, 0.04%)</title><rect x="70.7375%" y="309" width="0.0361%" height="15" fill="rgb(220,106,47)" fg:x="19595" fg:w="10"/><text x="70.9875%" y="319.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::append (3 samples, 0.01%)</title><rect x="70.8566%" y="293" width="0.0108%" height="15" fill="rgb(210,196,33)" fg:x="19628" fg:w="3"/><text x="71.1066%" y="303.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (23 samples, 0.08%)</title><rect x="70.8964%" y="261" width="0.0830%" height="15" fill="rgb(229,154,42)" fg:x="19639" fg:w="23"/><text x="71.1464%" y="271.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (12 samples, 0.04%)</title><rect x="71.1707%" y="229" width="0.0433%" height="15" fill="rgb(228,114,26)" fg:x="19715" fg:w="12"/><text x="71.4207%" y="239.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (25 samples, 0.09%)</title><rect x="71.1418%" y="245" width="0.0902%" height="15" fill="rgb(208,144,1)" fg:x="19707" fg:w="25"/><text x="71.3918%" y="255.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (5 samples, 0.02%)</title><rect x="71.2140%" y="229" width="0.0180%" height="15" fill="rgb(239,112,37)" fg:x="19727" fg:w="5"/><text x="71.4640%" y="239.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (8 samples, 0.03%)</title><rect x="71.2321%" y="245" width="0.0289%" height="15" fill="rgb(210,96,50)" fg:x="19732" fg:w="8"/><text x="71.4821%" y="255.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (10 samples, 0.04%)</title><rect x="71.3187%" y="213" width="0.0361%" height="15" fill="rgb(222,178,2)" fg:x="19756" fg:w="10"/><text x="71.5687%" y="223.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (22 samples, 0.08%)</title><rect x="71.3007%" y="229" width="0.0794%" height="15" fill="rgb(226,74,18)" fg:x="19751" fg:w="22"/><text x="71.5507%" y="239.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (7 samples, 0.03%)</title><rect x="71.3548%" y="213" width="0.0253%" height="15" fill="rgb(225,67,54)" fg:x="19766" fg:w="7"/><text x="71.6048%" y="223.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (6 samples, 0.02%)</title><rect x="71.3801%" y="229" width="0.0217%" height="15" fill="rgb(251,92,32)" fg:x="19773" fg:w="6"/><text x="71.6301%" y="239.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::pivot::choose_pivot (3 samples, 0.01%)</title><rect x="71.4054%" y="229" width="0.0108%" height="15" fill="rgb(228,149,22)" fg:x="19780" fg:w="3"/><text x="71.6554%" y="239.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (4 samples, 0.01%)</title><rect x="71.4379%" y="213" width="0.0144%" height="15" fill="rgb(243,54,13)" fg:x="19789" fg:w="4"/><text x="71.6879%" y="223.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (8 samples, 0.03%)</title><rect x="71.4776%" y="197" width="0.0289%" height="15" fill="rgb(243,180,28)" fg:x="19800" fg:w="8"/><text x="71.7276%" y="207.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (19 samples, 0.07%)</title><rect x="71.4523%" y="213" width="0.0686%" height="15" fill="rgb(208,167,24)" fg:x="19793" fg:w="19"/><text x="71.7023%" y="223.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (4 samples, 0.01%)</title><rect x="71.5064%" y="197" width="0.0144%" height="15" fill="rgb(245,73,45)" fg:x="19808" fg:w="4"/><text x="71.7564%" y="207.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (5 samples, 0.02%)</title><rect x="71.5425%" y="213" width="0.0180%" height="15" fill="rgb(237,203,48)" fg:x="19818" fg:w="5"/><text x="71.7925%" y="223.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (6 samples, 0.02%)</title><rect x="71.6184%" y="181" width="0.0217%" height="15" fill="rgb(211,197,16)" fg:x="19839" fg:w="6"/><text x="71.8684%" y="191.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (18 samples, 0.06%)</title><rect x="71.5967%" y="197" width="0.0650%" height="15" fill="rgb(243,99,51)" fg:x="19833" fg:w="18"/><text x="71.8467%" y="207.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (6 samples, 0.02%)</title><rect x="71.6400%" y="181" width="0.0217%" height="15" fill="rgb(215,123,29)" fg:x="19845" fg:w="6"/><text x="71.8900%" y="191.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (4 samples, 0.01%)</title><rect x="71.6617%" y="197" width="0.0144%" height="15" fill="rgb(239,186,37)" fg:x="19851" fg:w="4"/><text x="71.9117%" y="207.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::pivot::median3_rec (3 samples, 0.01%)</title><rect x="71.6833%" y="165" width="0.0108%" height="15" fill="rgb(252,136,39)" fg:x="19857" fg:w="3"/><text x="71.9333%" y="175.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::pivot::choose_pivot (6 samples, 0.02%)</title><rect x="71.6761%" y="197" width="0.0217%" height="15" fill="rgb(223,213,32)" fg:x="19855" fg:w="6"/><text x="71.9261%" y="207.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::pivot::median3_rec (5 samples, 0.02%)</title><rect x="71.6797%" y="181" width="0.0180%" height="15" fill="rgb(233,115,5)" fg:x="19856" fg:w="5"/><text x="71.9297%" y="191.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (8 samples, 0.03%)</title><rect x="71.6978%" y="197" width="0.0289%" height="15" fill="rgb(207,226,44)" fg:x="19861" fg:w="8"/><text x="71.9478%" y="207.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (3 samples, 0.01%)</title><rect x="71.7411%" y="181" width="0.0108%" height="15" fill="rgb(208,126,0)" fg:x="19873" fg:w="3"/><text x="71.9911%" y="191.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (4 samples, 0.01%)</title><rect x="71.7700%" y="165" width="0.0144%" height="15" fill="rgb(244,66,21)" fg:x="19881" fg:w="4"/><text x="72.0200%" y="175.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (14 samples, 0.05%)</title><rect x="71.7519%" y="181" width="0.0505%" height="15" fill="rgb(222,97,12)" fg:x="19876" fg:w="14"/><text x="72.0019%" y="191.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (5 samples, 0.02%)</title><rect x="71.7844%" y="165" width="0.0180%" height="15" fill="rgb(219,213,19)" fg:x="19885" fg:w="5"/><text x="72.0344%" y="175.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (6 samples, 0.02%)</title><rect x="71.8025%" y="181" width="0.0217%" height="15" fill="rgb(252,169,30)" fg:x="19890" fg:w="6"/><text x="72.0525%" y="191.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::bidirectional_merge (3 samples, 0.01%)</title><rect x="71.8422%" y="165" width="0.0108%" height="15" fill="rgb(206,32,51)" fg:x="19901" fg:w="3"/><text x="72.0922%" y="175.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::insert_tail (3 samples, 0.01%)</title><rect x="71.8530%" y="165" width="0.0108%" height="15" fill="rgb(250,172,42)" fg:x="19904" fg:w="3"/><text x="72.1030%" y="175.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (18 samples, 0.06%)</title><rect x="71.8422%" y="181" width="0.0650%" height="15" fill="rgb(209,34,43)" fg:x="19901" fg:w="18"/><text x="72.0922%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (11 samples, 0.04%)</title><rect x="71.8674%" y="165" width="0.0397%" height="15" fill="rgb(223,11,35)" fg:x="19908" fg:w="11"/><text x="72.1174%" y="175.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (8 samples, 0.03%)</title><rect x="71.9180%" y="149" width="0.0289%" height="15" fill="rgb(251,219,26)" fg:x="19922" fg:w="8"/><text x="72.1680%" y="159.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (15 samples, 0.05%)</title><rect x="71.9144%" y="165" width="0.0541%" height="15" fill="rgb(231,119,3)" fg:x="19921" fg:w="15"/><text x="72.1644%" y="175.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (6 samples, 0.02%)</title><rect x="71.9469%" y="149" width="0.0217%" height="15" fill="rgb(216,97,11)" fg:x="19930" fg:w="6"/><text x="72.1969%" y="159.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (4 samples, 0.01%)</title><rect x="71.9685%" y="165" width="0.0144%" height="15" fill="rgb(223,59,9)" fg:x="19936" fg:w="4"/><text x="72.2185%" y="175.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::insert_tail (4 samples, 0.01%)</title><rect x="71.9974%" y="149" width="0.0144%" height="15" fill="rgb(233,93,31)" fg:x="19944" fg:w="4"/><text x="72.2474%" y="159.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (3 samples, 0.01%)</title><rect x="72.0010%" y="133" width="0.0108%" height="15" fill="rgb(239,81,33)" fg:x="19945" fg:w="3"/><text x="72.2510%" y="143.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (16 samples, 0.06%)</title><rect x="71.9830%" y="165" width="0.0578%" height="15" fill="rgb(213,120,34)" fg:x="19940" fg:w="16"/><text x="72.2330%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (6 samples, 0.02%)</title><rect x="72.0191%" y="149" width="0.0217%" height="15" fill="rgb(243,49,53)" fg:x="19950" fg:w="6"/><text x="72.2691%" y="159.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (5 samples, 0.02%)</title><rect x="72.0443%" y="149" width="0.0180%" height="15" fill="rgb(247,216,33)" fg:x="19957" fg:w="5"/><text x="72.2943%" y="159.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (3 samples, 0.01%)</title><rect x="72.0516%" y="133" width="0.0108%" height="15" fill="rgb(226,26,14)" fg:x="19959" fg:w="3"/><text x="72.3016%" y="143.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (3 samples, 0.01%)</title><rect x="72.0624%" y="149" width="0.0108%" height="15" fill="rgb(215,49,53)" fg:x="19962" fg:w="3"/><text x="72.3124%" y="159.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (4 samples, 0.01%)</title><rect x="72.0804%" y="133" width="0.0144%" height="15" fill="rgb(245,162,40)" fg:x="19967" fg:w="4"/><text x="72.3304%" y="143.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::bidirectional_merge (4 samples, 0.01%)</title><rect x="72.0985%" y="133" width="0.0144%" height="15" fill="rgb(229,68,17)" fg:x="19972" fg:w="4"/><text x="72.3485%" y="143.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (3 samples, 0.01%)</title><rect x="72.1165%" y="117" width="0.0108%" height="15" fill="rgb(213,182,10)" fg:x="19977" fg:w="3"/><text x="72.3665%" y="127.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::insert_tail (5 samples, 0.02%)</title><rect x="72.1129%" y="133" width="0.0180%" height="15" fill="rgb(245,125,30)" fg:x="19976" fg:w="5"/><text x="72.3629%" y="143.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (23 samples, 0.08%)</title><rect x="72.0804%" y="149" width="0.0830%" height="15" fill="rgb(232,202,2)" fg:x="19967" fg:w="23"/><text x="72.3304%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (9 samples, 0.03%)</title><rect x="72.1310%" y="133" width="0.0325%" height="15" fill="rgb(237,140,51)" fg:x="19981" fg:w="9"/><text x="72.3810%" y="143.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (5 samples, 0.02%)</title><rect x="72.1923%" y="85" width="0.0180%" height="15" fill="rgb(236,157,25)" fg:x="19998" fg:w="5"/><text x="72.4423%" y="95.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::bidirectional_merge (11 samples, 0.04%)</title><rect x="72.1851%" y="117" width="0.0397%" height="15" fill="rgb(219,209,0)" fg:x="19996" fg:w="11"/><text x="72.4351%" y="127.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (9 samples, 0.03%)</title><rect x="72.1923%" y="101" width="0.0325%" height="15" fill="rgb(240,116,54)" fg:x="19998" fg:w="9"/><text x="72.4423%" y="111.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (4 samples, 0.01%)</title><rect x="72.2104%" y="85" width="0.0144%" height="15" fill="rgb(216,10,36)" fg:x="20003" fg:w="4"/><text x="72.4604%" y="95.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::insert_tail (3 samples, 0.01%)</title><rect x="72.2248%" y="117" width="0.0108%" height="15" fill="rgb(222,72,44)" fg:x="20007" fg:w="3"/><text x="72.4748%" y="127.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (3 samples, 0.01%)</title><rect x="72.2248%" y="101" width="0.0108%" height="15" fill="rgb(232,159,9)" fg:x="20007" fg:w="3"/><text x="72.4748%" y="111.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (3 samples, 0.01%)</title><rect x="72.2248%" y="85" width="0.0108%" height="15" fill="rgb(210,39,32)" fg:x="20007" fg:w="3"/><text x="72.4748%" y="95.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (24 samples, 0.09%)</title><rect x="72.1743%" y="133" width="0.0866%" height="15" fill="rgb(216,194,45)" fg:x="19993" fg:w="24"/><text x="72.4243%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (5 samples, 0.02%)</title><rect x="72.2429%" y="117" width="0.0180%" height="15" fill="rgb(218,18,35)" fg:x="20012" fg:w="5"/><text x="72.4929%" y="127.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::bidirectional_merge (3 samples, 0.01%)</title><rect x="72.2645%" y="101" width="0.0108%" height="15" fill="rgb(207,83,51)" fg:x="20018" fg:w="3"/><text x="72.5145%" y="111.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (10 samples, 0.04%)</title><rect x="72.2645%" y="117" width="0.0361%" height="15" fill="rgb(225,63,43)" fg:x="20018" fg:w="10"/><text x="72.5145%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (5 samples, 0.02%)</title><rect x="72.2826%" y="101" width="0.0180%" height="15" fill="rgb(207,57,36)" fg:x="20023" fg:w="5"/><text x="72.5326%" y="111.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (4 samples, 0.01%)</title><rect x="72.3042%" y="101" width="0.0144%" height="15" fill="rgb(216,99,33)" fg:x="20029" fg:w="4"/><text x="72.5542%" y="111.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (44 samples, 0.16%)</title><rect x="72.1635%" y="149" width="0.1588%" height="15" fill="rgb(225,42,16)" fg:x="19990" fg:w="44"/><text x="72.4135%" y="159.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (17 samples, 0.06%)</title><rect x="72.2609%" y="133" width="0.0614%" height="15" fill="rgb(220,201,45)" fg:x="20017" fg:w="17"/><text x="72.5109%" y="143.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (6 samples, 0.02%)</title><rect x="72.3006%" y="117" width="0.0217%" height="15" fill="rgb(225,33,4)" fg:x="20028" fg:w="6"/><text x="72.5506%" y="127.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (81 samples, 0.29%)</title><rect x="72.0407%" y="165" width="0.2924%" height="15" fill="rgb(224,33,50)" fg:x="19956" fg:w="81"/><text x="72.2907%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (3 samples, 0.01%)</title><rect x="72.3223%" y="149" width="0.0108%" height="15" fill="rgb(246,198,51)" fg:x="20034" fg:w="3"/><text x="72.5723%" y="159.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (119 samples, 0.43%)</title><rect x="71.9072%" y="181" width="0.4296%" height="15" fill="rgb(205,22,4)" fg:x="19919" fg:w="119"/><text x="72.1572%" y="191.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (173 samples, 0.62%)</title><rect x="71.7267%" y="197" width="0.6245%" height="15" fill="rgb(206,3,8)" fg:x="19869" fg:w="173"/><text x="71.9767%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (4 samples, 0.01%)</title><rect x="72.3367%" y="181" width="0.0144%" height="15" fill="rgb(251,23,15)" fg:x="20038" fg:w="4"/><text x="72.5867%" y="191.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (225 samples, 0.81%)</title><rect x="71.5606%" y="213" width="0.8122%" height="15" fill="rgb(252,88,28)" fg:x="19823" fg:w="225"/><text x="71.8106%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (6 samples, 0.02%)</title><rect x="72.3512%" y="197" width="0.0217%" height="15" fill="rgb(212,127,14)" fg:x="20042" fg:w="6"/><text x="72.6012%" y="207.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (274 samples, 0.99%)</title><rect x="71.4198%" y="229" width="0.9891%" height="15" fill="rgb(247,145,37)" fg:x="19784" fg:w="274"/><text x="71.6698%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (10 samples, 0.04%)</title><rect x="72.3728%" y="213" width="0.0361%" height="15" fill="rgb(209,117,53)" fg:x="20048" fg:w="10"/><text x="72.6228%" y="223.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (333 samples, 1.20%)</title><rect x="71.2682%" y="245" width="1.2021%" height="15" fill="rgb(212,90,42)" fg:x="19742" fg:w="333"/><text x="71.5182%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (17 samples, 0.06%)</title><rect x="72.4089%" y="229" width="0.0614%" height="15" fill="rgb(218,164,37)" fg:x="20058" fg:w="17"/><text x="72.6589%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (22 samples, 0.08%)</title><rect x="72.4703%" y="245" width="0.0794%" height="15" fill="rgb(246,65,34)" fg:x="20075" fg:w="22"/><text x="72.7203%" y="255.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (435 samples, 1.57%)</title><rect x="70.9830%" y="261" width="1.5703%" height="15" fill="rgb(231,100,33)" fg:x="19663" fg:w="435"/><text x="71.2330%" y="271.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::driftsort_main (492 samples, 1.78%)</title><rect x="70.8855%" y="293" width="1.7761%" height="15" fill="rgb(228,126,14)" fg:x="19636" fg:w="492"/><text x="71.1355%" y="303.50">b..</text></g><g><title>benchmark_queries`core::slice::sort::stable::drift::sort (492 samples, 1.78%)</title><rect x="70.8855%" y="277" width="1.7761%" height="15" fill="rgb(215,173,21)" fg:x="19636" fg:w="492"/><text x="71.1355%" y="287.50">b..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (30 samples, 0.11%)</title><rect x="72.5533%" y="261" width="0.1083%" height="15" fill="rgb(210,6,40)" fg:x="20098" fg:w="30"/><text x="72.8033%" y="271.50"></text></g><g><title>benchmark_queries`fbtree::bp::buffer_pool::BufferPool::handle_page_fault (8 samples, 0.03%)</title><rect x="72.8746%" y="261" width="0.0289%" height="15" fill="rgb(212,48,18)" fg:x="20187" fg:w="8"/><text x="73.1246%" y="271.50"></text></g><g><title>benchmark_queries`std::fs::OpenOptions::_open (8 samples, 0.03%)</title><rect x="72.9035%" y="245" width="0.0289%" height="15" fill="rgb(230,214,11)" fg:x="20195" fg:w="8"/><text x="73.1535%" y="255.50"></text></g><g><title>benchmark_queries`std::sys::pal::unix::fs::File::open_c (8 samples, 0.03%)</title><rect x="72.9035%" y="229" width="0.0289%" height="15" fill="rgb(254,105,39)" fg:x="20195" fg:w="8"/><text x="73.1535%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__open (8 samples, 0.03%)</title><rect x="72.9035%" y="213" width="0.0289%" height="15" fill="rgb(245,158,5)" fg:x="20195" fg:w="8"/><text x="73.1535%" y="223.50"></text></g><g><title>benchmark_queries`&lt;fbtree::bp::buffer_pool::BufferPool as fbtree::bp::mem_pool_trait::MemPool&gt;::create_new_page_for_write (74 samples, 0.27%)</title><rect x="72.6689%" y="277" width="0.2671%" height="15" fill="rgb(249,208,11)" fg:x="20130" fg:w="74"/><text x="72.9189%" y="287.50"></text></g><g><title>benchmark_queries`fbtree::file_manager::sync_write::FileManager::new (9 samples, 0.03%)</title><rect x="72.9035%" y="261" width="0.0325%" height="15" fill="rgb(210,39,28)" fg:x="20195" fg:w="9"/><text x="73.1535%" y="271.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (4 samples, 0.01%)</title><rect x="72.9360%" y="277" width="0.0144%" height="15" fill="rgb(211,56,53)" fg:x="20204" fg:w="4"/><text x="73.1860%" y="287.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::get (3 samples, 0.01%)</title><rect x="72.9901%" y="261" width="0.0108%" height="15" fill="rgb(226,201,30)" fg:x="20219" fg:w="3"/><text x="73.2401%" y="271.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::insert_slot (5 samples, 0.02%)</title><rect x="73.0010%" y="261" width="0.0180%" height="15" fill="rgb(239,101,34)" fg:x="20222" fg:w="5"/><text x="73.2510%" y="271.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::search_key (121 samples, 0.44%)</title><rect x="73.0190%" y="261" width="0.4368%" height="15" fill="rgb(226,209,5)" fg:x="20227" fg:w="121"/><text x="73.2690%" y="271.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::get (52 samples, 0.19%)</title><rect x="73.2681%" y="245" width="0.1877%" height="15" fill="rgb(250,105,47)" fg:x="20296" fg:w="52"/><text x="73.5181%" y="255.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcmp (18 samples, 0.06%)</title><rect x="73.4558%" y="261" width="0.0650%" height="15" fill="rgb(230,72,3)" fg:x="20348" fg:w="18"/><text x="73.7058%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (115 samples, 0.42%)</title><rect x="73.5208%" y="261" width="0.4151%" height="15" fill="rgb(232,218,39)" fg:x="20366" fg:w="115"/><text x="73.7708%" y="271.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::append (284 samples, 1.03%)</title><rect x="72.9504%" y="277" width="1.0252%" height="15" fill="rgb(248,166,6)" fg:x="20208" fg:w="284"/><text x="73.2004%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.04%)</title><rect x="73.9360%" y="261" width="0.0397%" height="15" fill="rgb(247,89,20)" fg:x="20481" fg:w="11"/><text x="74.1860%" y="271.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (4 samples, 0.01%)</title><rect x="73.9829%" y="261" width="0.0144%" height="15" fill="rgb(248,130,54)" fg:x="20494" fg:w="4"/><text x="74.2329%" y="271.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (12 samples, 0.04%)</title><rect x="73.9829%" y="277" width="0.0433%" height="15" fill="rgb(234,196,4)" fg:x="20494" fg:w="12"/><text x="74.2329%" y="287.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (8 samples, 0.03%)</title><rect x="73.9973%" y="261" width="0.0289%" height="15" fill="rgb(250,143,31)" fg:x="20498" fg:w="8"/><text x="74.2473%" y="271.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (4 samples, 0.01%)</title><rect x="74.0298%" y="261" width="0.0144%" height="15" fill="rgb(211,110,34)" fg:x="20507" fg:w="4"/><text x="74.2798%" y="271.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_val (7 samples, 0.03%)</title><rect x="74.0262%" y="277" width="0.0253%" height="15" fill="rgb(215,124,48)" fg:x="20506" fg:w="7"/><text x="74.2762%" y="287.50"></text></g><g><title>benchmark_queries`fbtree::access_method::sorted_run_store::SortedRunStore&lt;T&gt;::new (523 samples, 1.89%)</title><rect x="72.6616%" y="293" width="1.8880%" height="15" fill="rgb(216,46,13)" fg:x="20128" fg:w="523"/><text x="72.9116%" y="303.50">b..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (136 samples, 0.49%)</title><rect x="74.0587%" y="277" width="0.4910%" height="15" fill="rgb(205,184,25)" fg:x="20515" fg:w="136"/><text x="74.3087%" y="287.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::append_only_store::append_only_page::AppendOnlyPage&gt;::get (7 samples, 0.03%)</title><rect x="74.6110%" y="229" width="0.0253%" height="15" fill="rgb(228,1,10)" fg:x="20668" fg:w="7"/><text x="74.8610%" y="239.50"></text></g><g><title>benchmark_queries`fbtree::access_method::append_only_store::AppendOnlyStore&lt;T&gt;::read_page (68 samples, 0.25%)</title><rect x="74.6399%" y="229" width="0.2455%" height="15" fill="rgb(213,116,27)" fg:x="20676" fg:w="68"/><text x="74.8899%" y="239.50"></text></g><g><title>benchmark_queries`&lt;fbtree::bp::buffer_pool::BufferPool as fbtree::bp::mem_pool_trait::MemPool&gt;::get_page_for_read (68 samples, 0.25%)</title><rect x="74.6399%" y="213" width="0.2455%" height="15" fill="rgb(241,95,50)" fg:x="20676" fg:w="68"/><text x="74.8899%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (7 samples, 0.03%)</title><rect x="74.8854%" y="229" width="0.0253%" height="15" fill="rgb(238,48,32)" fg:x="20744" fg:w="7"/><text x="75.1354%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (3 samples, 0.01%)</title><rect x="74.9287%" y="213" width="0.0108%" height="15" fill="rgb(235,113,49)" fg:x="20756" fg:w="3"/><text x="75.1787%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (5 samples, 0.02%)</title><rect x="74.9684%" y="197" width="0.0180%" height="15" fill="rgb(205,127,43)" fg:x="20767" fg:w="5"/><text x="75.2184%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (44 samples, 0.16%)</title><rect x="74.9107%" y="229" width="0.1588%" height="15" fill="rgb(250,162,2)" fg:x="20751" fg:w="44"/><text x="75.1607%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (36 samples, 0.13%)</title><rect x="74.9395%" y="213" width="0.1300%" height="15" fill="rgb(220,13,41)" fg:x="20759" fg:w="36"/><text x="75.1895%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (23 samples, 0.08%)</title><rect x="74.9865%" y="197" width="0.0830%" height="15" fill="rgb(249,221,25)" fg:x="20772" fg:w="23"/><text x="75.2365%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (11 samples, 0.04%)</title><rect x="75.0298%" y="181" width="0.0397%" height="15" fill="rgb(215,208,19)" fg:x="20784" fg:w="11"/><text x="75.2798%" y="191.50"></text></g><g><title>benchmark_queries`&lt;fbtree::access_method::append_only_store::AppendOnlyStoreScanner&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (129 samples, 0.47%)</title><rect x="74.6074%" y="245" width="0.4657%" height="15" fill="rgb(236,175,2)" fg:x="20667" fg:w="129"/><text x="74.8574%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.03%)</title><rect x="75.0875%" y="245" width="0.0325%" height="15" fill="rgb(241,52,2)" fg:x="20800" fg:w="9"/><text x="75.3375%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.05%)</title><rect x="75.1200%" y="245" width="0.0505%" height="15" fill="rgb(248,140,14)" fg:x="20809" fg:w="14"/><text x="75.3700%" y="255.50"></text></g><g><title>benchmark_queries`&lt;fbtree::txn_storage::ondisk::OnDiskStorage&lt;M&gt; as fbtree::txn_storage::txn_storage_trait::TxnStorageTrait&gt;::iter_next (169 samples, 0.61%)</title><rect x="74.5894%" y="261" width="0.6101%" height="15" fill="rgb(253,22,42)" fg:x="20662" fg:w="169"/><text x="74.8394%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (8 samples, 0.03%)</title><rect x="75.1706%" y="245" width="0.0289%" height="15" fill="rgb(234,61,47)" fg:x="20823" fg:w="8"/><text x="75.4206%" y="255.50"></text></g><g><title>benchmark_queries`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (5 samples, 0.02%)</title><rect x="75.1995%" y="261" width="0.0180%" height="15" fill="rgb(208,226,15)" fg:x="20831" fg:w="5"/><text x="75.4495%" y="271.50"></text></g><g><title>benchmark_queries`&lt;query_exec::tuple::_::&lt;impl serde::de::Deserialize for query_exec::tuple::Field&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (12 samples, 0.04%)</title><rect x="75.2247%" y="245" width="0.0433%" height="15" fill="rgb(217,221,4)" fg:x="20838" fg:w="12"/><text x="75.4747%" y="255.50"></text></g><g><title>benchmark_queries`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_option (10 samples, 0.04%)</title><rect x="75.4485%" y="229" width="0.0361%" height="15" fill="rgb(212,174,34)" fg:x="20900" fg:w="10"/><text x="75.6985%" y="239.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcmp (5 samples, 0.02%)</title><rect x="75.8709%" y="165" width="0.0180%" height="15" fill="rgb(253,83,4)" fg:x="21017" fg:w="5"/><text x="76.1209%" y="175.50"></text></g><g><title>benchmark_queries`chrono::format::parse::parse_internal (134 samples, 0.48%)</title><rect x="75.8890%" y="165" width="0.4837%" height="15" fill="rgb(250,195,49)" fg:x="21022" fg:w="134"/><text x="76.1390%" y="175.50"></text></g><g><title>benchmark_queries`chrono::format::parsed::Parsed::set_day (9 samples, 0.03%)</title><rect x="76.3727%" y="165" width="0.0325%" height="15" fill="rgb(241,192,25)" fg:x="21156" fg:w="9"/><text x="76.6227%" y="175.50"></text></g><g><title>benchmark_queries`chrono::format::parsed::Parsed::set_month (4 samples, 0.01%)</title><rect x="76.4052%" y="165" width="0.0144%" height="15" fill="rgb(208,124,10)" fg:x="21165" fg:w="4"/><text x="76.6552%" y="175.50"></text></g><g><title>benchmark_queries`chrono::format::parsed::Parsed::set_year (4 samples, 0.01%)</title><rect x="76.4196%" y="165" width="0.0144%" height="15" fill="rgb(222,33,0)" fg:x="21169" fg:w="4"/><text x="76.6696%" y="175.50"></text></g><g><title>benchmark_queries`chrono::format::parsed::Parsed::to_naive_date (19 samples, 0.07%)</title><rect x="76.4341%" y="165" width="0.0686%" height="15" fill="rgb(234,209,28)" fg:x="21173" fg:w="19"/><text x="76.6841%" y="175.50"></text></g><g><title>benchmark_queries`chrono::format::parsed::Parsed::to_naive_date::_{{closure}} (86 samples, 0.31%)</title><rect x="76.5027%" y="165" width="0.3105%" height="15" fill="rgb(224,11,23)" fg:x="21192" fg:w="86"/><text x="76.7527%" y="175.50"></text></g><g><title>benchmark_queries`core::str::_&lt;impl str&gt;::trim_start_matches (38 samples, 0.14%)</title><rect x="76.8131%" y="165" width="0.1372%" height="15" fill="rgb(232,99,1)" fg:x="21278" fg:w="38"/><text x="77.0631%" y="175.50"></text></g><g><title>benchmark_queries`&lt;chrono::naive::date::NaiveDate as core::str::traits::FromStr&gt;::from_str (329 samples, 1.19%)</title><rect x="75.8276%" y="181" width="1.1877%" height="15" fill="rgb(237,95,45)" fg:x="21005" fg:w="329"/><text x="76.0776%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (18 samples, 0.06%)</title><rect x="76.9503%" y="165" width="0.0650%" height="15" fill="rgb(208,109,11)" fg:x="21316" fg:w="18"/><text x="77.2003%" y="175.50"></text></g><g><title>benchmark_queries`chrono::format::parse::parse_internal (10 samples, 0.04%)</title><rect x="77.0153%" y="181" width="0.0361%" height="15" fill="rgb(216,190,48)" fg:x="21334" fg:w="10"/><text x="77.2653%" y="191.50"></text></g><g><title>benchmark_queries`chrono::format::parsed::Parsed::to_naive_date (3 samples, 0.01%)</title><rect x="77.0514%" y="181" width="0.0108%" height="15" fill="rgb(251,171,36)" fg:x="21344" fg:w="3"/><text x="77.3014%" y="191.50"></text></g><g><title>benchmark_queries`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_str (390 samples, 1.41%)</title><rect x="75.7987%" y="197" width="1.4079%" height="15" fill="rgb(230,62,22)" fg:x="20997" fg:w="390"/><text x="76.0487%" y="207.50"></text></g><g><title>benchmark_queries`core::str::converts::from_utf8 (40 samples, 0.14%)</title><rect x="77.0622%" y="181" width="0.1444%" height="15" fill="rgb(225,114,35)" fg:x="21347" fg:w="40"/><text x="77.3122%" y="191.50"></text></g><g><title>benchmark_queries`core::str::converts::from_utf8 (41 samples, 0.15%)</title><rect x="77.2535%" y="181" width="0.1480%" height="15" fill="rgb(215,118,42)" fg:x="21400" fg:w="41"/><text x="77.5035%" y="191.50"></text></g><g><title>benchmark_queries`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_string (141 samples, 0.51%)</title><rect x="77.2066%" y="197" width="0.5090%" height="15" fill="rgb(243,119,21)" fg:x="21387" fg:w="141"/><text x="77.4566%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (87 samples, 0.31%)</title><rect x="77.4015%" y="181" width="0.3141%" height="15" fill="rgb(252,177,53)" fg:x="21441" fg:w="87"/><text x="77.6515%" y="191.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$malloc (3 samples, 0.01%)</title><rect x="77.7156%" y="197" width="0.0108%" height="15" fill="rgb(237,209,29)" fg:x="21528" fg:w="3"/><text x="77.9656%" y="207.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcpy (3 samples, 0.01%)</title><rect x="77.7264%" y="197" width="0.0108%" height="15" fill="rgb(212,65,23)" fg:x="21531" fg:w="3"/><text x="77.9764%" y="207.50"></text></g><g><title>benchmark_queries`__rdl_alloc (3 samples, 0.01%)</title><rect x="77.7373%" y="197" width="0.0108%" height="15" fill="rgb(230,222,46)" fg:x="21534" fg:w="3"/><text x="77.9873%" y="207.50"></text></g><g><title>benchmark_queries`bincode::config::int::cast_u64_to_usize (4 samples, 0.01%)</title><rect x="77.7481%" y="197" width="0.0144%" height="15" fill="rgb(215,135,32)" fg:x="21537" fg:w="4"/><text x="77.9981%" y="207.50"></text></g><g><title>benchmark_queries`core::str::converts::from_utf8 (4 samples, 0.01%)</title><rect x="77.7625%" y="197" width="0.0144%" height="15" fill="rgb(246,101,22)" fg:x="21541" fg:w="4"/><text x="78.0125%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.05%)</title><rect x="77.7770%" y="197" width="0.0541%" height="15" fill="rgb(206,107,13)" fg:x="21545" fg:w="15"/><text x="78.0270%" y="207.50"></text></g><g><title>benchmark_queries`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_option (634 samples, 2.29%)</title><rect x="75.6940%" y="213" width="2.2887%" height="15" fill="rgb(250,100,44)" fg:x="20968" fg:w="634"/><text x="75.9440%" y="223.50">b..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (42 samples, 0.15%)</title><rect x="77.8311%" y="197" width="0.1516%" height="15" fill="rgb(231,147,38)" fg:x="21560" fg:w="42"/><text x="78.0811%" y="207.50"></text></g><g><title>benchmark_queries`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_str (3 samples, 0.01%)</title><rect x="77.9827%" y="213" width="0.0108%" height="15" fill="rgb(229,8,40)" fg:x="21602" fg:w="3"/><text x="78.2327%" y="223.50"></text></g><g><title>benchmark_queries`&lt;query_exec::tuple::_::&lt;impl serde::de::Deserialize for query_exec::tuple::Field&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (702 samples, 2.53%)</title><rect x="75.4846%" y="229" width="2.5342%" height="15" fill="rgb(221,135,30)" fg:x="20910" fg:w="702"/><text x="75.7346%" y="239.50">be..</text></g><g><title>benchmark_queries`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_string (7 samples, 0.03%)</title><rect x="77.9936%" y="213" width="0.0253%" height="15" fill="rgb(249,193,18)" fg:x="21605" fg:w="7"/><text x="78.2436%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (3 samples, 0.01%)</title><rect x="78.0188%" y="213" width="0.0108%" height="15" fill="rgb(209,133,39)" fg:x="21612" fg:w="3"/><text x="78.2688%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (7 samples, 0.03%)</title><rect x="78.0549%" y="197" width="0.0253%" height="15" fill="rgb(232,100,14)" fg:x="21622" fg:w="7"/><text x="78.3049%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (26 samples, 0.09%)</title><rect x="78.0188%" y="229" width="0.0939%" height="15" fill="rgb(224,185,1)" fg:x="21612" fg:w="26"/><text x="78.2688%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (22 samples, 0.08%)</title><rect x="78.0333%" y="213" width="0.0794%" height="15" fill="rgb(223,139,8)" fg:x="21616" fg:w="22"/><text x="78.2833%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (9 samples, 0.03%)</title><rect x="78.0802%" y="197" width="0.0325%" height="15" fill="rgb(232,213,38)" fg:x="21629" fg:w="9"/><text x="78.3302%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (3 samples, 0.01%)</title><rect x="78.1019%" y="181" width="0.0108%" height="15" fill="rgb(207,94,22)" fg:x="21635" fg:w="3"/><text x="78.3519%" y="191.50"></text></g><g><title>benchmark_queries`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (790 samples, 2.85%)</title><rect x="75.2680%" y="245" width="2.8519%" height="15" fill="rgb(219,183,54)" fg:x="20850" fg:w="790"/><text x="75.5180%" y="255.50">be..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.02%)</title><rect x="78.1271%" y="245" width="0.0180%" height="15" fill="rgb(216,185,54)" fg:x="21642" fg:w="5"/><text x="78.3771%" y="255.50"></text></g><g><title>benchmark_queries`query_exec::tuple::Tuple::from_bytes (812 samples, 2.93%)</title><rect x="75.2211%" y="261" width="2.9313%" height="15" fill="rgb(254,217,39)" fg:x="20837" fg:w="812"/><text x="75.4711%" y="271.50">be..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.02%)</title><rect x="78.1560%" y="261" width="0.0217%" height="15" fill="rgb(240,178,23)" fg:x="21650" fg:w="6"/><text x="78.4060%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.02%)</title><rect x="78.3004%" y="229" width="0.0180%" height="15" fill="rgb(218,11,47)" fg:x="21690" fg:w="5"/><text x="78.5504%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (43 samples, 0.16%)</title><rect x="78.1849%" y="261" width="0.1552%" height="15" fill="rgb(218,51,51)" fg:x="21658" fg:w="43"/><text x="78.4349%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (34 samples, 0.12%)</title><rect x="78.2174%" y="245" width="0.1227%" height="15" fill="rgb(238,126,27)" fg:x="21667" fg:w="34"/><text x="78.4674%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (6 samples, 0.02%)</title><rect x="78.3185%" y="229" width="0.0217%" height="15" fill="rgb(249,202,22)" fg:x="21695" fg:w="6"/><text x="78.5685%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.01%)</title><rect x="78.3401%" y="261" width="0.0108%" height="15" fill="rgb(254,195,49)" fg:x="21701" fg:w="3"/><text x="78.5901%" y="271.50"></text></g><g><title>benchmark_queries`&lt;query_exec::executor::ondisk_pipeline::disk_buffer::OnDiskBufferIter&lt;T,M&gt; as query_exec::executor::TupleBufferIter&gt;::next (1,057 samples, 3.82%)</title><rect x="74.5605%" y="277" width="3.8157%" height="15" fill="rgb(208,123,14)" fg:x="20654" fg:w="1057"/><text x="74.8105%" y="287.50">benc..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (5 samples, 0.02%)</title><rect x="78.3582%" y="261" width="0.0180%" height="15" fill="rgb(224,200,8)" fg:x="21706" fg:w="5"/><text x="78.6082%" y="271.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$free (6 samples, 0.02%)</title><rect x="78.3762%" y="277" width="0.0217%" height="15" fill="rgb(217,61,36)" fg:x="21711" fg:w="6"/><text x="78.6262%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.01%)</title><rect x="78.6578%" y="261" width="0.0108%" height="15" fill="rgb(206,35,45)" fg:x="21789" fg:w="3"/><text x="78.9078%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (25 samples, 0.09%)</title><rect x="78.6686%" y="261" width="0.0902%" height="15" fill="rgb(217,65,33)" fg:x="21792" fg:w="25"/><text x="78.9186%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (16 samples, 0.06%)</title><rect x="78.7011%" y="245" width="0.0578%" height="15" fill="rgb(222,158,48)" fg:x="21801" fg:w="16"/><text x="78.9511%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (4 samples, 0.01%)</title><rect x="78.7986%" y="229" width="0.0144%" height="15" fill="rgb(254,2,54)" fg:x="21828" fg:w="4"/><text x="79.0486%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (20 samples, 0.07%)</title><rect x="78.7625%" y="261" width="0.0722%" height="15" fill="rgb(250,143,38)" fg:x="21818" fg:w="20"/><text x="79.0125%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (15 samples, 0.05%)</title><rect x="78.7805%" y="245" width="0.0541%" height="15" fill="rgb(248,25,0)" fg:x="21823" fg:w="15"/><text x="79.0305%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.02%)</title><rect x="78.8130%" y="229" width="0.0217%" height="15" fill="rgb(206,152,27)" fg:x="21832" fg:w="6"/><text x="79.0630%" y="239.50"></text></g><g><title>benchmark_queries`query_exec::tuple::Tuple::project (128 samples, 0.46%)</title><rect x="78.4051%" y="277" width="0.4621%" height="15" fill="rgb(240,77,30)" fg:x="21719" fg:w="128"/><text x="78.6551%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.03%)</title><rect x="78.8419%" y="261" width="0.0253%" height="15" fill="rgb(231,5,3)" fg:x="21840" fg:w="7"/><text x="79.0919%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_free (12 samples, 0.04%)</title><rect x="78.8672%" y="277" width="0.0433%" height="15" fill="rgb(207,226,32)" fg:x="21847" fg:w="12"/><text x="79.1172%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.01%)</title><rect x="78.9177%" y="277" width="0.0144%" height="15" fill="rgb(222,207,47)" fg:x="21861" fg:w="4"/><text x="79.1677%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (5 samples, 0.02%)</title><rect x="78.9322%" y="277" width="0.0180%" height="15" fill="rgb(229,115,45)" fg:x="21865" fg:w="5"/><text x="79.1822%" y="287.50"></text></g><g><title>benchmark_queries`query_exec::executor::ondisk_pipeline::NonBlockingOp&lt;T,M&gt;::next (1,226 samples, 4.43%)</title><rect x="74.5497%" y="293" width="4.4258%" height="15" fill="rgb(224,191,6)" fg:x="20651" fg:w="1226"/><text x="74.7997%" y="303.50">bench..</text></g><g><title>benchmark_queries`&lt;fbtree::bp::buffer_pool::BufferPool as fbtree::bp::mem_pool_trait::MemPool&gt;::create_new_page_for_write (7 samples, 0.03%)</title><rect x="78.9971%" y="277" width="0.0253%" height="15" fill="rgb(230,227,24)" fg:x="21883" fg:w="7"/><text x="79.2471%" y="287.50"></text></g><g><title>benchmark_queries`fbtree::bp::buffer_pool::BufferPool::handle_page_fault (4 samples, 0.01%)</title><rect x="79.0080%" y="261" width="0.0144%" height="15" fill="rgb(228,80,19)" fg:x="21886" fg:w="4"/><text x="79.2580%" y="271.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (4 samples, 0.01%)</title><rect x="79.0224%" y="277" width="0.0144%" height="15" fill="rgb(247,229,0)" fg:x="21890" fg:w="4"/><text x="79.2724%" y="287.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (5 samples, 0.02%)</title><rect x="79.0730%" y="261" width="0.0180%" height="15" fill="rgb(237,194,15)" fg:x="21904" fg:w="5"/><text x="79.3230%" y="271.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::DerefMut&gt;::deref_mut (3 samples, 0.01%)</title><rect x="79.0910%" y="261" width="0.0108%" height="15" fill="rgb(219,203,20)" fg:x="21909" fg:w="3"/><text x="79.3410%" y="271.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::append (24 samples, 0.09%)</title><rect x="79.0369%" y="277" width="0.0866%" height="15" fill="rgb(234,128,8)" fg:x="21894" fg:w="24"/><text x="79.2869%" y="287.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::append_slot (6 samples, 0.02%)</title><rect x="79.1018%" y="261" width="0.0217%" height="15" fill="rgb(248,202,8)" fg:x="21912" fg:w="6"/><text x="79.3518%" y="271.50"></text></g><g><title>benchmark_queries`&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (10 samples, 0.04%)</title><rect x="79.1415%" y="261" width="0.0361%" height="15" fill="rgb(206,104,37)" fg:x="21923" fg:w="10"/><text x="79.3915%" y="271.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$free (5 samples, 0.02%)</title><rect x="79.4628%" y="229" width="0.0180%" height="15" fill="rgb(223,8,27)" fg:x="22012" fg:w="5"/><text x="79.7128%" y="239.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcpy (3 samples, 0.01%)</title><rect x="79.4809%" y="229" width="0.0108%" height="15" fill="rgb(216,217,28)" fg:x="22017" fg:w="3"/><text x="79.7309%" y="239.50"></text></g><g><title>benchmark_queries`&lt;alloc::string::String as core::fmt::Write&gt;::write_char (31 samples, 0.11%)</title><rect x="79.5350%" y="213" width="0.1119%" height="15" fill="rgb(249,199,1)" fg:x="22032" fg:w="31"/><text x="79.7850%" y="223.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$malloc (3 samples, 0.01%)</title><rect x="79.8166%" y="165" width="0.0108%" height="15" fill="rgb(240,85,17)" fg:x="22110" fg:w="3"/><text x="80.0666%" y="175.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$realloc (3 samples, 0.01%)</title><rect x="79.8274%" y="165" width="0.0108%" height="15" fill="rgb(206,108,45)" fg:x="22113" fg:w="3"/><text x="80.0774%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.02%)</title><rect x="79.9827%" y="117" width="0.0180%" height="15" fill="rgb(245,210,41)" fg:x="22156" fg:w="5"/><text x="80.2327%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (30 samples, 0.11%)</title><rect x="79.9069%" y="133" width="0.1083%" height="15" fill="rgb(206,13,37)" fg:x="22135" fg:w="30"/><text x="80.1569%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (4 samples, 0.01%)</title><rect x="80.0007%" y="117" width="0.0144%" height="15" fill="rgb(250,61,18)" fg:x="22161" fg:w="4"/><text x="80.2507%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (3 samples, 0.01%)</title><rect x="80.0152%" y="133" width="0.0108%" height="15" fill="rgb(235,172,48)" fg:x="22165" fg:w="3"/><text x="80.2652%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (48 samples, 0.17%)</title><rect x="79.8635%" y="149" width="0.1733%" height="15" fill="rgb(249,201,17)" fg:x="22123" fg:w="48"/><text x="80.1135%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.01%)</title><rect x="80.0260%" y="133" width="0.0108%" height="15" fill="rgb(219,208,6)" fg:x="22168" fg:w="3"/><text x="80.2760%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (17 samples, 0.06%)</title><rect x="80.0368%" y="149" width="0.0614%" height="15" fill="rgb(248,31,23)" fg:x="22171" fg:w="17"/><text x="80.2868%" y="159.50"></text></g><g><title>benchmark_queries`alloc::raw_vec::finish_grow (78 samples, 0.28%)</title><rect x="79.8419%" y="165" width="0.2816%" height="15" fill="rgb(245,15,42)" fg:x="22117" fg:w="78"/><text x="80.0919%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.03%)</title><rect x="80.0982%" y="149" width="0.0253%" height="15" fill="rgb(222,217,39)" fg:x="22188" fg:w="7"/><text x="80.3482%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.03%)</title><rect x="80.1235%" y="165" width="0.0253%" height="15" fill="rgb(210,219,27)" fg:x="22195" fg:w="7"/><text x="80.3735%" y="175.50"></text></g><g><title>benchmark_queries`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (109 samples, 0.39%)</title><rect x="79.7697%" y="181" width="0.3935%" height="15" fill="rgb(252,166,36)" fg:x="22097" fg:w="109"/><text x="80.0197%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (4 samples, 0.01%)</title><rect x="80.1487%" y="165" width="0.0144%" height="15" fill="rgb(245,132,34)" fg:x="22202" fg:w="4"/><text x="80.3987%" y="175.50"></text></g><g><title>benchmark_queries`&lt;alloc::string::String as core::fmt::Write&gt;::write_char (127 samples, 0.46%)</title><rect x="79.7155%" y="197" width="0.4585%" height="15" fill="rgb(236,54,3)" fg:x="22082" fg:w="127"/><text x="79.9655%" y="207.50"></text></g><g><title>benchmark_queries`alloc::raw_vec::finish_grow (3 samples, 0.01%)</title><rect x="80.1632%" y="181" width="0.0108%" height="15" fill="rgb(241,173,43)" fg:x="22206" fg:w="3"/><text x="80.4132%" y="191.50"></text></g><g><title>benchmark_queries`&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (19 samples, 0.07%)</title><rect x="80.1740%" y="197" width="0.0686%" height="15" fill="rgb(215,190,9)" fg:x="22209" fg:w="19"/><text x="80.4240%" y="207.50"></text></g><g><title>benchmark_queries`&lt;chrono::naive::date::NaiveDate as core::fmt::Debug&gt;::fmt (168 samples, 0.61%)</title><rect x="79.6469%" y="213" width="0.6065%" height="15" fill="rgb(242,101,16)" fg:x="22063" fg:w="168"/><text x="79.8969%" y="223.50"></text></g><g><title>benchmark_queries`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3 samples, 0.01%)</title><rect x="80.2426%" y="197" width="0.0108%" height="15" fill="rgb(223,190,21)" fg:x="22228" fg:w="3"/><text x="80.4926%" y="207.50"></text></g><g><title>benchmark_queries`serde::ser::Serializer::collect_str (236 samples, 0.85%)</title><rect x="79.4917%" y="229" width="0.8520%" height="15" fill="rgb(215,228,25)" fg:x="22020" fg:w="236"/><text x="79.7417%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (25 samples, 0.09%)</title><rect x="80.2534%" y="213" width="0.0902%" height="15" fill="rgb(225,36,22)" fg:x="22231" fg:w="25"/><text x="80.5034%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (7 samples, 0.03%)</title><rect x="80.3437%" y="229" width="0.0253%" height="15" fill="rgb(251,106,46)" fg:x="22256" fg:w="7"/><text x="80.5937%" y="239.50"></text></g><g><title>benchmark_queries`&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (308 samples, 1.11%)</title><rect x="79.3004%" y="245" width="1.1119%" height="15" fill="rgb(208,90,1)" fg:x="21967" fg:w="308"/><text x="79.5504%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.03%)</title><rect x="80.3834%" y="229" width="0.0289%" height="15" fill="rgb(243,10,4)" fg:x="22267" fg:w="8"/><text x="80.6334%" y="239.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcpy (3 samples, 0.01%)</title><rect x="80.4123%" y="245" width="0.0108%" height="15" fill="rgb(212,137,27)" fg:x="22275" fg:w="3"/><text x="80.6623%" y="255.50"></text></g><g><title>benchmark_queries`core::ptr::drop_in_place&lt;bincode::error::ErrorKind&gt; (7 samples, 0.03%)</title><rect x="80.4231%" y="245" width="0.0253%" height="15" fill="rgb(231,220,49)" fg:x="22278" fg:w="7"/><text x="80.6731%" y="255.50"></text></g><g><title>benchmark_queries`&lt;chrono::naive::date::NaiveDate as core::fmt::Debug&gt;::fmt (3 samples, 0.01%)</title><rect x="80.5819%" y="229" width="0.0108%" height="15" fill="rgb(237,96,20)" fg:x="22322" fg:w="3"/><text x="80.8319%" y="239.50"></text></g><g><title>benchmark_queries`&lt;alloc::string::String as core::fmt::Write&gt;::write_char (41 samples, 0.15%)</title><rect x="80.6108%" y="213" width="0.1480%" height="15" fill="rgb(239,229,30)" fg:x="22330" fg:w="41"/><text x="80.8608%" y="223.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$realloc (3 samples, 0.01%)</title><rect x="80.9790%" y="165" width="0.0108%" height="15" fill="rgb(219,65,33)" fg:x="22432" fg:w="3"/><text x="81.2290%" y="175.50"></text></g><g><title>benchmark_queries`__rdl_alloc (3 samples, 0.01%)</title><rect x="80.9899%" y="165" width="0.0108%" height="15" fill="rgb(243,134,7)" fg:x="22435" fg:w="3"/><text x="81.2399%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.04%)</title><rect x="81.1848%" y="117" width="0.0361%" height="15" fill="rgb(216,177,54)" fg:x="22489" fg:w="10"/><text x="81.4348%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (37 samples, 0.13%)</title><rect x="81.1018%" y="133" width="0.1336%" height="15" fill="rgb(211,160,20)" fg:x="22466" fg:w="37"/><text x="81.3518%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (4 samples, 0.01%)</title><rect x="81.2209%" y="117" width="0.0144%" height="15" fill="rgb(239,85,39)" fg:x="22499" fg:w="4"/><text x="81.4709%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (5 samples, 0.02%)</title><rect x="81.2353%" y="133" width="0.0180%" height="15" fill="rgb(232,125,22)" fg:x="22503" fg:w="5"/><text x="81.4853%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (59 samples, 0.21%)</title><rect x="81.0440%" y="149" width="0.2130%" height="15" fill="rgb(244,57,34)" fg:x="22450" fg:w="59"/><text x="81.2940%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (24 samples, 0.09%)</title><rect x="81.2570%" y="149" width="0.0866%" height="15" fill="rgb(214,203,32)" fg:x="22509" fg:w="24"/><text x="81.5070%" y="159.50"></text></g><g><title>benchmark_queries`alloc::raw_vec::finish_grow (105 samples, 0.38%)</title><rect x="81.0079%" y="165" width="0.3790%" height="15" fill="rgb(207,58,43)" fg:x="22440" fg:w="105"/><text x="81.2579%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (12 samples, 0.04%)</title><rect x="81.3436%" y="149" width="0.0433%" height="15" fill="rgb(215,193,15)" fg:x="22533" fg:w="12"/><text x="81.5936%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (21 samples, 0.08%)</title><rect x="81.3870%" y="165" width="0.0758%" height="15" fill="rgb(232,15,44)" fg:x="22545" fg:w="21"/><text x="81.6370%" y="175.50"></text></g><g><title>benchmark_queries`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (157 samples, 0.57%)</title><rect x="80.8996%" y="181" width="0.5668%" height="15" fill="rgb(212,3,48)" fg:x="22410" fg:w="157"/><text x="81.1496%" y="191.50"></text></g><g><title>benchmark_queries`&lt;alloc::string::String as core::fmt::Write&gt;::write_char (184 samples, 0.66%)</title><rect x="80.8094%" y="197" width="0.6642%" height="15" fill="rgb(218,128,7)" fg:x="22385" fg:w="184"/><text x="81.0594%" y="207.50"></text></g><g><title>benchmark_queries`&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (23 samples, 0.08%)</title><rect x="81.4736%" y="197" width="0.0830%" height="15" fill="rgb(226,216,39)" fg:x="22569" fg:w="23"/><text x="81.7236%" y="207.50"></text></g><g><title>benchmark_queries`&lt;chrono::naive::date::NaiveDate as core::fmt::Debug&gt;::fmt (227 samples, 0.82%)</title><rect x="80.7588%" y="213" width="0.8195%" height="15" fill="rgb(243,47,51)" fg:x="22371" fg:w="227"/><text x="81.0088%" y="223.50"></text></g><g><title>benchmark_queries`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (6 samples, 0.02%)</title><rect x="81.5566%" y="197" width="0.0217%" height="15" fill="rgb(241,183,40)" fg:x="22592" fg:w="6"/><text x="81.8066%" y="207.50"></text></g><g><title>benchmark_queries`serde::ser::Serializer::collect_str (290 samples, 1.05%)</title><rect x="80.5928%" y="229" width="1.0469%" height="15" fill="rgb(231,217,32)" fg:x="22325" fg:w="290"/><text x="80.8428%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (17 samples, 0.06%)</title><rect x="81.5783%" y="213" width="0.0614%" height="15" fill="rgb(229,61,38)" fg:x="22598" fg:w="17"/><text x="81.8283%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (8 samples, 0.03%)</title><rect x="81.6397%" y="229" width="0.0289%" height="15" fill="rgb(225,210,5)" fg:x="22615" fg:w="8"/><text x="81.8897%" y="239.50"></text></g><g><title>benchmark_queries`query_exec::tuple::_::_&lt;impl serde::ser::Serialize for query_exec::tuple::Field&gt;::serialize (339 samples, 1.22%)</title><rect x="80.4484%" y="245" width="1.2238%" height="15" fill="rgb(231,79,45)" fg:x="22285" fg:w="339"/><text x="80.6984%" y="255.50"></text></g><g><title>benchmark_queries`serde::ser::Serializer::collect_str (6 samples, 0.02%)</title><rect x="81.6721%" y="245" width="0.0217%" height="15" fill="rgb(224,100,7)" fg:x="22624" fg:w="6"/><text x="81.9221%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (6 samples, 0.02%)</title><rect x="81.7335%" y="213" width="0.0217%" height="15" fill="rgb(241,198,18)" fg:x="22641" fg:w="6"/><text x="81.9835%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (37 samples, 0.13%)</title><rect x="81.6974%" y="245" width="0.1336%" height="15" fill="rgb(252,97,53)" fg:x="22631" fg:w="37"/><text x="81.9474%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (29 samples, 0.10%)</title><rect x="81.7263%" y="229" width="0.1047%" height="15" fill="rgb(220,88,7)" fg:x="22639" fg:w="29"/><text x="81.9763%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (21 samples, 0.08%)</title><rect x="81.7552%" y="213" width="0.0758%" height="15" fill="rgb(213,176,14)" fg:x="22647" fg:w="21"/><text x="82.0052%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (10 samples, 0.04%)</title><rect x="81.7949%" y="197" width="0.0361%" height="15" fill="rgb(246,73,7)" fg:x="22658" fg:w="10"/><text x="82.0449%" y="207.50"></text></g><g><title>benchmark_queries`bincode::internal::serialize (774 samples, 2.79%)</title><rect x="79.1813%" y="261" width="2.7941%" height="15" fill="rgb(245,64,36)" fg:x="21934" fg:w="774"/><text x="79.4313%" y="271.50">be..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (38 samples, 0.14%)</title><rect x="81.8382%" y="245" width="0.1372%" height="15" fill="rgb(245,80,10)" fg:x="22670" fg:w="38"/><text x="82.0882%" y="255.50"></text></g><g><title>benchmark_queries`query_exec::tuple::_::_&lt;impl serde::ser::Serialize for query_exec::tuple::Field&gt;::serialize (44 samples, 0.16%)</title><rect x="81.9754%" y="261" width="0.1588%" height="15" fill="rgb(232,107,50)" fg:x="22708" fg:w="44"/><text x="82.2254%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.02%)</title><rect x="82.1342%" y="261" width="0.0217%" height="15" fill="rgb(253,3,0)" fg:x="22752" fg:w="6"/><text x="82.3842%" y="271.50"></text></g><g><title>benchmark_queries`query_exec::tuple::Tuple::to_bytes (837 samples, 3.02%)</title><rect x="79.1379%" y="277" width="3.0216%" height="15" fill="rgb(212,99,53)" fg:x="21922" fg:w="837"/><text x="79.3879%" y="287.50">ben..</text></g><g><title>libsystem_malloc.dylib`_realloc (17 samples, 0.06%)</title><rect x="82.2389%" y="229" width="0.0614%" height="15" fill="rgb(249,111,54)" fg:x="22781" fg:w="17"/><text x="82.4889%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (14 samples, 0.05%)</title><rect x="82.2497%" y="213" width="0.0505%" height="15" fill="rgb(249,55,30)" fg:x="22784" fg:w="14"/><text x="82.4997%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (6 samples, 0.02%)</title><rect x="82.2786%" y="197" width="0.0217%" height="15" fill="rgb(237,47,42)" fg:x="22792" fg:w="6"/><text x="82.5286%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (8 samples, 0.03%)</title><rect x="82.3003%" y="229" width="0.0289%" height="15" fill="rgb(211,20,18)" fg:x="22798" fg:w="8"/><text x="82.5503%" y="239.50"></text></g><g><title>benchmark_queries`alloc::raw_vec::finish_grow (29 samples, 0.10%)</title><rect x="82.2317%" y="245" width="0.1047%" height="15" fill="rgb(231,203,46)" fg:x="22779" fg:w="29"/><text x="82.4817%" y="255.50"></text></g><g><title>benchmark_queries`query_exec::tuple::Tuple::to_normalized_key_bytes (50 samples, 0.18%)</title><rect x="82.1595%" y="277" width="0.1805%" height="15" fill="rgb(237,142,3)" fg:x="22759" fg:w="50"/><text x="82.4095%" y="287.50"></text></g><g><title>benchmark_queries`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (34 samples, 0.12%)</title><rect x="82.2172%" y="261" width="0.1227%" height="15" fill="rgb(241,107,1)" fg:x="22775" fg:w="34"/><text x="82.4672%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (10 samples, 0.04%)</title><rect x="82.3400%" y="277" width="0.0361%" height="15" fill="rgb(229,83,13)" fg:x="22809" fg:w="10"/><text x="82.5900%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.01%)</title><rect x="82.3761%" y="277" width="0.0108%" height="15" fill="rgb(241,91,40)" fg:x="22819" fg:w="3"/><text x="82.6261%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.03%)</title><rect x="82.4627%" y="245" width="0.0253%" height="15" fill="rgb(225,3,45)" fg:x="22843" fg:w="7"/><text x="82.7127%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (32 samples, 0.12%)</title><rect x="82.3869%" y="277" width="0.1155%" height="15" fill="rgb(244,223,14)" fg:x="22822" fg:w="32"/><text x="82.6369%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (22 samples, 0.08%)</title><rect x="82.4230%" y="261" width="0.0794%" height="15" fill="rgb(224,124,37)" fg:x="22832" fg:w="22"/><text x="82.6730%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (4 samples, 0.01%)</title><rect x="82.4880%" y="245" width="0.0144%" height="15" fill="rgb(251,171,30)" fg:x="22850" fg:w="4"/><text x="82.7380%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.05%)</title><rect x="82.5060%" y="277" width="0.0469%" height="15" fill="rgb(236,46,54)" fg:x="22855" fg:w="13"/><text x="82.7560%" y="287.50"></text></g><g><title>benchmark_queries`query_exec::executor::ondisk_pipeline::sort::SortBuffer&lt;M&gt;::append (993 samples, 3.58%)</title><rect x="78.9755%" y="293" width="3.5847%" height="15" fill="rgb(245,213,5)" fg:x="21877" fg:w="993"/><text x="79.2255%" y="303.50">benc..</text></g><g><title>libsystem_malloc.dylib`_free (5 samples, 0.02%)</title><rect x="82.5746%" y="293" width="0.0180%" height="15" fill="rgb(230,144,27)" fg:x="22874" fg:w="5"/><text x="82.8246%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (81 samples, 0.29%)</title><rect x="82.5927%" y="293" width="0.2924%" height="15" fill="rgb(220,86,6)" fg:x="22879" fg:w="81"/><text x="82.8427%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (4 samples, 0.01%)</title><rect x="82.8851%" y="293" width="0.0144%" height="15" fill="rgb(240,20,13)" fg:x="22960" fg:w="4"/><text x="83.1351%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.01%)</title><rect x="83.0836%" y="261" width="0.0108%" height="15" fill="rgb(217,89,34)" fg:x="23015" fg:w="3"/><text x="83.3336%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (58 samples, 0.21%)</title><rect x="82.8995%" y="293" width="0.2094%" height="15" fill="rgb(229,13,5)" fg:x="22964" fg:w="58"/><text x="83.1495%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (50 samples, 0.18%)</title><rect x="82.9284%" y="277" width="0.1805%" height="15" fill="rgb(244,67,35)" fg:x="22972" fg:w="50"/><text x="83.1784%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (4 samples, 0.01%)</title><rect x="83.0945%" y="261" width="0.0144%" height="15" fill="rgb(221,40,2)" fg:x="23018" fg:w="4"/><text x="83.3445%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.01%)</title><rect x="83.1089%" y="293" width="0.0108%" height="15" fill="rgb(237,157,21)" fg:x="23022" fg:w="3"/><text x="83.3589%" y="303.50"></text></g><g><title>benchmark_queries`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3,433 samples, 12.39%)</title><rect x="70.7808%" y="309" width="12.3931%" height="15" fill="rgb(222,94,11)" fg:x="19607" fg:w="3433"/><text x="71.0308%" y="319.50">benchmark_queries`c..</text></g><g><title>libsystem_platform.dylib`_platform_memset (15 samples, 0.05%)</title><rect x="83.1197%" y="293" width="0.0541%" height="15" fill="rgb(249,113,6)" fg:x="23025" fg:w="15"/><text x="83.3697%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_free (27 samples, 0.10%)</title><rect x="83.1811%" y="309" width="0.0975%" height="15" fill="rgb(238,137,36)" fg:x="23042" fg:w="27"/><text x="83.4311%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.01%)</title><rect x="83.2786%" y="309" width="0.0108%" height="15" fill="rgb(210,102,26)" fg:x="23069" fg:w="3"/><text x="83.5286%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.01%)</title><rect x="83.2894%" y="309" width="0.0108%" height="15" fill="rgb(218,30,30)" fg:x="23072" fg:w="3"/><text x="83.5394%" y="319.50"></text></g><g><title>benchmark_queries`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3,482 samples, 12.57%)</title><rect x="70.7375%" y="325" width="12.5699%" height="15" fill="rgb(214,67,26)" fg:x="19595" fg:w="3482"/><text x="70.9875%" y="335.50">benchmark_queries`&lt;..</text></g><g><title>benchmark_queries`DYLD-STUB$$free (6 samples, 0.02%)</title><rect x="83.3075%" y="261" width="0.0217%" height="15" fill="rgb(251,9,53)" fg:x="23077" fg:w="6"/><text x="83.5575%" y="271.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::append (3 samples, 0.01%)</title><rect x="83.3652%" y="245" width="0.0108%" height="15" fill="rgb(228,204,25)" fg:x="23093" fg:w="3"/><text x="83.6152%" y="255.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (10 samples, 0.04%)</title><rect x="83.3869%" y="213" width="0.0361%" height="15" fill="rgb(207,153,8)" fg:x="23099" fg:w="10"/><text x="83.6369%" y="223.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcmp (3 samples, 0.01%)</title><rect x="83.4230%" y="213" width="0.0108%" height="15" fill="rgb(242,9,16)" fg:x="23109" fg:w="3"/><text x="83.6730%" y="223.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (7 samples, 0.03%)</title><rect x="83.5421%" y="181" width="0.0253%" height="15" fill="rgb(217,211,10)" fg:x="23142" fg:w="7"/><text x="83.7921%" y="191.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (18 samples, 0.06%)</title><rect x="83.5168%" y="197" width="0.0650%" height="15" fill="rgb(219,228,52)" fg:x="23135" fg:w="18"/><text x="83.7668%" y="207.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (4 samples, 0.01%)</title><rect x="83.5674%" y="181" width="0.0144%" height="15" fill="rgb(231,92,29)" fg:x="23149" fg:w="4"/><text x="83.8174%" y="191.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (5 samples, 0.02%)</title><rect x="83.6071%" y="181" width="0.0180%" height="15" fill="rgb(232,8,23)" fg:x="23160" fg:w="5"/><text x="83.8571%" y="191.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (5 samples, 0.02%)</title><rect x="83.6251%" y="181" width="0.0180%" height="15" fill="rgb(216,211,34)" fg:x="23165" fg:w="5"/><text x="83.8751%" y="191.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (8 samples, 0.03%)</title><rect x="83.6540%" y="165" width="0.0289%" height="15" fill="rgb(236,151,0)" fg:x="23173" fg:w="8"/><text x="83.9040%" y="175.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (3 samples, 0.01%)</title><rect x="83.6721%" y="149" width="0.0108%" height="15" fill="rgb(209,168,3)" fg:x="23178" fg:w="3"/><text x="83.9221%" y="159.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (3 samples, 0.01%)</title><rect x="83.6829%" y="165" width="0.0108%" height="15" fill="rgb(208,129,28)" fg:x="23181" fg:w="3"/><text x="83.9329%" y="175.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (3 samples, 0.01%)</title><rect x="83.6973%" y="165" width="0.0108%" height="15" fill="rgb(229,78,22)" fg:x="23185" fg:w="3"/><text x="83.9473%" y="175.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (5 samples, 0.02%)</title><rect x="83.7407%" y="133" width="0.0180%" height="15" fill="rgb(228,187,13)" fg:x="23197" fg:w="5"/><text x="83.9907%" y="143.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (10 samples, 0.04%)</title><rect x="83.7262%" y="149" width="0.0361%" height="15" fill="rgb(240,119,24)" fg:x="23193" fg:w="10"/><text x="83.9762%" y="159.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (6 samples, 0.02%)</title><rect x="83.7659%" y="149" width="0.0217%" height="15" fill="rgb(209,194,42)" fg:x="23204" fg:w="6"/><text x="84.0159%" y="159.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (3 samples, 0.01%)</title><rect x="83.8056%" y="117" width="0.0108%" height="15" fill="rgb(247,200,46)" fg:x="23215" fg:w="3"/><text x="84.0556%" y="127.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (6 samples, 0.02%)</title><rect x="83.7984%" y="133" width="0.0217%" height="15" fill="rgb(218,76,16)" fg:x="23213" fg:w="6"/><text x="84.0484%" y="143.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::bidirectional_merge (3 samples, 0.01%)</title><rect x="83.8345%" y="117" width="0.0108%" height="15" fill="rgb(225,21,48)" fg:x="23223" fg:w="3"/><text x="84.0845%" y="127.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (5 samples, 0.02%)</title><rect x="83.8345%" y="133" width="0.0180%" height="15" fill="rgb(239,223,50)" fg:x="23223" fg:w="5"/><text x="84.0845%" y="143.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (3 samples, 0.01%)</title><rect x="83.8598%" y="117" width="0.0108%" height="15" fill="rgb(244,45,21)" fg:x="23230" fg:w="3"/><text x="84.1098%" y="127.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::bidirectional_merge (3 samples, 0.01%)</title><rect x="83.8814%" y="101" width="0.0108%" height="15" fill="rgb(232,33,43)" fg:x="23236" fg:w="3"/><text x="84.1314%" y="111.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::insert_tail (4 samples, 0.01%)</title><rect x="83.8923%" y="101" width="0.0144%" height="15" fill="rgb(209,8,3)" fg:x="23239" fg:w="4"/><text x="84.1423%" y="111.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (17 samples, 0.06%)</title><rect x="83.8778%" y="117" width="0.0614%" height="15" fill="rgb(214,25,53)" fg:x="23235" fg:w="17"/><text x="84.1278%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (8 samples, 0.03%)</title><rect x="83.9103%" y="101" width="0.0289%" height="15" fill="rgb(254,186,54)" fg:x="23244" fg:w="8"/><text x="84.1603%" y="111.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::bidirectional_merge (3 samples, 0.01%)</title><rect x="83.9681%" y="85" width="0.0108%" height="15" fill="rgb(208,174,49)" fg:x="23260" fg:w="3"/><text x="84.2181%" y="95.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (12 samples, 0.04%)</title><rect x="83.9645%" y="101" width="0.0433%" height="15" fill="rgb(233,191,51)" fg:x="23259" fg:w="12"/><text x="84.2145%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (4 samples, 0.01%)</title><rect x="83.9934%" y="85" width="0.0144%" height="15" fill="rgb(222,134,10)" fg:x="23267" fg:w="4"/><text x="84.2434%" y="95.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (9 samples, 0.03%)</title><rect x="84.0222%" y="85" width="0.0325%" height="15" fill="rgb(230,226,20)" fg:x="23275" fg:w="9"/><text x="84.2722%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (3 samples, 0.01%)</title><rect x="84.0439%" y="69" width="0.0108%" height="15" fill="rgb(251,111,25)" fg:x="23281" fg:w="3"/><text x="84.2939%" y="79.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (37 samples, 0.13%)</title><rect x="83.9392%" y="117" width="0.1336%" height="15" fill="rgb(224,40,46)" fg:x="23252" fg:w="37"/><text x="84.1892%" y="127.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (18 samples, 0.06%)</title><rect x="84.0078%" y="101" width="0.0650%" height="15" fill="rgb(236,108,47)" fg:x="23271" fg:w="18"/><text x="84.2578%" y="111.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (5 samples, 0.02%)</title><rect x="84.0547%" y="85" width="0.0180%" height="15" fill="rgb(234,93,0)" fg:x="23284" fg:w="5"/><text x="84.3047%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (3 samples, 0.01%)</title><rect x="84.0728%" y="117" width="0.0108%" height="15" fill="rgb(224,213,32)" fg:x="23289" fg:w="3"/><text x="84.3228%" y="127.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (65 samples, 0.23%)</title><rect x="83.8526%" y="133" width="0.2346%" height="15" fill="rgb(251,11,48)" fg:x="23228" fg:w="65"/><text x="84.1026%" y="143.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (84 samples, 0.30%)</title><rect x="83.7876%" y="149" width="0.3032%" height="15" fill="rgb(236,173,5)" fg:x="23210" fg:w="84"/><text x="84.0376%" y="159.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (115 samples, 0.42%)</title><rect x="83.7082%" y="165" width="0.4151%" height="15" fill="rgb(230,95,12)" fg:x="23188" fg:w="115"/><text x="83.9582%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (9 samples, 0.03%)</title><rect x="84.0908%" y="149" width="0.0325%" height="15" fill="rgb(232,209,1)" fg:x="23294" fg:w="9"/><text x="84.3408%" y="159.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (139 samples, 0.50%)</title><rect x="83.6432%" y="181" width="0.5018%" height="15" fill="rgb(232,6,1)" fg:x="23170" fg:w="139"/><text x="83.8932%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (6 samples, 0.02%)</title><rect x="84.1233%" y="165" width="0.0217%" height="15" fill="rgb(210,224,50)" fg:x="23303" fg:w="6"/><text x="84.3733%" y="175.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (160 samples, 0.58%)</title><rect x="83.5927%" y="197" width="0.5776%" height="15" fill="rgb(228,127,35)" fg:x="23156" fg:w="160"/><text x="83.8427%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (7 samples, 0.03%)</title><rect x="84.1450%" y="181" width="0.0253%" height="15" fill="rgb(245,102,45)" fg:x="23309" fg:w="7"/><text x="84.3950%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (8 samples, 0.03%)</title><rect x="84.1702%" y="197" width="0.0289%" height="15" fill="rgb(214,1,49)" fg:x="23316" fg:w="8"/><text x="84.4202%" y="207.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (213 samples, 0.77%)</title><rect x="83.4338%" y="213" width="0.7689%" height="15" fill="rgb(226,163,40)" fg:x="23112" fg:w="213"/><text x="83.6838%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (4 samples, 0.01%)</title><rect x="84.2027%" y="213" width="0.0144%" height="15" fill="rgb(239,212,28)" fg:x="23325" fg:w="4"/><text x="84.4527%" y="223.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::driftsort_main (232 samples, 0.84%)</title><rect x="83.3833%" y="245" width="0.8375%" height="15" fill="rgb(220,20,13)" fg:x="23098" fg:w="232"/><text x="83.6333%" y="255.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::drift::sort (232 samples, 0.84%)</title><rect x="83.3833%" y="229" width="0.8375%" height="15" fill="rgb(210,164,35)" fg:x="23098" fg:w="232"/><text x="83.6333%" y="239.50"></text></g><g><title>benchmark_queries`fbtree::bp::buffer_pool::BufferPool::handle_page_fault (5 samples, 0.02%)</title><rect x="84.3580%" y="213" width="0.0180%" height="15" fill="rgb(248,109,41)" fg:x="23368" fg:w="5"/><text x="84.6080%" y="223.50"></text></g><g><title>benchmark_queries`&lt;fbtree::bp::buffer_pool::BufferPool as fbtree::bp::mem_pool_trait::MemPool&gt;::create_new_page_for_write (47 samples, 0.17%)</title><rect x="84.2280%" y="229" width="0.1697%" height="15" fill="rgb(238,23,50)" fg:x="23332" fg:w="47"/><text x="84.4780%" y="239.50"></text></g><g><title>benchmark_queries`fbtree::file_manager::sync_write::FileManager::new (6 samples, 0.02%)</title><rect x="84.3760%" y="213" width="0.0217%" height="15" fill="rgb(211,48,49)" fg:x="23373" fg:w="6"/><text x="84.6260%" y="223.50"></text></g><g><title>benchmark_queries`std::fs::OpenOptions::_open (6 samples, 0.02%)</title><rect x="84.3760%" y="197" width="0.0217%" height="15" fill="rgb(223,36,21)" fg:x="23373" fg:w="6"/><text x="84.6260%" y="207.50"></text></g><g><title>benchmark_queries`std::sys::pal::unix::fs::File::open_c (6 samples, 0.02%)</title><rect x="84.3760%" y="181" width="0.0217%" height="15" fill="rgb(207,123,46)" fg:x="23373" fg:w="6"/><text x="84.6260%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__open (6 samples, 0.02%)</title><rect x="84.3760%" y="165" width="0.0217%" height="15" fill="rgb(240,218,32)" fg:x="23373" fg:w="6"/><text x="84.6260%" y="175.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::insert_slot (4 samples, 0.01%)</title><rect x="84.4157%" y="213" width="0.0144%" height="15" fill="rgb(252,5,43)" fg:x="23384" fg:w="4"/><text x="84.6657%" y="223.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::search_key (55 samples, 0.20%)</title><rect x="84.4302%" y="213" width="0.1985%" height="15" fill="rgb(252,84,19)" fg:x="23388" fg:w="55"/><text x="84.6802%" y="223.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::get (14 samples, 0.05%)</title><rect x="84.5782%" y="197" width="0.0505%" height="15" fill="rgb(243,152,39)" fg:x="23429" fg:w="14"/><text x="84.8282%" y="207.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcmp (4 samples, 0.01%)</title><rect x="84.6287%" y="213" width="0.0144%" height="15" fill="rgb(234,160,15)" fg:x="23443" fg:w="4"/><text x="84.8787%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (67 samples, 0.24%)</title><rect x="84.6432%" y="213" width="0.2419%" height="15" fill="rgb(237,34,20)" fg:x="23447" fg:w="67"/><text x="84.8932%" y="223.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::append (140 samples, 0.51%)</title><rect x="84.4049%" y="229" width="0.5054%" height="15" fill="rgb(229,97,13)" fg:x="23381" fg:w="140"/><text x="84.6549%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.03%)</title><rect x="84.8850%" y="213" width="0.0253%" height="15" fill="rgb(234,71,50)" fg:x="23514" fg:w="7"/><text x="85.1350%" y="223.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (6 samples, 0.02%)</title><rect x="84.9175%" y="229" width="0.0217%" height="15" fill="rgb(253,155,4)" fg:x="23523" fg:w="6"/><text x="85.1675%" y="239.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (4 samples, 0.01%)</title><rect x="84.9247%" y="213" width="0.0144%" height="15" fill="rgb(222,185,37)" fg:x="23525" fg:w="4"/><text x="85.1747%" y="223.50"></text></g><g><title>benchmark_queries`fbtree::access_method::sorted_run_store::SortedRunStore&lt;T&gt;::new (279 samples, 1.01%)</title><rect x="84.2208%" y="245" width="1.0072%" height="15" fill="rgb(251,177,13)" fg:x="23330" fg:w="279"/><text x="84.4708%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (77 samples, 0.28%)</title><rect x="84.9500%" y="229" width="0.2780%" height="15" fill="rgb(250,179,40)" fg:x="23532" fg:w="77"/><text x="85.2000%" y="239.50"></text></g><g><title>benchmark_queries`fbtree::access_method::append_only_store::AppendOnlyStore&lt;T&gt;::read_page (47 samples, 0.17%)</title><rect x="85.2785%" y="181" width="0.1697%" height="15" fill="rgb(242,44,2)" fg:x="23623" fg:w="47"/><text x="85.5285%" y="191.50"></text></g><g><title>benchmark_queries`&lt;fbtree::bp::buffer_pool::BufferPool as fbtree::bp::mem_pool_trait::MemPool&gt;::get_page_for_read (47 samples, 0.17%)</title><rect x="85.2785%" y="165" width="0.1697%" height="15" fill="rgb(216,177,13)" fg:x="23623" fg:w="47"/><text x="85.5285%" y="175.50"></text></g><g><title>benchmark_queries`fbtree::bp::buffer_pool::BufferPool::handle_page_fault (17 samples, 0.06%)</title><rect x="85.3868%" y="149" width="0.0614%" height="15" fill="rgb(216,106,43)" fg:x="23653" fg:w="17"/><text x="85.6368%" y="159.50"></text></g><g><title>benchmark_queries`fbtree::file_manager::sync_write::FileManager::read_page (17 samples, 0.06%)</title><rect x="85.3868%" y="133" width="0.0614%" height="15" fill="rgb(216,183,2)" fg:x="23653" fg:w="17"/><text x="85.6368%" y="143.50"></text></g><g><title>benchmark_queries`std::io::default_read_exact (17 samples, 0.06%)</title><rect x="85.3868%" y="117" width="0.0614%" height="15" fill="rgb(249,75,3)" fg:x="23653" fg:w="17"/><text x="85.6368%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`read (17 samples, 0.06%)</title><rect x="85.3868%" y="101" width="0.0614%" height="15" fill="rgb(219,67,39)" fg:x="23653" fg:w="17"/><text x="85.6368%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (4 samples, 0.01%)</title><rect x="85.4482%" y="181" width="0.0144%" height="15" fill="rgb(253,228,2)" fg:x="23670" fg:w="4"/><text x="85.6982%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (19 samples, 0.07%)</title><rect x="85.4626%" y="181" width="0.0686%" height="15" fill="rgb(235,138,27)" fg:x="23674" fg:w="19"/><text x="85.7126%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (15 samples, 0.05%)</title><rect x="85.4771%" y="165" width="0.0541%" height="15" fill="rgb(236,97,51)" fg:x="23678" fg:w="15"/><text x="85.7271%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (11 samples, 0.04%)</title><rect x="85.4915%" y="149" width="0.0397%" height="15" fill="rgb(240,80,30)" fg:x="23682" fg:w="11"/><text x="85.7415%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.01%)</title><rect x="85.5204%" y="133" width="0.0108%" height="15" fill="rgb(230,178,19)" fg:x="23690" fg:w="3"/><text x="85.7704%" y="143.50"></text></g><g><title>benchmark_queries`&lt;fbtree::access_method::append_only_store::AppendOnlyStoreScanner&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (76 samples, 0.27%)</title><rect x="85.2605%" y="197" width="0.2744%" height="15" fill="rgb(210,190,27)" fg:x="23618" fg:w="76"/><text x="85.5105%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.03%)</title><rect x="85.5493%" y="197" width="0.0253%" height="15" fill="rgb(222,107,31)" fg:x="23698" fg:w="7"/><text x="85.7993%" y="207.50"></text></g><g><title>benchmark_queries`&lt;fbtree::txn_storage::ondisk::OnDiskStorage&lt;M&gt; as fbtree::txn_storage::txn_storage_trait::TxnStorageTrait&gt;::iter_next (92 samples, 0.33%)</title><rect x="85.2460%" y="213" width="0.3321%" height="15" fill="rgb(216,127,34)" fg:x="23614" fg:w="92"/><text x="85.4960%" y="223.50"></text></g><g><title>benchmark_queries`&lt;query_exec::tuple::_::&lt;impl serde::de::Deserialize for query_exec::tuple::Field&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (10 samples, 0.04%)</title><rect x="85.5890%" y="197" width="0.0361%" height="15" fill="rgb(234,116,52)" fg:x="23709" fg:w="10"/><text x="85.8390%" y="207.50"></text></g><g><title>benchmark_queries`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_option (6 samples, 0.02%)</title><rect x="85.7370%" y="181" width="0.0217%" height="15" fill="rgb(222,124,15)" fg:x="23750" fg:w="6"/><text x="85.9870%" y="191.50"></text></g><g><title>benchmark_queries`chrono::format::parse::parse_internal (54 samples, 0.19%)</title><rect x="86.0149%" y="117" width="0.1949%" height="15" fill="rgb(231,179,28)" fg:x="23827" fg:w="54"/><text x="86.2649%" y="127.50"></text></g><g><title>benchmark_queries`chrono::format::parsed::Parsed::set_day (3 samples, 0.01%)</title><rect x="86.2099%" y="117" width="0.0108%" height="15" fill="rgb(226,93,45)" fg:x="23881" fg:w="3"/><text x="86.4599%" y="127.50"></text></g><g><title>benchmark_queries`chrono::format::parsed::Parsed::to_naive_date (4 samples, 0.01%)</title><rect x="86.2279%" y="117" width="0.0144%" height="15" fill="rgb(215,8,51)" fg:x="23886" fg:w="4"/><text x="86.4779%" y="127.50"></text></g><g><title>benchmark_queries`chrono::format::parsed::Parsed::to_naive_date::_{{closure}} (36 samples, 0.13%)</title><rect x="86.2424%" y="117" width="0.1300%" height="15" fill="rgb(223,106,5)" fg:x="23890" fg:w="36"/><text x="86.4924%" y="127.50"></text></g><g><title>benchmark_queries`core::str::_&lt;impl str&gt;::trim_start_matches (26 samples, 0.09%)</title><rect x="86.3723%" y="117" width="0.0939%" height="15" fill="rgb(250,191,5)" fg:x="23926" fg:w="26"/><text x="86.6223%" y="127.50"></text></g><g><title>benchmark_queries`&lt;chrono::naive::date::NaiveDate as core::str::traits::FromStr&gt;::from_str (133 samples, 0.48%)</title><rect x="86.0077%" y="133" width="0.4801%" height="15" fill="rgb(242,132,44)" fg:x="23825" fg:w="133"/><text x="86.2577%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (6 samples, 0.02%)</title><rect x="86.4662%" y="117" width="0.0217%" height="15" fill="rgb(251,152,29)" fg:x="23952" fg:w="6"/><text x="86.7162%" y="127.50"></text></g><g><title>benchmark_queries`chrono::format::parse::parse_internal (3 samples, 0.01%)</title><rect x="86.4879%" y="133" width="0.0108%" height="15" fill="rgb(218,179,5)" fg:x="23958" fg:w="3"/><text x="86.7379%" y="143.50"></text></g><g><title>benchmark_queries`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_str (162 samples, 0.58%)</title><rect x="85.9933%" y="149" width="0.5848%" height="15" fill="rgb(227,67,19)" fg:x="23821" fg:w="162"/><text x="86.2433%" y="159.50"></text></g><g><title>benchmark_queries`core::str::converts::from_utf8 (21 samples, 0.08%)</title><rect x="86.5023%" y="133" width="0.0758%" height="15" fill="rgb(233,119,31)" fg:x="23962" fg:w="21"/><text x="86.7523%" y="143.50"></text></g><g><title>benchmark_queries`core::str::converts::from_utf8 (18 samples, 0.06%)</title><rect x="86.6106%" y="133" width="0.0650%" height="15" fill="rgb(241,120,22)" fg:x="23992" fg:w="18"/><text x="86.8606%" y="143.50"></text></g><g><title>benchmark_queries`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_string (64 samples, 0.23%)</title><rect x="86.5781%" y="149" width="0.2310%" height="15" fill="rgb(224,102,30)" fg:x="23983" fg:w="64"/><text x="86.8281%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (37 samples, 0.13%)</title><rect x="86.6756%" y="133" width="0.1336%" height="15" fill="rgb(210,164,37)" fg:x="24010" fg:w="37"/><text x="86.9256%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.05%)</title><rect x="86.8236%" y="149" width="0.0541%" height="15" fill="rgb(226,191,16)" fg:x="24051" fg:w="15"/><text x="87.0736%" y="159.50"></text></g><g><title>benchmark_queries`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_option (278 samples, 1.00%)</title><rect x="85.9427%" y="165" width="1.0036%" height="15" fill="rgb(214,40,45)" fg:x="23807" fg:w="278"/><text x="86.1927%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (19 samples, 0.07%)</title><rect x="86.8777%" y="149" width="0.0686%" height="15" fill="rgb(244,29,26)" fg:x="24066" fg:w="19"/><text x="87.1277%" y="159.50"></text></g><g><title>benchmark_queries`&lt;query_exec::tuple::_::&lt;impl serde::de::Deserialize for query_exec::tuple::Field&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (332 samples, 1.20%)</title><rect x="85.7586%" y="181" width="1.1985%" height="15" fill="rgb(216,16,5)" fg:x="23756" fg:w="332"/><text x="86.0086%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (3 samples, 0.01%)</title><rect x="86.9644%" y="165" width="0.0108%" height="15" fill="rgb(249,76,35)" fg:x="24090" fg:w="3"/><text x="87.2144%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (16 samples, 0.06%)</title><rect x="86.9571%" y="181" width="0.0578%" height="15" fill="rgb(207,11,44)" fg:x="24088" fg:w="16"/><text x="87.2071%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.04%)</title><rect x="86.9752%" y="165" width="0.0397%" height="15" fill="rgb(228,190,49)" fg:x="24093" fg:w="11"/><text x="87.2252%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.02%)</title><rect x="86.9932%" y="149" width="0.0217%" height="15" fill="rgb(214,173,12)" fg:x="24098" fg:w="6"/><text x="87.2432%" y="159.50"></text></g><g><title>benchmark_queries`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (386 samples, 1.39%)</title><rect x="85.6251%" y="197" width="1.3935%" height="15" fill="rgb(218,26,35)" fg:x="23719" fg:w="386"/><text x="85.8751%" y="207.50"></text></g><g><title>benchmark_queries`query_exec::tuple::Tuple::from_bytes (399 samples, 1.44%)</title><rect x="85.5854%" y="213" width="1.4404%" height="15" fill="rgb(220,200,19)" fg:x="23708" fg:w="399"/><text x="85.8354%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.01%)</title><rect x="87.0293%" y="213" width="0.0108%" height="15" fill="rgb(239,95,49)" fg:x="24108" fg:w="3"/><text x="87.2793%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.01%)</title><rect x="87.1160%" y="181" width="0.0108%" height="15" fill="rgb(235,85,53)" fg:x="24132" fg:w="3"/><text x="87.3660%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (26 samples, 0.09%)</title><rect x="87.0438%" y="213" width="0.0939%" height="15" fill="rgb(233,133,31)" fg:x="24112" fg:w="26"/><text x="87.2938%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (21 samples, 0.08%)</title><rect x="87.0618%" y="197" width="0.0758%" height="15" fill="rgb(218,25,20)" fg:x="24117" fg:w="21"/><text x="87.3118%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (3 samples, 0.01%)</title><rect x="87.1268%" y="181" width="0.0108%" height="15" fill="rgb(252,210,38)" fg:x="24135" fg:w="3"/><text x="87.3768%" y="191.50"></text></g><g><title>benchmark_queries`&lt;query_exec::executor::ondisk_pipeline::disk_buffer::OnDiskBufferIter&lt;T,M&gt; as query_exec::executor::TupleBufferIter&gt;::next (530 samples, 1.91%)</title><rect x="85.2316%" y="229" width="1.9133%" height="15" fill="rgb(242,134,21)" fg:x="23610" fg:w="530"/><text x="85.4816%" y="239.50">b..</text></g><g><title>libsystem_malloc.dylib`free_tiny (12 samples, 0.04%)</title><rect x="87.2640%" y="213" width="0.0433%" height="15" fill="rgb(213,28,48)" fg:x="24173" fg:w="12"/><text x="87.5140%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.02%)</title><rect x="87.2893%" y="197" width="0.0180%" height="15" fill="rgb(250,196,2)" fg:x="24180" fg:w="5"/><text x="87.5393%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.01%)</title><rect x="87.2929%" y="181" width="0.0144%" height="15" fill="rgb(227,5,17)" fg:x="24181" fg:w="4"/><text x="87.5429%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (4 samples, 0.01%)</title><rect x="87.3362%" y="181" width="0.0144%" height="15" fill="rgb(221,226,24)" fg:x="24193" fg:w="4"/><text x="87.5862%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.05%)</title><rect x="87.3073%" y="213" width="0.0541%" height="15" fill="rgb(211,5,48)" fg:x="24185" fg:w="15"/><text x="87.5573%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13 samples, 0.05%)</title><rect x="87.3145%" y="197" width="0.0469%" height="15" fill="rgb(219,150,6)" fg:x="24187" fg:w="13"/><text x="87.5645%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.01%)</title><rect x="87.3506%" y="181" width="0.0108%" height="15" fill="rgb(251,46,16)" fg:x="24197" fg:w="3"/><text x="87.6006%" y="191.50"></text></g><g><title>benchmark_queries`query_exec::tuple::Tuple::project (59 samples, 0.21%)</title><rect x="87.1557%" y="229" width="0.2130%" height="15" fill="rgb(220,204,40)" fg:x="24143" fg:w="59"/><text x="87.4057%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_free (5 samples, 0.02%)</title><rect x="87.3687%" y="229" width="0.0180%" height="15" fill="rgb(211,85,2)" fg:x="24202" fg:w="5"/><text x="87.6187%" y="239.50"></text></g><g><title>benchmark_queries`query_exec::executor::ondisk_pipeline::NonBlockingOp&lt;T,M&gt;::next (604 samples, 2.18%)</title><rect x="85.2280%" y="245" width="2.1804%" height="15" fill="rgb(229,17,7)" fg:x="23609" fg:w="604"/><text x="85.4780%" y="255.50">b..</text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::append (10 samples, 0.04%)</title><rect x="87.4337%" y="229" width="0.0361%" height="15" fill="rgb(239,72,28)" fg:x="24220" fg:w="10"/><text x="87.6837%" y="239.50"></text></g><g><title>benchmark_queries`&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (9 samples, 0.03%)</title><rect x="87.4698%" y="213" width="0.0325%" height="15" fill="rgb(230,47,54)" fg:x="24230" fg:w="9"/><text x="87.7198%" y="223.50"></text></g><g><title>benchmark_queries`&lt;chrono::naive::date::NaiveDate as core::fmt::Debug&gt;::fmt (4 samples, 0.01%)</title><rect x="87.6539%" y="181" width="0.0144%" height="15" fill="rgb(214,50,8)" fg:x="24281" fg:w="4"/><text x="87.9039%" y="191.50"></text></g><g><title>benchmark_queries`&lt;alloc::string::String as core::fmt::Write&gt;::write_char (12 samples, 0.04%)</title><rect x="87.6936%" y="165" width="0.0433%" height="15" fill="rgb(216,198,43)" fg:x="24292" fg:w="12"/><text x="87.9436%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.03%)</title><rect x="87.9210%" y="69" width="0.0289%" height="15" fill="rgb(234,20,35)" fg:x="24355" fg:w="8"/><text x="88.1710%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (16 samples, 0.06%)</title><rect x="87.8957%" y="85" width="0.0578%" height="15" fill="rgb(254,45,19)" fg:x="24348" fg:w="16"/><text x="88.1457%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (27 samples, 0.10%)</title><rect x="87.8633%" y="101" width="0.0975%" height="15" fill="rgb(219,14,44)" fg:x="24339" fg:w="27"/><text x="88.1133%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (10 samples, 0.04%)</title><rect x="87.9607%" y="101" width="0.0361%" height="15" fill="rgb(217,220,26)" fg:x="24366" fg:w="10"/><text x="88.2107%" y="111.50"></text></g><g><title>benchmark_queries`alloc::raw_vec::finish_grow (49 samples, 0.18%)</title><rect x="87.8524%" y="117" width="0.1769%" height="15" fill="rgb(213,158,28)" fg:x="24336" fg:w="49"/><text x="88.1024%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (9 samples, 0.03%)</title><rect x="87.9968%" y="101" width="0.0325%" height="15" fill="rgb(252,51,52)" fg:x="24376" fg:w="9"/><text x="88.2468%" y="111.50"></text></g><g><title>benchmark_queries`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (62 samples, 0.22%)</title><rect x="87.8235%" y="133" width="0.2238%" height="15" fill="rgb(246,89,16)" fg:x="24328" fg:w="62"/><text x="88.0735%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.02%)</title><rect x="88.0293%" y="117" width="0.0180%" height="15" fill="rgb(216,158,49)" fg:x="24385" fg:w="5"/><text x="88.2793%" y="127.50"></text></g><g><title>benchmark_queries`&lt;alloc::string::String as core::fmt::Write&gt;::write_char (80 samples, 0.29%)</title><rect x="87.7622%" y="149" width="0.2888%" height="15" fill="rgb(236,107,19)" fg:x="24311" fg:w="80"/><text x="88.0122%" y="159.50"></text></g><g><title>benchmark_queries`&lt;chrono::naive::date::NaiveDate as core::fmt::Debug&gt;::fmt (93 samples, 0.34%)</title><rect x="87.7369%" y="165" width="0.3357%" height="15" fill="rgb(228,185,30)" fg:x="24304" fg:w="93"/><text x="87.9869%" y="175.50"></text></g><g><title>benchmark_queries`&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (6 samples, 0.02%)</title><rect x="88.0510%" y="149" width="0.0217%" height="15" fill="rgb(246,134,8)" fg:x="24391" fg:w="6"/><text x="88.3010%" y="159.50"></text></g><g><title>benchmark_queries`serde::ser::Serializer::collect_str (121 samples, 0.44%)</title><rect x="87.6719%" y="181" width="0.4368%" height="15" fill="rgb(214,143,50)" fg:x="24286" fg:w="121"/><text x="87.9219%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (10 samples, 0.04%)</title><rect x="88.0726%" y="165" width="0.0361%" height="15" fill="rgb(228,75,8)" fg:x="24397" fg:w="10"/><text x="88.3226%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_free (3 samples, 0.01%)</title><rect x="88.1087%" y="181" width="0.0108%" height="15" fill="rgb(207,175,4)" fg:x="24407" fg:w="3"/><text x="88.3587%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.01%)</title><rect x="88.1196%" y="181" width="0.0108%" height="15" fill="rgb(205,108,24)" fg:x="24410" fg:w="3"/><text x="88.3696%" y="191.50"></text></g><g><title>benchmark_queries`&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (161 samples, 0.58%)</title><rect x="87.5600%" y="197" width="0.5812%" height="15" fill="rgb(244,120,49)" fg:x="24255" fg:w="161"/><text x="87.8100%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.01%)</title><rect x="88.1304%" y="181" width="0.0108%" height="15" fill="rgb(223,47,38)" fg:x="24413" fg:w="3"/><text x="88.3804%" y="191.50"></text></g><g><title>benchmark_queries`core::ptr::drop_in_place&lt;bincode::error::ErrorKind&gt; (4 samples, 0.01%)</title><rect x="88.1484%" y="197" width="0.0144%" height="15" fill="rgb(229,179,11)" fg:x="24418" fg:w="4"/><text x="88.3984%" y="207.50"></text></g><g><title>benchmark_queries`&lt;alloc::string::String as core::fmt::Write&gt;::write_char (24 samples, 0.09%)</title><rect x="88.2676%" y="165" width="0.0866%" height="15" fill="rgb(231,122,1)" fg:x="24451" fg:w="24"/><text x="88.5176%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.03%)</title><rect x="88.5455%" y="69" width="0.0253%" height="15" fill="rgb(245,119,9)" fg:x="24528" fg:w="7"/><text x="88.7955%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (26 samples, 0.09%)</title><rect x="88.4878%" y="101" width="0.0939%" height="15" fill="rgb(241,163,25)" fg:x="24512" fg:w="26"/><text x="88.7378%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (22 samples, 0.08%)</title><rect x="88.5022%" y="85" width="0.0794%" height="15" fill="rgb(217,214,3)" fg:x="24516" fg:w="22"/><text x="88.7522%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.01%)</title><rect x="88.5708%" y="69" width="0.0108%" height="15" fill="rgb(240,86,28)" fg:x="24535" fg:w="3"/><text x="88.8208%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (13 samples, 0.05%)</title><rect x="88.5816%" y="101" width="0.0469%" height="15" fill="rgb(215,47,9)" fg:x="24538" fg:w="13"/><text x="88.8316%" y="111.50"></text></g><g><title>benchmark_queries`alloc::raw_vec::finish_grow (49 samples, 0.18%)</title><rect x="88.4733%" y="117" width="0.1769%" height="15" fill="rgb(252,25,45)" fg:x="24508" fg:w="49"/><text x="88.7233%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (6 samples, 0.02%)</title><rect x="88.6286%" y="101" width="0.0217%" height="15" fill="rgb(251,164,9)" fg:x="24551" fg:w="6"/><text x="88.8786%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.03%)</title><rect x="88.6502%" y="117" width="0.0253%" height="15" fill="rgb(233,194,0)" fg:x="24557" fg:w="7"/><text x="88.9002%" y="127.50"></text></g><g><title>benchmark_queries`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (67 samples, 0.24%)</title><rect x="88.4445%" y="133" width="0.2419%" height="15" fill="rgb(249,111,24)" fg:x="24500" fg:w="67"/><text x="88.6945%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 0.01%)</title><rect x="88.6755%" y="117" width="0.0108%" height="15" fill="rgb(250,223,3)" fg:x="24564" fg:w="3"/><text x="88.9255%" y="127.50"></text></g><g><title>benchmark_queries`&lt;alloc::string::String as core::fmt::Write&gt;::write_char (75 samples, 0.27%)</title><rect x="88.4192%" y="149" width="0.2707%" height="15" fill="rgb(236,178,37)" fg:x="24493" fg:w="75"/><text x="88.6692%" y="159.50"></text></g><g><title>benchmark_queries`&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (5 samples, 0.02%)</title><rect x="88.6899%" y="149" width="0.0180%" height="15" fill="rgb(241,158,50)" fg:x="24568" fg:w="5"/><text x="88.9399%" y="159.50"></text></g><g><title>benchmark_queries`&lt;chrono::naive::date::NaiveDate as core::fmt::Debug&gt;::fmt (100 samples, 0.36%)</title><rect x="88.3542%" y="165" width="0.3610%" height="15" fill="rgb(213,121,41)" fg:x="24475" fg:w="100"/><text x="88.6042%" y="175.50"></text></g><g><title>benchmark_queries`serde::ser::Serializer::collect_str (137 samples, 0.49%)</title><rect x="88.2495%" y="181" width="0.4946%" height="15" fill="rgb(240,92,3)" fg:x="24446" fg:w="137"/><text x="88.4995%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.03%)</title><rect x="88.7188%" y="165" width="0.0253%" height="15" fill="rgb(205,123,3)" fg:x="24576" fg:w="7"/><text x="88.9688%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_free (7 samples, 0.03%)</title><rect x="88.7441%" y="181" width="0.0253%" height="15" fill="rgb(205,97,47)" fg:x="24583" fg:w="7"/><text x="88.9941%" y="191.50"></text></g><g><title>benchmark_queries`query_exec::tuple::_::_&lt;impl serde::ser::Serialize for query_exec::tuple::Field&gt;::serialize (169 samples, 0.61%)</title><rect x="88.1629%" y="197" width="0.6101%" height="15" fill="rgb(247,152,14)" fg:x="24422" fg:w="169"/><text x="88.4129%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.01%)</title><rect x="88.7838%" y="165" width="0.0108%" height="15" fill="rgb(248,195,53)" fg:x="24594" fg:w="3"/><text x="89.0338%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.06%)</title><rect x="88.7730%" y="197" width="0.0614%" height="15" fill="rgb(226,201,16)" fg:x="24591" fg:w="17"/><text x="89.0230%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (16 samples, 0.06%)</title><rect x="88.7766%" y="181" width="0.0578%" height="15" fill="rgb(205,98,0)" fg:x="24592" fg:w="16"/><text x="89.0266%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (11 samples, 0.04%)</title><rect x="88.7946%" y="165" width="0.0397%" height="15" fill="rgb(214,191,48)" fg:x="24597" fg:w="11"/><text x="89.0446%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.01%)</title><rect x="88.8199%" y="149" width="0.0144%" height="15" fill="rgb(237,112,39)" fg:x="24604" fg:w="4"/><text x="89.0699%" y="159.50"></text></g><g><title>benchmark_queries`bincode::internal::serialize (382 samples, 1.38%)</title><rect x="87.5023%" y="213" width="1.3790%" height="15" fill="rgb(247,203,27)" fg:x="24239" fg:w="382"/><text x="87.7523%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.05%)</title><rect x="88.8343%" y="197" width="0.0469%" height="15" fill="rgb(235,124,28)" fg:x="24608" fg:w="13"/><text x="89.0843%" y="207.50"></text></g><g><title>benchmark_queries`query_exec::tuple::_::_&lt;impl serde::ser::Serialize for query_exec::tuple::Field&gt;::serialize (29 samples, 0.10%)</title><rect x="88.8813%" y="213" width="0.1047%" height="15" fill="rgb(208,207,46)" fg:x="24621" fg:w="29"/><text x="89.1313%" y="223.50"></text></g><g><title>benchmark_queries`query_exec::tuple::Tuple::to_bytes (423 samples, 1.53%)</title><rect x="87.4698%" y="229" width="1.5270%" height="15" fill="rgb(234,176,4)" fg:x="24230" fg:w="423"/><text x="87.7198%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (7 samples, 0.03%)</title><rect x="89.0401%" y="181" width="0.0253%" height="15" fill="rgb(230,133,28)" fg:x="24665" fg:w="7"/><text x="89.2901%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (5 samples, 0.02%)</title><rect x="89.0473%" y="165" width="0.0180%" height="15" fill="rgb(211,137,40)" fg:x="24667" fg:w="5"/><text x="89.2973%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (5 samples, 0.02%)</title><rect x="89.0654%" y="181" width="0.0180%" height="15" fill="rgb(254,35,13)" fg:x="24672" fg:w="5"/><text x="89.3154%" y="191.50"></text></g><g><title>benchmark_queries`alloc::raw_vec::finish_grow (22 samples, 0.08%)</title><rect x="89.0329%" y="197" width="0.0794%" height="15" fill="rgb(225,49,51)" fg:x="24663" fg:w="22"/><text x="89.2829%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (8 samples, 0.03%)</title><rect x="89.0834%" y="181" width="0.0289%" height="15" fill="rgb(251,10,15)" fg:x="24677" fg:w="8"/><text x="89.3334%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.01%)</title><rect x="89.1123%" y="197" width="0.0108%" height="15" fill="rgb(228,207,15)" fg:x="24685" fg:w="3"/><text x="89.3623%" y="207.50"></text></g><g><title>benchmark_queries`query_exec::tuple::Tuple::to_normalized_key_bytes (38 samples, 0.14%)</title><rect x="88.9968%" y="229" width="0.1372%" height="15" fill="rgb(241,99,19)" fg:x="24653" fg:w="38"/><text x="89.2468%" y="239.50"></text></g><g><title>benchmark_queries`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (31 samples, 0.11%)</title><rect x="89.0221%" y="213" width="0.1119%" height="15" fill="rgb(207,104,49)" fg:x="24660" fg:w="31"/><text x="89.2721%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.02%)</title><rect x="89.1340%" y="229" width="0.0180%" height="15" fill="rgb(234,99,18)" fg:x="24691" fg:w="5"/><text x="89.3840%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.02%)</title><rect x="89.2026%" y="197" width="0.0217%" height="15" fill="rgb(213,191,49)" fg:x="24710" fg:w="6"/><text x="89.4526%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (21 samples, 0.08%)</title><rect x="89.1520%" y="229" width="0.0758%" height="15" fill="rgb(210,226,19)" fg:x="24696" fg:w="21"/><text x="89.4020%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (16 samples, 0.06%)</title><rect x="89.1701%" y="213" width="0.0578%" height="15" fill="rgb(229,97,18)" fg:x="24701" fg:w="16"/><text x="89.4201%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.03%)</title><rect x="89.2350%" y="229" width="0.0325%" height="15" fill="rgb(211,167,15)" fg:x="24719" fg:w="9"/><text x="89.4850%" y="239.50"></text></g><g><title>benchmark_queries`query_exec::executor::ondisk_pipeline::sort::SortBuffer&lt;M&gt;::append (516 samples, 1.86%)</title><rect x="87.4084%" y="245" width="1.8627%" height="15" fill="rgb(210,169,34)" fg:x="24213" fg:w="516"/><text x="87.6584%" y="255.50">b..</text></g><g><title>libsystem_malloc.dylib`_free (8 samples, 0.03%)</title><rect x="89.2748%" y="245" width="0.0289%" height="15" fill="rgb(241,121,31)" fg:x="24730" fg:w="8"/><text x="89.5248%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (44 samples, 0.16%)</title><rect x="89.3036%" y="245" width="0.1588%" height="15" fill="rgb(232,40,11)" fg:x="24738" fg:w="44"/><text x="89.5536%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.01%)</title><rect x="89.4625%" y="245" width="0.0108%" height="15" fill="rgb(205,86,26)" fg:x="24782" fg:w="3"/><text x="89.7125%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (29 samples, 0.10%)</title><rect x="89.4733%" y="245" width="0.1047%" height="15" fill="rgb(231,126,28)" fg:x="24785" fg:w="29"/><text x="89.7233%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (21 samples, 0.08%)</title><rect x="89.5022%" y="229" width="0.0758%" height="15" fill="rgb(219,221,18)" fg:x="24793" fg:w="21"/><text x="89.7522%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (3 samples, 0.01%)</title><rect x="89.5672%" y="213" width="0.0108%" height="15" fill="rgb(211,40,0)" fg:x="24811" fg:w="3"/><text x="89.8172%" y="223.50"></text></g><g><title>benchmark_queries`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,738 samples, 6.27%)</title><rect x="83.3327%" y="261" width="6.2741%" height="15" fill="rgb(239,85,43)" fg:x="23084" fg:w="1738"/><text x="83.5827%" y="271.50">benchmar..</text></g><g><title>libsystem_platform.dylib`_platform_memset (8 samples, 0.03%)</title><rect x="89.5780%" y="245" width="0.0289%" height="15" fill="rgb(231,55,21)" fg:x="24814" fg:w="8"/><text x="89.8280%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_free (9 samples, 0.03%)</title><rect x="89.6105%" y="261" width="0.0325%" height="15" fill="rgb(225,184,43)" fg:x="24823" fg:w="9"/><text x="89.8605%" y="271.50"></text></g><g><title>benchmark_queries`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,758 samples, 6.35%)</title><rect x="83.3075%" y="277" width="6.3463%" height="15" fill="rgb(251,158,41)" fg:x="23077" fg:w="1758"/><text x="83.5575%" y="287.50">benchmar..</text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (5 samples, 0.02%)</title><rect x="89.6538%" y="149" width="0.0180%" height="15" fill="rgb(234,159,37)" fg:x="24835" fg:w="5"/><text x="89.9038%" y="159.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::Folder::consume_iter (5 samples, 0.02%)</title><rect x="89.6538%" y="133" width="0.0180%" height="15" fill="rgb(216,204,22)" fg:x="24835" fg:w="5"/><text x="89.9038%" y="143.50"></text></g><g><title>benchmark_queries`sysinfo::apple::macos::process::update_process (5 samples, 0.02%)</title><rect x="89.6538%" y="117" width="0.0180%" height="15" fill="rgb(214,17,3)" fg:x="24835" fg:w="5"/><text x="89.9038%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__proc_info (3 samples, 0.01%)</title><rect x="89.6610%" y="101" width="0.0108%" height="15" fill="rgb(212,111,17)" fg:x="24837" fg:w="3"/><text x="89.9110%" y="111.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (6 samples, 0.02%)</title><rect x="89.6538%" y="197" width="0.0217%" height="15" fill="rgb(221,157,24)" fg:x="24835" fg:w="6"/><text x="89.9038%" y="207.50"></text></g><g><title>benchmark_queries`rayon_core::registry::in_worker (6 samples, 0.02%)</title><rect x="89.6538%" y="181" width="0.0217%" height="15" fill="rgb(252,16,13)" fg:x="24835" fg:w="6"/><text x="89.9038%" y="191.50"></text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (6 samples, 0.02%)</title><rect x="89.6538%" y="165" width="0.0217%" height="15" fill="rgb(221,62,2)" fg:x="24835" fg:w="6"/><text x="89.9038%" y="175.50"></text></g><g><title>benchmark_queries`sysinfo::apple::macos::process::create_new_process (3 samples, 0.01%)</title><rect x="89.6755%" y="85" width="0.0108%" height="15" fill="rgb(247,87,22)" fg:x="24841" fg:w="3"/><text x="89.9255%" y="95.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (5 samples, 0.02%)</title><rect x="89.6755%" y="133" width="0.0180%" height="15" fill="rgb(215,73,9)" fg:x="24841" fg:w="5"/><text x="89.9255%" y="143.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::Folder::consume_iter (5 samples, 0.02%)</title><rect x="89.6755%" y="117" width="0.0180%" height="15" fill="rgb(207,175,33)" fg:x="24841" fg:w="5"/><text x="89.9255%" y="127.50"></text></g><g><title>benchmark_queries`sysinfo::apple::macos::process::update_process (5 samples, 0.02%)</title><rect x="89.6755%" y="101" width="0.0180%" height="15" fill="rgb(243,129,54)" fg:x="24841" fg:w="5"/><text x="89.9255%" y="111.50"></text></g><g><title>benchmark_queries`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (8 samples, 0.03%)</title><rect x="89.6755%" y="197" width="0.0289%" height="15" fill="rgb(227,119,45)" fg:x="24841" fg:w="8"/><text x="89.9255%" y="207.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (8 samples, 0.03%)</title><rect x="89.6755%" y="181" width="0.0289%" height="15" fill="rgb(205,109,36)" fg:x="24841" fg:w="8"/><text x="89.9255%" y="191.50"></text></g><g><title>benchmark_queries`rayon_core::registry::in_worker (8 samples, 0.03%)</title><rect x="89.6755%" y="165" width="0.0289%" height="15" fill="rgb(205,6,39)" fg:x="24841" fg:w="8"/><text x="89.9255%" y="175.50"></text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (8 samples, 0.03%)</title><rect x="89.6755%" y="149" width="0.0289%" height="15" fill="rgb(221,32,16)" fg:x="24841" fg:w="8"/><text x="89.9255%" y="159.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (15 samples, 0.05%)</title><rect x="89.6538%" y="245" width="0.0541%" height="15" fill="rgb(228,144,50)" fg:x="24835" fg:w="15"/><text x="89.9038%" y="255.50"></text></g><g><title>benchmark_queries`rayon_core::registry::in_worker (15 samples, 0.05%)</title><rect x="89.6538%" y="229" width="0.0541%" height="15" fill="rgb(229,201,53)" fg:x="24835" fg:w="15"/><text x="89.9038%" y="239.50"></text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (15 samples, 0.05%)</title><rect x="89.6538%" y="213" width="0.0541%" height="15" fill="rgb(249,153,27)" fg:x="24835" fg:w="15"/><text x="89.9038%" y="223.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (3 samples, 0.01%)</title><rect x="89.7080%" y="181" width="0.0108%" height="15" fill="rgb(227,106,25)" fg:x="24850" fg:w="3"/><text x="89.9580%" y="191.50"></text></g><g><title>benchmark_queries`rayon_core::registry::in_worker (3 samples, 0.01%)</title><rect x="89.7080%" y="165" width="0.0108%" height="15" fill="rgb(230,65,29)" fg:x="24850" fg:w="3"/><text x="89.9580%" y="175.50"></text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (3 samples, 0.01%)</title><rect x="89.7080%" y="149" width="0.0108%" height="15" fill="rgb(221,57,46)" fg:x="24850" fg:w="3"/><text x="89.9580%" y="159.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (3 samples, 0.01%)</title><rect x="89.7080%" y="133" width="0.0108%" height="15" fill="rgb(229,161,17)" fg:x="24850" fg:w="3"/><text x="89.9580%" y="143.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::Folder::consume_iter (3 samples, 0.01%)</title><rect x="89.7080%" y="117" width="0.0108%" height="15" fill="rgb(222,213,11)" fg:x="24850" fg:w="3"/><text x="89.9580%" y="127.50"></text></g><g><title>benchmark_queries`sysinfo::apple::macos::process::update_process (3 samples, 0.01%)</title><rect x="89.7080%" y="101" width="0.0108%" height="15" fill="rgb(235,35,13)" fg:x="24850" fg:w="3"/><text x="89.9580%" y="111.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (1,780 samples, 6.43%)</title><rect x="83.3075%" y="293" width="6.4258%" height="15" fill="rgb(233,158,34)" fg:x="23077" fg:w="1780"/><text x="83.5575%" y="303.50">benchmar..</text></g><g><title>benchmark_queries`rayon_core::registry::in_worker (22 samples, 0.08%)</title><rect x="89.6538%" y="277" width="0.0794%" height="15" fill="rgb(215,151,48)" fg:x="24835" fg:w="22"/><text x="89.9038%" y="287.50"></text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (22 samples, 0.08%)</title><rect x="89.6538%" y="261" width="0.0794%" height="15" fill="rgb(229,84,14)" fg:x="24835" fg:w="22"/><text x="89.9038%" y="271.50"></text></g><g><title>benchmark_queries`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (7 samples, 0.03%)</title><rect x="89.7080%" y="245" width="0.0253%" height="15" fill="rgb(229,68,14)" fg:x="24850" fg:w="7"/><text x="89.9580%" y="255.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (7 samples, 0.03%)</title><rect x="89.7080%" y="229" width="0.0253%" height="15" fill="rgb(243,106,26)" fg:x="24850" fg:w="7"/><text x="89.9580%" y="239.50"></text></g><g><title>benchmark_queries`rayon_core::registry::in_worker (7 samples, 0.03%)</title><rect x="89.7080%" y="213" width="0.0253%" height="15" fill="rgb(206,45,38)" fg:x="24850" fg:w="7"/><text x="89.9580%" y="223.50"></text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (7 samples, 0.03%)</title><rect x="89.7080%" y="197" width="0.0253%" height="15" fill="rgb(226,6,15)" fg:x="24850" fg:w="7"/><text x="89.9580%" y="207.50"></text></g><g><title>benchmark_queries`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (4 samples, 0.01%)</title><rect x="89.7188%" y="181" width="0.0144%" height="15" fill="rgb(232,22,54)" fg:x="24853" fg:w="4"/><text x="89.9688%" y="191.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (4 samples, 0.01%)</title><rect x="89.7188%" y="165" width="0.0144%" height="15" fill="rgb(229,222,32)" fg:x="24853" fg:w="4"/><text x="89.9688%" y="175.50"></text></g><g><title>benchmark_queries`rayon_core::registry::in_worker (4 samples, 0.01%)</title><rect x="89.7188%" y="149" width="0.0144%" height="15" fill="rgb(228,62,29)" fg:x="24853" fg:w="4"/><text x="89.9688%" y="159.50"></text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (4 samples, 0.01%)</title><rect x="89.7188%" y="133" width="0.0144%" height="15" fill="rgb(251,103,34)" fg:x="24853" fg:w="4"/><text x="89.9688%" y="143.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (3 samples, 0.01%)</title><rect x="89.7368%" y="181" width="0.0108%" height="15" fill="rgb(233,12,30)" fg:x="24858" fg:w="3"/><text x="89.9868%" y="191.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (4 samples, 0.01%)</title><rect x="89.7368%" y="229" width="0.0144%" height="15" fill="rgb(238,52,0)" fg:x="24858" fg:w="4"/><text x="89.9868%" y="239.50"></text></g><g><title>benchmark_queries`rayon_core::registry::in_worker (4 samples, 0.01%)</title><rect x="89.7368%" y="213" width="0.0144%" height="15" fill="rgb(223,98,5)" fg:x="24858" fg:w="4"/><text x="89.9868%" y="223.50"></text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (4 samples, 0.01%)</title><rect x="89.7368%" y="197" width="0.0144%" height="15" fill="rgb(228,75,37)" fg:x="24858" fg:w="4"/><text x="89.9868%" y="207.50"></text></g><g><title>benchmark_queries`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (12 samples, 0.04%)</title><rect x="89.7332%" y="293" width="0.0433%" height="15" fill="rgb(205,115,49)" fg:x="24857" fg:w="12"/><text x="89.9832%" y="303.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (12 samples, 0.04%)</title><rect x="89.7332%" y="277" width="0.0433%" height="15" fill="rgb(250,154,43)" fg:x="24857" fg:w="12"/><text x="89.9832%" y="287.50"></text></g><g><title>benchmark_queries`rayon_core::registry::in_worker (11 samples, 0.04%)</title><rect x="89.7368%" y="261" width="0.0397%" height="15" fill="rgb(226,43,29)" fg:x="24858" fg:w="11"/><text x="89.9868%" y="271.50"></text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (11 samples, 0.04%)</title><rect x="89.7368%" y="245" width="0.0397%" height="15" fill="rgb(249,228,39)" fg:x="24858" fg:w="11"/><text x="89.9868%" y="255.50"></text></g><g><title>benchmark_queries`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (7 samples, 0.03%)</title><rect x="89.7513%" y="229" width="0.0253%" height="15" fill="rgb(216,79,43)" fg:x="24862" fg:w="7"/><text x="90.0013%" y="239.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (7 samples, 0.03%)</title><rect x="89.7513%" y="213" width="0.0253%" height="15" fill="rgb(228,95,12)" fg:x="24862" fg:w="7"/><text x="90.0013%" y="223.50"></text></g><g><title>benchmark_queries`rayon_core::registry::in_worker (5 samples, 0.02%)</title><rect x="89.7585%" y="197" width="0.0180%" height="15" fill="rgb(249,221,15)" fg:x="24864" fg:w="5"/><text x="90.0085%" y="207.50"></text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (5 samples, 0.02%)</title><rect x="89.7585%" y="181" width="0.0180%" height="15" fill="rgb(233,34,13)" fg:x="24864" fg:w="5"/><text x="90.0085%" y="191.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (3 samples, 0.01%)</title><rect x="89.7765%" y="213" width="0.0108%" height="15" fill="rgb(214,103,39)" fg:x="24869" fg:w="3"/><text x="90.0265%" y="223.50"></text></g><g><title>benchmark_queries`rayon_core::registry::in_worker (3 samples, 0.01%)</title><rect x="89.7765%" y="197" width="0.0108%" height="15" fill="rgb(251,126,39)" fg:x="24869" fg:w="3"/><text x="90.0265%" y="207.50"></text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (3 samples, 0.01%)</title><rect x="89.7765%" y="181" width="0.0108%" height="15" fill="rgb(214,216,36)" fg:x="24869" fg:w="3"/><text x="90.0265%" y="191.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (5,278 samples, 19.05%)</title><rect x="70.7375%" y="341" width="19.0535%" height="15" fill="rgb(220,221,8)" fg:x="19595" fg:w="5278"/><text x="70.9875%" y="351.50">benchmark_queries`rayon::iter:..</text></g><g><title>benchmark_queries`rayon_core::registry::in_worker (1,796 samples, 6.48%)</title><rect x="83.3075%" y="325" width="6.4835%" height="15" fill="rgb(240,216,3)" fg:x="23077" fg:w="1796"/><text x="83.5575%" y="335.50">benchmar..</text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (1,796 samples, 6.48%)</title><rect x="83.3075%" y="309" width="6.4835%" height="15" fill="rgb(232,218,17)" fg:x="23077" fg:w="1796"/><text x="83.5575%" y="319.50">benchmar..</text></g><g><title>benchmark_queries`rayon_core::registry::WorkerThread::wait_until_cold (4 samples, 0.01%)</title><rect x="89.7765%" y="293" width="0.0144%" height="15" fill="rgb(229,163,45)" fg:x="24869" fg:w="4"/><text x="90.0265%" y="303.50"></text></g><g><title>benchmark_queries`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (4 samples, 0.01%)</title><rect x="89.7765%" y="277" width="0.0144%" height="15" fill="rgb(231,110,42)" fg:x="24869" fg:w="4"/><text x="90.0265%" y="287.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (4 samples, 0.01%)</title><rect x="89.7765%" y="261" width="0.0144%" height="15" fill="rgb(208,170,48)" fg:x="24869" fg:w="4"/><text x="90.0265%" y="271.50"></text></g><g><title>benchmark_queries`rayon_core::registry::in_worker (4 samples, 0.01%)</title><rect x="89.7765%" y="245" width="0.0144%" height="15" fill="rgb(239,116,25)" fg:x="24869" fg:w="4"/><text x="90.0265%" y="255.50"></text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (4 samples, 0.01%)</title><rect x="89.7765%" y="229" width="0.0144%" height="15" fill="rgb(219,200,50)" fg:x="24869" fg:w="4"/><text x="90.0265%" y="239.50"></text></g><g><title>benchmark_queries`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (4 samples, 0.01%)</title><rect x="89.7910%" y="277" width="0.0144%" height="15" fill="rgb(245,200,0)" fg:x="24873" fg:w="4"/><text x="90.0410%" y="287.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (4 samples, 0.01%)</title><rect x="89.7910%" y="261" width="0.0144%" height="15" fill="rgb(245,119,33)" fg:x="24873" fg:w="4"/><text x="90.0410%" y="271.50"></text></g><g><title>benchmark_queries`rayon_core::registry::in_worker (4 samples, 0.01%)</title><rect x="89.7910%" y="245" width="0.0144%" height="15" fill="rgb(231,125,12)" fg:x="24873" fg:w="4"/><text x="90.0410%" y="255.50"></text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (4 samples, 0.01%)</title><rect x="89.7910%" y="229" width="0.0144%" height="15" fill="rgb(216,96,41)" fg:x="24873" fg:w="4"/><text x="90.0410%" y="239.50"></text></g><g><title>benchmark_queries`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (7 samples, 0.03%)</title><rect x="89.7910%" y="341" width="0.0253%" height="15" fill="rgb(248,43,45)" fg:x="24873" fg:w="7"/><text x="90.0410%" y="351.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (7 samples, 0.03%)</title><rect x="89.7910%" y="325" width="0.0253%" height="15" fill="rgb(217,222,7)" fg:x="24873" fg:w="7"/><text x="90.0410%" y="335.50"></text></g><g><title>benchmark_queries`rayon_core::registry::in_worker (7 samples, 0.03%)</title><rect x="89.7910%" y="309" width="0.0253%" height="15" fill="rgb(233,28,6)" fg:x="24873" fg:w="7"/><text x="90.0410%" y="319.50"></text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (7 samples, 0.03%)</title><rect x="89.7910%" y="293" width="0.0253%" height="15" fill="rgb(231,218,15)" fg:x="24873" fg:w="7"/><text x="90.0410%" y="303.50"></text></g><g><title>benchmark_queries`rayon_core::registry::WorkerThread::wait_until_cold (3 samples, 0.01%)</title><rect x="89.8054%" y="277" width="0.0108%" height="15" fill="rgb(226,171,48)" fg:x="24877" fg:w="3"/><text x="90.0554%" y="287.50"></text></g><g><title>benchmark_queries`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (3 samples, 0.01%)</title><rect x="89.8054%" y="261" width="0.0108%" height="15" fill="rgb(235,201,9)" fg:x="24877" fg:w="3"/><text x="90.0554%" y="271.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (3 samples, 0.01%)</title><rect x="89.8054%" y="245" width="0.0108%" height="15" fill="rgb(217,80,15)" fg:x="24877" fg:w="3"/><text x="90.0554%" y="255.50"></text></g><g><title>benchmark_queries`rayon_core::registry::in_worker (3 samples, 0.01%)</title><rect x="89.8054%" y="229" width="0.0108%" height="15" fill="rgb(219,152,8)" fg:x="24877" fg:w="3"/><text x="90.0554%" y="239.50"></text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (3 samples, 0.01%)</title><rect x="89.8054%" y="213" width="0.0108%" height="15" fill="rgb(243,107,38)" fg:x="24877" fg:w="3"/><text x="90.0554%" y="223.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (3 samples, 0.01%)</title><rect x="89.8054%" y="197" width="0.0108%" height="15" fill="rgb(231,17,5)" fg:x="24877" fg:w="3"/><text x="90.0554%" y="207.50"></text></g><g><title>benchmark_queries`rayon_core::registry::in_worker (3 samples, 0.01%)</title><rect x="89.8054%" y="181" width="0.0108%" height="15" fill="rgb(209,25,54)" fg:x="24877" fg:w="3"/><text x="90.0554%" y="191.50"></text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (3 samples, 0.01%)</title><rect x="89.8054%" y="165" width="0.0108%" height="15" fill="rgb(219,0,2)" fg:x="24877" fg:w="3"/><text x="90.0554%" y="175.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (3 samples, 0.01%)</title><rect x="89.8054%" y="149" width="0.0108%" height="15" fill="rgb(246,9,5)" fg:x="24877" fg:w="3"/><text x="90.0554%" y="159.50"></text></g><g><title>benchmark_queries`rayon_core::registry::in_worker (3 samples, 0.01%)</title><rect x="89.8054%" y="133" width="0.0108%" height="15" fill="rgb(226,159,4)" fg:x="24877" fg:w="3"/><text x="90.0554%" y="143.50"></text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (3 samples, 0.01%)</title><rect x="89.8054%" y="117" width="0.0108%" height="15" fill="rgb(219,175,34)" fg:x="24877" fg:w="3"/><text x="90.0554%" y="127.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (4 samples, 0.01%)</title><rect x="89.8163%" y="213" width="0.0144%" height="15" fill="rgb(236,10,46)" fg:x="24880" fg:w="4"/><text x="90.0663%" y="223.50"></text></g><g><title>benchmark_queries`rayon_core::registry::in_worker (3 samples, 0.01%)</title><rect x="89.8199%" y="197" width="0.0108%" height="15" fill="rgb(240,211,16)" fg:x="24881" fg:w="3"/><text x="90.0699%" y="207.50"></text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (3 samples, 0.01%)</title><rect x="89.8199%" y="181" width="0.0108%" height="15" fill="rgb(205,3,43)" fg:x="24881" fg:w="3"/><text x="90.0699%" y="191.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (3 samples, 0.01%)</title><rect x="89.8307%" y="149" width="0.0108%" height="15" fill="rgb(245,7,22)" fg:x="24884" fg:w="3"/><text x="90.0807%" y="159.50"></text></g><g><title>benchmark_queries`rayon_core::registry::in_worker (3 samples, 0.01%)</title><rect x="89.8307%" y="133" width="0.0108%" height="15" fill="rgb(239,132,32)" fg:x="24884" fg:w="3"/><text x="90.0807%" y="143.50"></text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (3 samples, 0.01%)</title><rect x="89.8307%" y="117" width="0.0108%" height="15" fill="rgb(228,202,34)" fg:x="24884" fg:w="3"/><text x="90.0807%" y="127.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (9 samples, 0.03%)</title><rect x="89.8163%" y="261" width="0.0325%" height="15" fill="rgb(254,200,22)" fg:x="24880" fg:w="9"/><text x="90.0663%" y="271.50"></text></g><g><title>benchmark_queries`rayon_core::registry::in_worker (9 samples, 0.03%)</title><rect x="89.8163%" y="245" width="0.0325%" height="15" fill="rgb(219,10,39)" fg:x="24880" fg:w="9"/><text x="90.0663%" y="255.50"></text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (9 samples, 0.03%)</title><rect x="89.8163%" y="229" width="0.0325%" height="15" fill="rgb(226,210,39)" fg:x="24880" fg:w="9"/><text x="90.0663%" y="239.50"></text></g><g><title>benchmark_queries`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (5 samples, 0.02%)</title><rect x="89.8307%" y="213" width="0.0180%" height="15" fill="rgb(208,219,16)" fg:x="24884" fg:w="5"/><text x="90.0807%" y="223.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (5 samples, 0.02%)</title><rect x="89.8307%" y="197" width="0.0180%" height="15" fill="rgb(216,158,51)" fg:x="24884" fg:w="5"/><text x="90.0807%" y="207.50"></text></g><g><title>benchmark_queries`rayon_core::registry::in_worker (5 samples, 0.02%)</title><rect x="89.8307%" y="181" width="0.0180%" height="15" fill="rgb(233,14,44)" fg:x="24884" fg:w="5"/><text x="90.0807%" y="191.50"></text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (5 samples, 0.02%)</title><rect x="89.8307%" y="165" width="0.0180%" height="15" fill="rgb(237,97,39)" fg:x="24884" fg:w="5"/><text x="90.0807%" y="175.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (19,443 samples, 70.19%)</title><rect x="19.6744%" y="389" width="70.1888%" height="15" fill="rgb(218,198,43)" fg:x="5450" fg:w="19443"/><text x="19.9244%" y="399.50">benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>benchmark_queries`rayon_core::registry::in_worker (5,298 samples, 19.13%)</title><rect x="70.7375%" y="373" width="19.1257%" height="15" fill="rgb(231,104,20)" fg:x="19595" fg:w="5298"/><text x="70.9875%" y="383.50">benchmark_queries`rayon_core::..</text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (5,298 samples, 19.13%)</title><rect x="70.7375%" y="357" width="19.1257%" height="15" fill="rgb(254,36,13)" fg:x="19595" fg:w="5298"/><text x="70.9875%" y="367.50">benchmark_queries`rayon_core::..</text></g><g><title>benchmark_queries`rayon_core::registry::WorkerThread::wait_until_cold (13 samples, 0.05%)</title><rect x="89.8163%" y="341" width="0.0469%" height="15" fill="rgb(248,14,50)" fg:x="24880" fg:w="13"/><text x="90.0663%" y="351.50"></text></g><g><title>benchmark_queries`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (13 samples, 0.05%)</title><rect x="89.8163%" y="325" width="0.0469%" height="15" fill="rgb(217,107,29)" fg:x="24880" fg:w="13"/><text x="90.0663%" y="335.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (13 samples, 0.05%)</title><rect x="89.8163%" y="309" width="0.0469%" height="15" fill="rgb(251,169,33)" fg:x="24880" fg:w="13"/><text x="90.0663%" y="319.50"></text></g><g><title>benchmark_queries`rayon_core::registry::in_worker (13 samples, 0.05%)</title><rect x="89.8163%" y="293" width="0.0469%" height="15" fill="rgb(217,108,32)" fg:x="24880" fg:w="13"/><text x="90.0663%" y="303.50"></text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (13 samples, 0.05%)</title><rect x="89.8163%" y="277" width="0.0469%" height="15" fill="rgb(219,66,42)" fg:x="24880" fg:w="13"/><text x="90.0663%" y="287.50"></text></g><g><title>benchmark_queries`&lt;fbtree::bp::buffer_pool::BufferPool as fbtree::bp::mem_pool_trait::MemPool&gt;::get_page_for_read (7 samples, 0.03%)</title><rect x="89.8668%" y="245" width="0.0253%" height="15" fill="rgb(206,180,7)" fg:x="24894" fg:w="7"/><text x="90.1168%" y="255.50"></text></g><g><title>benchmark_queries`&lt;fbtree::access_method::sorted_run_store::BigSortedRunStoreScanner&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.03%)</title><rect x="89.8668%" y="261" width="0.0325%" height="15" fill="rgb(208,226,31)" fg:x="24894" fg:w="9"/><text x="90.1168%" y="271.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$free (4 samples, 0.01%)</title><rect x="89.9101%" y="261" width="0.0144%" height="15" fill="rgb(218,26,49)" fg:x="24906" fg:w="4"/><text x="90.1601%" y="271.50"></text></g><g><title>benchmark_queries`fbtree::bp::buffer_pool::BufferPool::handle_page_fault (9 samples, 0.03%)</title><rect x="89.9968%" y="229" width="0.0325%" height="15" fill="rgb(233,197,48)" fg:x="24930" fg:w="9"/><text x="90.2468%" y="239.50"></text></g><g><title>benchmark_queries`&lt;fbtree::bp::buffer_pool::BufferPool as fbtree::bp::mem_pool_trait::MemPool&gt;::create_new_page_for_write (25 samples, 0.09%)</title><rect x="89.9426%" y="245" width="0.0902%" height="15" fill="rgb(252,181,51)" fg:x="24915" fg:w="25"/><text x="90.1926%" y="255.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::insert_slot (5 samples, 0.02%)</title><rect x="90.0834%" y="229" width="0.0180%" height="15" fill="rgb(253,90,19)" fg:x="24954" fg:w="5"/><text x="90.3334%" y="239.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::search_key (21 samples, 0.08%)</title><rect x="90.1014%" y="229" width="0.0758%" height="15" fill="rgb(215,171,30)" fg:x="24959" fg:w="21"/><text x="90.3514%" y="239.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::get (13 samples, 0.05%)</title><rect x="90.1303%" y="213" width="0.0469%" height="15" fill="rgb(214,222,9)" fg:x="24967" fg:w="13"/><text x="90.3803%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (24 samples, 0.09%)</title><rect x="90.1845%" y="229" width="0.0866%" height="15" fill="rgb(223,3,22)" fg:x="24982" fg:w="24"/><text x="90.4345%" y="239.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::append (108 samples, 0.39%)</title><rect x="90.0329%" y="245" width="0.3899%" height="15" fill="rgb(225,196,46)" fg:x="24940" fg:w="108"/><text x="90.2829%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (42 samples, 0.15%)</title><rect x="90.2711%" y="229" width="0.1516%" height="15" fill="rgb(209,110,37)" fg:x="25006" fg:w="42"/><text x="90.5211%" y="239.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::insert_slot (5 samples, 0.02%)</title><rect x="90.4227%" y="245" width="0.0180%" height="15" fill="rgb(249,89,12)" fg:x="25048" fg:w="5"/><text x="90.6727%" y="255.50"></text></g><g><title>benchmark_queries`&lt;fbtree::bp::buffer_pool::BufferPool as fbtree::bp::mem_pool_trait::MemPool&gt;::get_page_for_read (13 samples, 0.05%)</title><rect x="90.5816%" y="213" width="0.0469%" height="15" fill="rgb(226,27,33)" fg:x="25092" fg:w="13"/><text x="90.8316%" y="223.50"></text></g><g><title>benchmark_queries`fbtree::bp::buffer_pool::BufferPool::handle_page_fault (5 samples, 0.02%)</title><rect x="90.6104%" y="197" width="0.0180%" height="15" fill="rgb(213,82,22)" fg:x="25100" fg:w="5"/><text x="90.8604%" y="207.50"></text></g><g><title>benchmark_queries`fbtree::file_manager::sync_write::FileManager::read_page (5 samples, 0.02%)</title><rect x="90.6104%" y="181" width="0.0180%" height="15" fill="rgb(248,140,0)" fg:x="25100" fg:w="5"/><text x="90.8604%" y="191.50"></text></g><g><title>benchmark_queries`std::io::default_read_exact (5 samples, 0.02%)</title><rect x="90.6104%" y="165" width="0.0180%" height="15" fill="rgb(228,106,3)" fg:x="25100" fg:w="5"/><text x="90.8604%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`read (5 samples, 0.02%)</title><rect x="90.6104%" y="149" width="0.0180%" height="15" fill="rgb(209,23,37)" fg:x="25100" fg:w="5"/><text x="90.8604%" y="159.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::get (6 samples, 0.02%)</title><rect x="90.6285%" y="213" width="0.0217%" height="15" fill="rgb(241,93,50)" fg:x="25105" fg:w="6"/><text x="90.8785%" y="223.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::slot_count (21 samples, 0.08%)</title><rect x="90.6502%" y="213" width="0.0758%" height="15" fill="rgb(253,46,43)" fg:x="25111" fg:w="21"/><text x="90.9002%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (6 samples, 0.02%)</title><rect x="90.7260%" y="213" width="0.0217%" height="15" fill="rgb(226,206,43)" fg:x="25132" fg:w="6"/><text x="90.9760%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (11 samples, 0.04%)</title><rect x="90.7909%" y="197" width="0.0397%" height="15" fill="rgb(217,54,7)" fg:x="25150" fg:w="11"/><text x="91.0409%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.01%)</title><rect x="90.8307%" y="197" width="0.0144%" height="15" fill="rgb(223,5,52)" fg:x="25161" fg:w="4"/><text x="91.0807%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait2 (6 samples, 0.02%)</title><rect x="90.9353%" y="181" width="0.0217%" height="15" fill="rgb(206,52,46)" fg:x="25190" fg:w="6"/><text x="91.1853%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (7 samples, 0.03%)</title><rect x="90.9642%" y="181" width="0.0253%" height="15" fill="rgb(253,136,11)" fg:x="25198" fg:w="7"/><text x="91.2142%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (40 samples, 0.14%)</title><rect x="90.9895%" y="181" width="0.1444%" height="15" fill="rgb(208,106,33)" fg:x="25205" fg:w="40"/><text x="91.2395%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (8 samples, 0.03%)</title><rect x="91.1050%" y="165" width="0.0289%" height="15" fill="rgb(206,54,4)" fg:x="25237" fg:w="8"/><text x="91.3550%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (108 samples, 0.39%)</title><rect x="90.7476%" y="213" width="0.3899%" height="15" fill="rgb(213,3,15)" fg:x="25138" fg:w="108"/><text x="90.9976%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (81 samples, 0.29%)</title><rect x="90.8451%" y="197" width="0.2924%" height="15" fill="rgb(252,211,39)" fg:x="25165" fg:w="81"/><text x="91.0951%" y="207.50"></text></g><g><title>benchmark_queries`&lt;fbtree::access_method::sorted_run_store::BigSortedRunStoreScanner&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (181 samples, 0.65%)</title><rect x="90.4877%" y="229" width="0.6534%" height="15" fill="rgb(223,6,36)" fg:x="25066" fg:w="181"/><text x="90.7377%" y="239.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcmp (8 samples, 0.03%)</title><rect x="91.1447%" y="229" width="0.0289%" height="15" fill="rgb(252,169,45)" fg:x="25248" fg:w="8"/><text x="91.3947%" y="239.50"></text></g><g><title>benchmark_queries`alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (40 samples, 0.14%)</title><rect x="91.1772%" y="229" width="0.1444%" height="15" fill="rgb(212,48,26)" fg:x="25257" fg:w="40"/><text x="91.4272%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (7 samples, 0.03%)</title><rect x="91.2963%" y="213" width="0.0253%" height="15" fill="rgb(251,102,48)" fg:x="25290" fg:w="7"/><text x="91.5463%" y="223.50"></text></g><g><title>benchmark_queries`alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (14 samples, 0.05%)</title><rect x="91.3216%" y="229" width="0.0505%" height="15" fill="rgb(243,208,16)" fg:x="25297" fg:w="14"/><text x="91.5716%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.03%)</title><rect x="91.3722%" y="229" width="0.0325%" height="15" fill="rgb(219,96,24)" fg:x="25311" fg:w="9"/><text x="91.6222%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.01%)</title><rect x="91.4119%" y="229" width="0.0144%" height="15" fill="rgb(219,33,29)" fg:x="25322" fg:w="4"/><text x="91.6619%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (250 samples, 0.90%)</title><rect x="91.4263%" y="229" width="0.9025%" height="15" fill="rgb(223,176,5)" fg:x="25326" fg:w="250"/><text x="91.6763%" y="239.50"></text></g><g><title>benchmark_queries`&lt;query_exec::executor::ondisk_pipeline::sort::MergeIter&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (541 samples, 1.95%)</title><rect x="90.4408%" y="245" width="1.9530%" height="15" fill="rgb(228,140,14)" fg:x="25053" fg:w="541"/><text x="90.6908%" y="255.50">b..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (18 samples, 0.06%)</title><rect x="92.3288%" y="229" width="0.0650%" height="15" fill="rgb(217,179,31)" fg:x="25576" fg:w="18"/><text x="92.5788%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (6 samples, 0.02%)</title><rect x="92.4010%" y="245" width="0.0217%" height="15" fill="rgb(230,9,30)" fg:x="25596" fg:w="6"/><text x="92.6510%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (13 samples, 0.05%)</title><rect x="92.4227%" y="245" width="0.0469%" height="15" fill="rgb(230,136,20)" fg:x="25602" fg:w="13"/><text x="92.6727%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (5 samples, 0.02%)</title><rect x="92.4696%" y="245" width="0.0180%" height="15" fill="rgb(215,210,22)" fg:x="25615" fg:w="5"/><text x="92.7196%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait2 (16 samples, 0.06%)</title><rect x="92.5851%" y="229" width="0.0578%" height="15" fill="rgb(218,43,5)" fg:x="25647" fg:w="16"/><text x="92.8351%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.02%)</title><rect x="92.7367%" y="213" width="0.0180%" height="15" fill="rgb(216,11,5)" fg:x="25689" fg:w="5"/><text x="92.9867%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (38 samples, 0.14%)</title><rect x="92.6465%" y="229" width="0.1372%" height="15" fill="rgb(209,82,29)" fg:x="25664" fg:w="38"/><text x="92.8965%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (8 samples, 0.03%)</title><rect x="92.7548%" y="213" width="0.0289%" height="15" fill="rgb(244,115,12)" fg:x="25694" fg:w="8"/><text x="93.0048%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (85 samples, 0.31%)</title><rect x="92.4876%" y="245" width="0.3068%" height="15" fill="rgb(222,82,18)" fg:x="25620" fg:w="85"/><text x="92.7376%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_os_unfair_lock_lock_slow (3 samples, 0.01%)</title><rect x="92.7837%" y="229" width="0.0108%" height="15" fill="rgb(249,227,8)" fg:x="25702" fg:w="3"/><text x="93.0337%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (214 samples, 0.77%)</title><rect x="92.7945%" y="245" width="0.7725%" height="15" fill="rgb(253,141,45)" fg:x="25705" fg:w="214"/><text x="93.0445%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (9 samples, 0.03%)</title><rect x="93.5670%" y="245" width="0.0325%" height="15" fill="rgb(234,184,4)" fg:x="25919" fg:w="9"/><text x="93.8170%" y="255.50"></text></g><g><title>benchmark_queries`fbtree::access_method::sorted_run_store::SortedRunStore&lt;T&gt;::new (1,019 samples, 3.68%)</title><rect x="89.9246%" y="261" width="3.6786%" height="15" fill="rgb(218,194,23)" fg:x="24910" fg:w="1019"/><text x="90.1746%" y="271.50">benc..</text></g><g><title>libsystem_malloc.dylib`_free (5 samples, 0.02%)</title><rect x="93.6031%" y="261" width="0.0180%" height="15" fill="rgb(235,66,41)" fg:x="25929" fg:w="5"/><text x="93.8531%" y="271.50"></text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (1,046 samples, 3.78%)</title><rect x="89.8632%" y="357" width="3.7760%" height="15" fill="rgb(245,217,1)" fg:x="24893" fg:w="1046"/><text x="90.1132%" y="367.50">benc..</text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (1,046 samples, 3.78%)</title><rect x="89.8632%" y="341" width="3.7760%" height="15" fill="rgb(229,91,1)" fg:x="24893" fg:w="1046"/><text x="90.1132%" y="351.50">benc..</text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (1,046 samples, 3.78%)</title><rect x="89.8632%" y="325" width="3.7760%" height="15" fill="rgb(207,101,30)" fg:x="24893" fg:w="1046"/><text x="90.1132%" y="335.50">benc..</text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (1,046 samples, 3.78%)</title><rect x="89.8632%" y="309" width="3.7760%" height="15" fill="rgb(223,82,49)" fg:x="24893" fg:w="1046"/><text x="90.1132%" y="319.50">benc..</text></g><g><title>benchmark_queries`rayon::iter::plumbing::Folder::consume_iter (1,046 samples, 3.78%)</title><rect x="89.8632%" y="293" width="3.7760%" height="15" fill="rgb(218,167,17)" fg:x="24893" fg:w="1046"/><text x="90.1132%" y="303.50">benc..</text></g><g><title>benchmark_queries`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1,046 samples, 3.78%)</title><rect x="89.8632%" y="277" width="3.7760%" height="15" fill="rgb(208,103,14)" fg:x="24893" fg:w="1046"/><text x="90.1132%" y="287.50">benc..</text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (14 samples, 0.05%)</title><rect x="93.6970%" y="197" width="0.0505%" height="15" fill="rgb(238,20,8)" fg:x="25955" fg:w="14"/><text x="93.9470%" y="207.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (9 samples, 0.03%)</title><rect x="93.8522%" y="165" width="0.0325%" height="15" fill="rgb(218,80,54)" fg:x="25998" fg:w="9"/><text x="94.1022%" y="175.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (12 samples, 0.04%)</title><rect x="93.8450%" y="181" width="0.0433%" height="15" fill="rgb(240,144,17)" fg:x="25996" fg:w="12"/><text x="94.0950%" y="191.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (4 samples, 0.01%)</title><rect x="93.8883%" y="181" width="0.0144%" height="15" fill="rgb(245,27,50)" fg:x="26008" fg:w="4"/><text x="94.1383%" y="191.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (10 samples, 0.04%)</title><rect x="93.9100%" y="165" width="0.0361%" height="15" fill="rgb(251,51,7)" fg:x="26014" fg:w="10"/><text x="94.1600%" y="175.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (5 samples, 0.02%)</title><rect x="93.9280%" y="149" width="0.0180%" height="15" fill="rgb(245,217,29)" fg:x="26019" fg:w="5"/><text x="94.1780%" y="159.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (4 samples, 0.01%)</title><rect x="93.9461%" y="165" width="0.0144%" height="15" fill="rgb(221,176,29)" fg:x="26024" fg:w="4"/><text x="94.1961%" y="175.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcmp (3 samples, 0.01%)</title><rect x="93.9605%" y="165" width="0.0108%" height="15" fill="rgb(212,180,24)" fg:x="26028" fg:w="3"/><text x="94.2105%" y="175.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (5 samples, 0.02%)</title><rect x="94.0002%" y="149" width="0.0180%" height="15" fill="rgb(254,24,2)" fg:x="26039" fg:w="5"/><text x="94.2502%" y="159.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (3 samples, 0.01%)</title><rect x="94.0183%" y="149" width="0.0108%" height="15" fill="rgb(230,100,2)" fg:x="26044" fg:w="3"/><text x="94.2683%" y="159.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (7 samples, 0.03%)</title><rect x="94.0544%" y="117" width="0.0253%" height="15" fill="rgb(219,142,25)" fg:x="26054" fg:w="7"/><text x="94.3044%" y="127.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (11 samples, 0.04%)</title><rect x="94.0471%" y="133" width="0.0397%" height="15" fill="rgb(240,73,43)" fg:x="26052" fg:w="11"/><text x="94.2971%" y="143.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (4 samples, 0.01%)</title><rect x="94.0869%" y="133" width="0.0144%" height="15" fill="rgb(214,114,15)" fg:x="26063" fg:w="4"/><text x="94.3369%" y="143.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::pivot::choose_pivot (3 samples, 0.01%)</title><rect x="94.1013%" y="133" width="0.0108%" height="15" fill="rgb(207,130,4)" fg:x="26067" fg:w="3"/><text x="94.3513%" y="143.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::pivot::median3_rec (3 samples, 0.01%)</title><rect x="94.1013%" y="117" width="0.0108%" height="15" fill="rgb(221,25,40)" fg:x="26067" fg:w="3"/><text x="94.3513%" y="127.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::pivot::median3_rec (3 samples, 0.01%)</title><rect x="94.1013%" y="101" width="0.0108%" height="15" fill="rgb(241,184,7)" fg:x="26067" fg:w="3"/><text x="94.3513%" y="111.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (4 samples, 0.01%)</title><rect x="94.1121%" y="133" width="0.0144%" height="15" fill="rgb(235,159,4)" fg:x="26070" fg:w="4"/><text x="94.3621%" y="143.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (5 samples, 0.02%)</title><rect x="94.1338%" y="117" width="0.0180%" height="15" fill="rgb(214,87,48)" fg:x="26076" fg:w="5"/><text x="94.3838%" y="127.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::slot (3 samples, 0.01%)</title><rect x="94.1410%" y="101" width="0.0108%" height="15" fill="rgb(246,198,24)" fg:x="26078" fg:w="3"/><text x="94.3910%" y="111.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::insert_tail (3 samples, 0.01%)</title><rect x="94.1843%" y="101" width="0.0108%" height="15" fill="rgb(209,66,40)" fg:x="26090" fg:w="3"/><text x="94.4343%" y="111.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (12 samples, 0.04%)</title><rect x="94.1627%" y="117" width="0.0433%" height="15" fill="rgb(233,147,39)" fg:x="26084" fg:w="12"/><text x="94.4127%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (3 samples, 0.01%)</title><rect x="94.1952%" y="101" width="0.0108%" height="15" fill="rgb(231,145,52)" fg:x="26093" fg:w="3"/><text x="94.4452%" y="111.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (3 samples, 0.01%)</title><rect x="94.2240%" y="53" width="0.0108%" height="15" fill="rgb(206,20,26)" fg:x="26101" fg:w="3"/><text x="94.4740%" y="63.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::bidirectional_merge (5 samples, 0.02%)</title><rect x="94.2204%" y="85" width="0.0180%" height="15" fill="rgb(238,220,4)" fg:x="26100" fg:w="5"/><text x="94.4704%" y="95.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (4 samples, 0.01%)</title><rect x="94.2240%" y="69" width="0.0144%" height="15" fill="rgb(252,195,42)" fg:x="26101" fg:w="4"/><text x="94.4740%" y="79.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (10 samples, 0.04%)</title><rect x="94.2168%" y="101" width="0.0361%" height="15" fill="rgb(209,10,6)" fg:x="26099" fg:w="10"/><text x="94.4668%" y="111.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (3 samples, 0.01%)</title><rect x="94.2601%" y="85" width="0.0108%" height="15" fill="rgb(229,3,52)" fg:x="26111" fg:w="3"/><text x="94.5101%" y="95.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::bidirectional_merge (3 samples, 0.01%)</title><rect x="94.2782%" y="69" width="0.0108%" height="15" fill="rgb(253,49,37)" fg:x="26116" fg:w="3"/><text x="94.5282%" y="79.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::insert_tail (3 samples, 0.01%)</title><rect x="94.2890%" y="69" width="0.0108%" height="15" fill="rgb(240,103,49)" fg:x="26119" fg:w="3"/><text x="94.5390%" y="79.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (11 samples, 0.04%)</title><rect x="94.2746%" y="85" width="0.0397%" height="15" fill="rgb(250,182,30)" fg:x="26115" fg:w="11"/><text x="94.5246%" y="95.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (8 samples, 0.03%)</title><rect x="94.3215%" y="69" width="0.0289%" height="15" fill="rgb(248,8,30)" fg:x="26128" fg:w="8"/><text x="94.5715%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (4 samples, 0.01%)</title><rect x="94.3359%" y="53" width="0.0144%" height="15" fill="rgb(237,120,30)" fg:x="26132" fg:w="4"/><text x="94.5859%" y="63.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (8 samples, 0.03%)</title><rect x="94.3576%" y="53" width="0.0289%" height="15" fill="rgb(221,146,34)" fg:x="26138" fg:w="8"/><text x="94.6076%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (4 samples, 0.01%)</title><rect x="94.3720%" y="37" width="0.0144%" height="15" fill="rgb(242,55,13)" fg:x="26142" fg:w="4"/><text x="94.6220%" y="47.50"></text></g><g><title>benchmark_queries`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (5 samples, 0.02%)</title><rect x="94.3865%" y="37" width="0.0180%" height="15" fill="rgb(242,112,31)" fg:x="26146" fg:w="5"/><text x="94.6365%" y="47.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (43 samples, 0.16%)</title><rect x="94.2529%" y="101" width="0.1552%" height="15" fill="rgb(249,192,27)" fg:x="26109" fg:w="43"/><text x="94.5029%" y="111.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (26 samples, 0.09%)</title><rect x="94.3143%" y="85" width="0.0939%" height="15" fill="rgb(208,204,44)" fg:x="26126" fg:w="26"/><text x="94.5643%" y="95.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (16 samples, 0.06%)</title><rect x="94.3504%" y="69" width="0.0578%" height="15" fill="rgb(208,93,54)" fg:x="26136" fg:w="16"/><text x="94.6004%" y="79.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (6 samples, 0.02%)</title><rect x="94.3865%" y="53" width="0.0217%" height="15" fill="rgb(242,1,31)" fg:x="26146" fg:w="6"/><text x="94.6365%" y="63.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (59 samples, 0.21%)</title><rect x="94.2060%" y="117" width="0.2130%" height="15" fill="rgb(241,83,25)" fg:x="26096" fg:w="59"/><text x="94.4560%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (3 samples, 0.01%)</title><rect x="94.4081%" y="101" width="0.0108%" height="15" fill="rgb(205,169,50)" fg:x="26152" fg:w="3"/><text x="94.6581%" y="111.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (85 samples, 0.31%)</title><rect x="94.1266%" y="133" width="0.3068%" height="15" fill="rgb(239,186,37)" fg:x="26074" fg:w="85"/><text x="94.3766%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (4 samples, 0.01%)</title><rect x="94.4190%" y="117" width="0.0144%" height="15" fill="rgb(205,221,10)" fg:x="26155" fg:w="4"/><text x="94.6690%" y="127.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (112 samples, 0.40%)</title><rect x="94.0471%" y="149" width="0.4043%" height="15" fill="rgb(218,196,15)" fg:x="26052" fg:w="112"/><text x="94.2971%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (5 samples, 0.02%)</title><rect x="94.4334%" y="133" width="0.0180%" height="15" fill="rgb(218,196,35)" fg:x="26159" fg:w="5"/><text x="94.6834%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (11 samples, 0.04%)</title><rect x="94.4515%" y="149" width="0.0397%" height="15" fill="rgb(233,63,24)" fg:x="26164" fg:w="11"/><text x="94.7015%" y="159.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (144 samples, 0.52%)</title><rect x="93.9749%" y="165" width="0.5198%" height="15" fill="rgb(225,8,4)" fg:x="26032" fg:w="144"/><text x="94.2249%" y="175.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (169 samples, 0.61%)</title><rect x="93.9027%" y="181" width="0.6101%" height="15" fill="rgb(234,105,35)" fg:x="26012" fg:w="169"/><text x="94.1527%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (5 samples, 0.02%)</title><rect x="94.4948%" y="165" width="0.0180%" height="15" fill="rgb(236,21,32)" fg:x="26176" fg:w="5"/><text x="94.7448%" y="175.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::quicksort::quicksort (217 samples, 0.78%)</title><rect x="93.7511%" y="197" width="0.7834%" height="15" fill="rgb(228,109,6)" fg:x="25970" fg:w="217"/><text x="94.0011%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (6 samples, 0.02%)</title><rect x="94.5128%" y="181" width="0.0217%" height="15" fill="rgb(229,215,31)" fg:x="26181" fg:w="6"/><text x="94.7628%" y="191.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::driftsort_main (244 samples, 0.88%)</title><rect x="93.6898%" y="229" width="0.8808%" height="15" fill="rgb(221,52,54)" fg:x="25953" fg:w="244"/><text x="93.9398%" y="239.50"></text></g><g><title>benchmark_queries`core::slice::sort::stable::drift::sort (244 samples, 0.88%)</title><rect x="93.6898%" y="213" width="0.8808%" height="15" fill="rgb(252,129,43)" fg:x="25953" fg:w="244"/><text x="93.9398%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (10 samples, 0.04%)</title><rect x="94.5345%" y="197" width="0.0361%" height="15" fill="rgb(248,183,27)" fg:x="26187" fg:w="10"/><text x="94.7845%" y="207.50"></text></g><g><title>benchmark_queries`fbtree::bp::buffer_pool::BufferPool::handle_page_fault (8 samples, 0.03%)</title><rect x="94.6753%" y="197" width="0.0289%" height="15" fill="rgb(250,0,22)" fg:x="26226" fg:w="8"/><text x="94.9253%" y="207.50"></text></g><g><title>benchmark_queries`&lt;fbtree::bp::buffer_pool::BufferPool as fbtree::bp::mem_pool_trait::MemPool&gt;::create_new_page_for_write (37 samples, 0.13%)</title><rect x="94.5814%" y="213" width="0.1336%" height="15" fill="rgb(213,166,10)" fg:x="26200" fg:w="37"/><text x="94.8314%" y="223.50"></text></g><g><title>benchmark_queries`fbtree::file_manager::sync_write::FileManager::new (3 samples, 0.01%)</title><rect x="94.7042%" y="197" width="0.0108%" height="15" fill="rgb(207,163,36)" fg:x="26234" fg:w="3"/><text x="94.9542%" y="207.50"></text></g><g><title>benchmark_queries`std::fs::OpenOptions::_open (3 samples, 0.01%)</title><rect x="94.7042%" y="181" width="0.0108%" height="15" fill="rgb(208,122,22)" fg:x="26234" fg:w="3"/><text x="94.9542%" y="191.50"></text></g><g><title>benchmark_queries`std::sys::pal::unix::fs::File::open_c (3 samples, 0.01%)</title><rect x="94.7042%" y="165" width="0.0108%" height="15" fill="rgb(207,104,49)" fg:x="26234" fg:w="3"/><text x="94.9542%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__open (3 samples, 0.01%)</title><rect x="94.7042%" y="149" width="0.0108%" height="15" fill="rgb(248,211,50)" fg:x="26234" fg:w="3"/><text x="94.9542%" y="159.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::insert_slot (5 samples, 0.02%)</title><rect x="94.7330%" y="197" width="0.0180%" height="15" fill="rgb(217,13,45)" fg:x="26242" fg:w="5"/><text x="94.9830%" y="207.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::search_key (54 samples, 0.19%)</title><rect x="94.7511%" y="197" width="0.1949%" height="15" fill="rgb(211,216,49)" fg:x="26247" fg:w="54"/><text x="95.0011%" y="207.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::get (25 samples, 0.09%)</title><rect x="94.8558%" y="181" width="0.0902%" height="15" fill="rgb(221,58,53)" fg:x="26276" fg:w="25"/><text x="95.1058%" y="191.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$memcmp (10 samples, 0.04%)</title><rect x="94.9460%" y="197" width="0.0361%" height="15" fill="rgb(220,112,41)" fg:x="26301" fg:w="10"/><text x="95.1960%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (53 samples, 0.19%)</title><rect x="94.9821%" y="197" width="0.1913%" height="15" fill="rgb(236,38,28)" fg:x="26311" fg:w="53"/><text x="95.2321%" y="207.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::append (126 samples, 0.45%)</title><rect x="94.7222%" y="213" width="0.4549%" height="15" fill="rgb(227,195,22)" fg:x="26239" fg:w="126"/><text x="94.9722%" y="223.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as fbtree::access_method::sorted_run_store::sorted_page::SortedPage&gt;::insert_slot (3 samples, 0.01%)</title><rect x="95.1771%" y="213" width="0.0108%" height="15" fill="rgb(214,55,33)" fg:x="26365" fg:w="3"/><text x="95.4271%" y="223.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (3 samples, 0.01%)</title><rect x="95.1915%" y="197" width="0.0108%" height="15" fill="rgb(248,80,13)" fg:x="26369" fg:w="3"/><text x="95.4415%" y="207.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_key (4 samples, 0.01%)</title><rect x="95.1915%" y="213" width="0.0144%" height="15" fill="rgb(238,52,6)" fg:x="26369" fg:w="4"/><text x="95.4415%" y="223.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::get_val (4 samples, 0.01%)</title><rect x="95.2059%" y="213" width="0.0144%" height="15" fill="rgb(224,198,47)" fg:x="26373" fg:w="4"/><text x="95.4559%" y="223.50"></text></g><g><title>benchmark_queries`fbtree::access_method::sorted_run_store::SortedRunStore&lt;T&gt;::new (261 samples, 0.94%)</title><rect x="94.5706%" y="229" width="0.9422%" height="15" fill="rgb(233,171,20)" fg:x="26197" fg:w="261"/><text x="94.8206%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (77 samples, 0.28%)</title><rect x="95.2348%" y="213" width="0.2780%" height="15" fill="rgb(241,30,25)" fg:x="26381" fg:w="77"/><text x="95.4848%" y="223.50"></text></g><g><title>benchmark_queries`fbtree::access_method::append_only_store::AppendOnlyStore&lt;T&gt;::read_page (25 samples, 0.09%)</title><rect x="95.5489%" y="165" width="0.0902%" height="15" fill="rgb(207,171,38)" fg:x="26468" fg:w="25"/><text x="95.7989%" y="175.50"></text></g><g><title>benchmark_queries`&lt;fbtree::bp::buffer_pool::BufferPool as fbtree::bp::mem_pool_trait::MemPool&gt;::get_page_for_read (25 samples, 0.09%)</title><rect x="95.5489%" y="149" width="0.0902%" height="15" fill="rgb(234,70,1)" fg:x="26468" fg:w="25"/><text x="95.7989%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (3 samples, 0.01%)</title><rect x="95.6391%" y="165" width="0.0108%" height="15" fill="rgb(232,178,18)" fg:x="26493" fg:w="3"/><text x="95.8891%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.04%)</title><rect x="95.6500%" y="165" width="0.0397%" height="15" fill="rgb(241,78,40)" fg:x="26496" fg:w="11"/><text x="95.9000%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9 samples, 0.03%)</title><rect x="95.6572%" y="149" width="0.0325%" height="15" fill="rgb(222,35,25)" fg:x="26498" fg:w="9"/><text x="95.9072%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.03%)</title><rect x="95.6608%" y="133" width="0.0289%" height="15" fill="rgb(207,92,16)" fg:x="26499" fg:w="8"/><text x="95.9108%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.02%)</title><rect x="95.6680%" y="117" width="0.0217%" height="15" fill="rgb(216,59,51)" fg:x="26501" fg:w="6"/><text x="95.9180%" y="127.50"></text></g><g><title>benchmark_queries`&lt;fbtree::access_method::append_only_store::AppendOnlyStoreScanner&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 0.15%)</title><rect x="95.5453%" y="181" width="0.1480%" height="15" fill="rgb(213,80,28)" fg:x="26467" fg:w="41"/><text x="95.7953%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.01%)</title><rect x="95.7005%" y="181" width="0.0144%" height="15" fill="rgb(220,93,7)" fg:x="26510" fg:w="4"/><text x="95.9505%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.01%)</title><rect x="95.7150%" y="181" width="0.0108%" height="15" fill="rgb(225,24,44)" fg:x="26514" fg:w="3"/><text x="95.9650%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (4 samples, 0.01%)</title><rect x="95.7258%" y="181" width="0.0144%" height="15" fill="rgb(243,74,40)" fg:x="26517" fg:w="4"/><text x="95.9758%" y="191.50"></text></g><g><title>benchmark_queries`&lt;fbtree::txn_storage::ondisk::OnDiskStorage&lt;M&gt; as fbtree::txn_storage::txn_storage_trait::TxnStorageTrait&gt;::iter_next (57 samples, 0.21%)</title><rect x="95.5381%" y="197" width="0.2058%" height="15" fill="rgb(228,39,7)" fg:x="26465" fg:w="57"/><text x="95.7881%" y="207.50"></text></g><g><title>benchmark_queries`&lt;query_exec::tuple::_::&lt;impl serde::de::Deserialize for query_exec::tuple::Field&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (9 samples, 0.03%)</title><rect x="95.7583%" y="181" width="0.0325%" height="15" fill="rgb(227,79,8)" fg:x="26526" fg:w="9"/><text x="96.0083%" y="191.50"></text></g><g><title>benchmark_queries`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_option (6 samples, 0.02%)</title><rect x="95.8955%" y="165" width="0.0217%" height="15" fill="rgb(236,58,11)" fg:x="26564" fg:w="6"/><text x="96.1455%" y="175.50"></text></g><g><title>benchmark_queries`chrono::format::parse::parse_internal (56 samples, 0.20%)</title><rect x="96.1409%" y="101" width="0.2022%" height="15" fill="rgb(249,63,35)" fg:x="26632" fg:w="56"/><text x="96.3909%" y="111.50"></text></g><g><title>benchmark_queries`chrono::format::parsed::Parsed::set_day (8 samples, 0.03%)</title><rect x="96.3431%" y="101" width="0.0289%" height="15" fill="rgb(252,114,16)" fg:x="26688" fg:w="8"/><text x="96.5931%" y="111.50"></text></g><g><title>benchmark_queries`chrono::format::parsed::Parsed::set_year (4 samples, 0.01%)</title><rect x="96.3792%" y="101" width="0.0144%" height="15" fill="rgb(254,151,24)" fg:x="26698" fg:w="4"/><text x="96.6292%" y="111.50"></text></g><g><title>benchmark_queries`chrono::format::parsed::Parsed::to_naive_date (7 samples, 0.03%)</title><rect x="96.3936%" y="101" width="0.0253%" height="15" fill="rgb(253,54,39)" fg:x="26702" fg:w="7"/><text x="96.6436%" y="111.50"></text></g><g><title>benchmark_queries`chrono::format::parsed::Parsed::to_naive_date::_{{closure}} (50 samples, 0.18%)</title><rect x="96.4189%" y="101" width="0.1805%" height="15" fill="rgb(243,25,45)" fg:x="26709" fg:w="50"/><text x="96.6689%" y="111.50"></text></g><g><title>benchmark_queries`core::str::_&lt;impl str&gt;::trim_start_matches (15 samples, 0.05%)</title><rect x="96.5994%" y="101" width="0.0541%" height="15" fill="rgb(234,134,9)" fg:x="26759" fg:w="15"/><text x="96.8494%" y="111.50"></text></g><g><title>benchmark_queries`&lt;chrono::naive::date::NaiveDate as core::str::traits::FromStr&gt;::from_str (162 samples, 0.58%)</title><rect x="96.1048%" y="117" width="0.5848%" height="15" fill="rgb(227,166,31)" fg:x="26622" fg:w="162"/><text x="96.3548%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (10 samples, 0.04%)</title><rect x="96.6536%" y="101" width="0.0361%" height="15" fill="rgb(245,143,41)" fg:x="26774" fg:w="10"/><text x="96.9036%" y="111.50"></text></g><g><title>benchmark_queries`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_str (188 samples, 0.68%)</title><rect x="96.0796%" y="133" width="0.6787%" height="15" fill="rgb(238,181,32)" fg:x="26615" fg:w="188"/><text x="96.3296%" y="143.50"></text></g><g><title>benchmark_queries`core::str::converts::from_utf8 (16 samples, 0.06%)</title><rect x="96.7005%" y="117" width="0.0578%" height="15" fill="rgb(224,113,18)" fg:x="26787" fg:w="16"/><text x="96.9505%" y="127.50"></text></g><g><title>benchmark_queries`core::str::converts::from_utf8 (21 samples, 0.08%)</title><rect x="96.8052%" y="117" width="0.0758%" height="15" fill="rgb(240,229,28)" fg:x="26816" fg:w="21"/><text x="97.0552%" y="127.50"></text></g><g><title>benchmark_queries`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_string (78 samples, 0.28%)</title><rect x="96.7582%" y="133" width="0.2816%" height="15" fill="rgb(250,185,3)" fg:x="26803" fg:w="78"/><text x="97.0082%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (44 samples, 0.16%)</title><rect x="96.8810%" y="117" width="0.1588%" height="15" fill="rgb(212,59,25)" fg:x="26837" fg:w="44"/><text x="97.1310%" y="127.50"></text></g><g><title>benchmark_queries`core::str::converts::from_utf8 (3 samples, 0.01%)</title><rect x="97.0543%" y="133" width="0.0108%" height="15" fill="rgb(221,87,20)" fg:x="26885" fg:w="3"/><text x="97.3043%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.06%)</title><rect x="97.0651%" y="133" width="0.0578%" height="15" fill="rgb(213,74,28)" fg:x="26888" fg:w="16"/><text x="97.3151%" y="143.50"></text></g><g><title>benchmark_queries`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_option (325 samples, 1.17%)</title><rect x="96.0218%" y="149" width="1.1732%" height="15" fill="rgb(224,132,34)" fg:x="26599" fg:w="325"/><text x="96.2718%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (20 samples, 0.07%)</title><rect x="97.1228%" y="133" width="0.0722%" height="15" fill="rgb(222,101,24)" fg:x="26904" fg:w="20"/><text x="97.3728%" y="143.50"></text></g><g><title>benchmark_queries`&lt;query_exec::tuple::_::&lt;impl serde::de::Deserialize for query_exec::tuple::Field&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (356 samples, 1.29%)</title><rect x="95.9171%" y="165" width="1.2852%" height="15" fill="rgb(254,142,4)" fg:x="26570" fg:w="356"/><text x="96.1671%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.05%)</title><rect x="97.2023%" y="165" width="0.0469%" height="15" fill="rgb(230,229,49)" fg:x="26926" fg:w="13"/><text x="97.4523%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9 samples, 0.03%)</title><rect x="97.2167%" y="149" width="0.0325%" height="15" fill="rgb(238,70,47)" fg:x="26930" fg:w="9"/><text x="97.4667%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.02%)</title><rect x="97.2311%" y="133" width="0.0180%" height="15" fill="rgb(231,160,17)" fg:x="26934" fg:w="5"/><text x="97.4811%" y="143.50"></text></g><g><title>benchmark_queries`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (406 samples, 1.47%)</title><rect x="95.7908%" y="181" width="1.4657%" height="15" fill="rgb(218,68,53)" fg:x="26535" fg:w="406"/><text x="96.0408%" y="191.50"></text></g><g><title>benchmark_queries`query_exec::tuple::Tuple::from_bytes (421 samples, 1.52%)</title><rect x="95.7511%" y="197" width="1.5198%" height="15" fill="rgb(236,111,10)" fg:x="26524" fg:w="421"/><text x="96.0011%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.01%)</title><rect x="97.2600%" y="181" width="0.0108%" height="15" fill="rgb(224,34,41)" fg:x="26942" fg:w="3"/><text x="97.5100%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.02%)</title><rect x="97.2709%" y="197" width="0.0180%" height="15" fill="rgb(241,118,19)" fg:x="26945" fg:w="5"/><text x="97.5209%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.01%)</title><rect x="97.3286%" y="165" width="0.0108%" height="15" fill="rgb(238,129,25)" fg:x="26961" fg:w="3"/><text x="97.5786%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (14 samples, 0.05%)</title><rect x="97.2961%" y="197" width="0.0505%" height="15" fill="rgb(238,22,31)" fg:x="26952" fg:w="14"/><text x="97.5461%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (11 samples, 0.04%)</title><rect x="97.3070%" y="181" width="0.0397%" height="15" fill="rgb(222,174,48)" fg:x="26955" fg:w="11"/><text x="97.5570%" y="191.50"></text></g><g><title>benchmark_queries`&lt;query_exec::executor::ondisk_pipeline::disk_buffer::OnDiskBufferIter&lt;T,M&gt; as query_exec::executor::TupleBufferIter&gt;::next (504 samples, 1.82%)</title><rect x="95.5345%" y="213" width="1.8194%" height="15" fill="rgb(206,152,40)" fg:x="26464" fg:w="504"/><text x="95.7845%" y="223.50">b..</text></g><g><title>benchmark_queries`DYLD-STUB$$free (3 samples, 0.01%)</title><rect x="97.3539%" y="213" width="0.0108%" height="15" fill="rgb(218,99,54)" fg:x="26968" fg:w="3"/><text x="97.6039%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (14 samples, 0.05%)</title><rect x="97.5199%" y="197" width="0.0505%" height="15" fill="rgb(220,174,26)" fg:x="27014" fg:w="14"/><text x="97.7699%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.03%)</title><rect x="97.5452%" y="181" width="0.0253%" height="15" fill="rgb(245,116,9)" fg:x="27021" fg:w="7"/><text x="97.7952%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.01%)</title><rect x="97.5958%" y="165" width="0.0108%" height="15" fill="rgb(209,72,35)" fg:x="27035" fg:w="3"/><text x="97.8458%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.05%)</title><rect x="97.5705%" y="197" width="0.0469%" height="15" fill="rgb(226,126,21)" fg:x="27028" fg:w="13"/><text x="97.8205%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (10 samples, 0.04%)</title><rect x="97.5813%" y="181" width="0.0361%" height="15" fill="rgb(227,192,1)" fg:x="27031" fg:w="10"/><text x="97.8313%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.01%)</title><rect x="97.6066%" y="165" width="0.0108%" height="15" fill="rgb(237,180,29)" fg:x="27038" fg:w="3"/><text x="97.8566%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.01%)</title><rect x="97.6174%" y="197" width="0.0108%" height="15" fill="rgb(230,197,35)" fg:x="27041" fg:w="3"/><text x="97.8674%" y="207.50"></text></g><g><title>benchmark_queries`query_exec::tuple::Tuple::project (73 samples, 0.26%)</title><rect x="97.3719%" y="213" width="0.2635%" height="15" fill="rgb(246,193,31)" fg:x="26973" fg:w="73"/><text x="97.6219%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (6 samples, 0.02%)</title><rect x="97.6355%" y="213" width="0.0217%" height="15" fill="rgb(241,36,4)" fg:x="27046" fg:w="6"/><text x="97.8855%" y="223.50"></text></g><g><title>benchmark_queries`query_exec::executor::ondisk_pipeline::NonBlockingOp&lt;T,M&gt;::next (600 samples, 2.17%)</title><rect x="95.5128%" y="229" width="2.1660%" height="15" fill="rgb(241,130,17)" fg:x="26458" fg:w="600"/><text x="95.7628%" y="239.50">b..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (3 samples, 0.01%)</title><rect x="97.6680%" y="213" width="0.0108%" height="15" fill="rgb(206,137,32)" fg:x="27055" fg:w="3"/><text x="97.9180%" y="223.50"></text></g><g><title>benchmark_queries`&lt;fbtree::bp::buffer_pool::BufferPool as fbtree::bp::mem_pool_trait::MemPool&gt;::create_new_page_for_write (3 samples, 0.01%)</title><rect x="97.6824%" y="213" width="0.0108%" height="15" fill="rgb(237,228,51)" fg:x="27059" fg:w="3"/><text x="97.9324%" y="223.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as core::ops::deref::Deref&gt;::deref (3 samples, 0.01%)</title><rect x="97.6932%" y="213" width="0.0108%" height="15" fill="rgb(243,6,42)" fg:x="27062" fg:w="3"/><text x="97.9432%" y="223.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::append (10 samples, 0.04%)</title><rect x="97.7041%" y="213" width="0.0361%" height="15" fill="rgb(251,74,28)" fg:x="27065" fg:w="10"/><text x="97.9541%" y="223.50"></text></g><g><title>benchmark_queries`&lt;fbtree::page::Page as query_exec::executor::ondisk_pipeline::sort::AppendOnlyKVPage&gt;::append_slot (3 samples, 0.01%)</title><rect x="97.7293%" y="197" width="0.0108%" height="15" fill="rgb(218,20,49)" fg:x="27072" fg:w="3"/><text x="97.9793%" y="207.50"></text></g><g><title>benchmark_queries`&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (11 samples, 0.04%)</title><rect x="97.7546%" y="197" width="0.0397%" height="15" fill="rgb(238,28,14)" fg:x="27079" fg:w="11"/><text x="98.0046%" y="207.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$free (3 samples, 0.01%)</title><rect x="97.9351%" y="165" width="0.0108%" height="15" fill="rgb(229,40,46)" fg:x="27129" fg:w="3"/><text x="98.1851%" y="175.50"></text></g><g><title>benchmark_queries`&lt;alloc::string::String as core::fmt::Write&gt;::write_char (24 samples, 0.09%)</title><rect x="97.9712%" y="149" width="0.0866%" height="15" fill="rgb(244,195,20)" fg:x="27139" fg:w="24"/><text x="98.2212%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.03%)</title><rect x="98.2131%" y="53" width="0.0253%" height="15" fill="rgb(253,56,35)" fg:x="27206" fg:w="7"/><text x="98.4631%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (20 samples, 0.07%)</title><rect x="98.1770%" y="69" width="0.0722%" height="15" fill="rgb(210,149,44)" fg:x="27196" fg:w="20"/><text x="98.4270%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.01%)</title><rect x="98.2383%" y="53" width="0.0108%" height="15" fill="rgb(240,135,12)" fg:x="27213" fg:w="3"/><text x="98.4883%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (28 samples, 0.10%)</title><rect x="98.1661%" y="85" width="0.1011%" height="15" fill="rgb(251,24,50)" fg:x="27193" fg:w="28"/><text x="98.4161%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.01%)</title><rect x="98.2564%" y="69" width="0.0108%" height="15" fill="rgb(243,200,47)" fg:x="27218" fg:w="3"/><text x="98.5064%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (16 samples, 0.06%)</title><rect x="98.2672%" y="85" width="0.0578%" height="15" fill="rgb(224,166,26)" fg:x="27221" fg:w="16"/><text x="98.5172%" y="95.50"></text></g><g><title>benchmark_queries`alloc::raw_vec::finish_grow (55 samples, 0.20%)</title><rect x="98.1445%" y="101" width="0.1985%" height="15" fill="rgb(233,0,47)" fg:x="27187" fg:w="55"/><text x="98.3945%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 0.02%)</title><rect x="98.3250%" y="85" width="0.0180%" height="15" fill="rgb(253,80,5)" fg:x="27237" fg:w="5"/><text x="98.5750%" y="95.50"></text></g><g><title>benchmark_queries`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (66 samples, 0.24%)</title><rect x="98.1228%" y="117" width="0.2383%" height="15" fill="rgb(214,133,25)" fg:x="27181" fg:w="66"/><text x="98.3728%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.02%)</title><rect x="98.3430%" y="101" width="0.0180%" height="15" fill="rgb(209,27,14)" fg:x="27242" fg:w="5"/><text x="98.5930%" y="111.50"></text></g><g><title>benchmark_queries`&lt;alloc::string::String as core::fmt::Write&gt;::write_char (76 samples, 0.27%)</title><rect x="98.0939%" y="133" width="0.2744%" height="15" fill="rgb(219,102,51)" fg:x="27173" fg:w="76"/><text x="98.3439%" y="143.50"></text></g><g><title>benchmark_queries`&lt;chrono::naive::date::NaiveDate as core::fmt::Debug&gt;::fmt (93 samples, 0.34%)</title><rect x="98.0578%" y="149" width="0.3357%" height="15" fill="rgb(237,18,16)" fg:x="27163" fg:w="93"/><text x="98.3078%" y="159.50"></text></g><g><title>benchmark_queries`&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (7 samples, 0.03%)</title><rect x="98.3683%" y="133" width="0.0253%" height="15" fill="rgb(241,85,17)" fg:x="27249" fg:w="7"/><text x="98.6183%" y="143.50"></text></g><g><title>benchmark_queries`serde::ser::Serializer::collect_str (134 samples, 0.48%)</title><rect x="97.9495%" y="165" width="0.4837%" height="15" fill="rgb(236,90,42)" fg:x="27133" fg:w="134"/><text x="98.1995%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (10 samples, 0.04%)</title><rect x="98.3972%" y="149" width="0.0361%" height="15" fill="rgb(249,57,21)" fg:x="27257" fg:w="10"/><text x="98.6472%" y="159.50"></text></g><g><title>benchmark_queries`&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (172 samples, 0.62%)</title><rect x="97.8412%" y="181" width="0.6209%" height="15" fill="rgb(243,12,36)" fg:x="27103" fg:w="172"/><text x="98.0912%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.03%)</title><rect x="98.4369%" y="165" width="0.0253%" height="15" fill="rgb(253,128,47)" fg:x="27268" fg:w="7"/><text x="98.6869%" y="175.50"></text></g><g><title>benchmark_queries`&lt;alloc::string::String as core::fmt::Write&gt;::write_char (17 samples, 0.06%)</title><rect x="98.5632%" y="149" width="0.0614%" height="15" fill="rgb(207,33,20)" fg:x="27303" fg:w="17"/><text x="98.8132%" y="159.50"></text></g><g><title>benchmark_queries`DYLD-STUB$$malloc (3 samples, 0.01%)</title><rect x="98.7401%" y="101" width="0.0108%" height="15" fill="rgb(233,215,35)" fg:x="27352" fg:w="3"/><text x="98.9901%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (14 samples, 0.05%)</title><rect x="98.8087%" y="53" width="0.0505%" height="15" fill="rgb(249,188,52)" fg:x="27371" fg:w="14"/><text x="99.0587%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (23 samples, 0.08%)</title><rect x="98.7870%" y="69" width="0.0830%" height="15" fill="rgb(225,12,32)" fg:x="27365" fg:w="23"/><text x="99.0370%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.01%)</title><rect x="98.8592%" y="53" width="0.0108%" height="15" fill="rgb(247,98,14)" fg:x="27385" fg:w="3"/><text x="99.1092%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (31 samples, 0.11%)</title><rect x="98.7690%" y="85" width="0.1119%" height="15" fill="rgb(247,219,48)" fg:x="27360" fg:w="31"/><text x="99.0190%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (11 samples, 0.04%)</title><rect x="98.8809%" y="85" width="0.0397%" height="15" fill="rgb(253,60,48)" fg:x="27391" fg:w="11"/><text x="99.1309%" y="95.50"></text></g><g><title>benchmark_queries`alloc::raw_vec::finish_grow (51 samples, 0.18%)</title><rect x="98.7546%" y="101" width="0.1841%" height="15" fill="rgb(245,15,52)" fg:x="27356" fg:w="51"/><text x="99.0046%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 0.02%)</title><rect x="98.9206%" y="85" width="0.0180%" height="15" fill="rgb(220,133,28)" fg:x="27402" fg:w="5"/><text x="99.1706%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.03%)</title><rect x="98.9387%" y="101" width="0.0289%" height="15" fill="rgb(217,180,4)" fg:x="27407" fg:w="8"/><text x="99.1887%" y="111.50"></text></g><g><title>benchmark_queries`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (72 samples, 0.26%)</title><rect x="98.7148%" y="117" width="0.2599%" height="15" fill="rgb(251,24,1)" fg:x="27345" fg:w="72"/><text x="98.9648%" y="127.50"></text></g><g><title>benchmark_queries`&lt;alloc::string::String as core::fmt::Write&gt;::write_char (80 samples, 0.29%)</title><rect x="98.6896%" y="133" width="0.2888%" height="15" fill="rgb(212,185,49)" fg:x="27338" fg:w="80"/><text x="98.9396%" y="143.50"></text></g><g><title>benchmark_queries`&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (5 samples, 0.02%)</title><rect x="98.9784%" y="133" width="0.0180%" height="15" fill="rgb(215,175,22)" fg:x="27418" fg:w="5"/><text x="99.2284%" y="143.50"></text></g><g><title>benchmark_queries`&lt;chrono::naive::date::NaiveDate as core::fmt::Debug&gt;::fmt (105 samples, 0.38%)</title><rect x="98.6246%" y="149" width="0.3790%" height="15" fill="rgb(250,205,14)" fg:x="27320" fg:w="105"/><text x="98.8746%" y="159.50"></text></g><g><title>benchmark_queries`serde::ser::Serializer::collect_str (133 samples, 0.48%)</title><rect x="98.5524%" y="165" width="0.4801%" height="15" fill="rgb(225,211,22)" fg:x="27300" fg:w="133"/><text x="98.8024%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.03%)</title><rect x="99.0036%" y="149" width="0.0289%" height="15" fill="rgb(251,179,42)" fg:x="27425" fg:w="8"/><text x="99.2536%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_free (4 samples, 0.01%)</title><rect x="99.0325%" y="165" width="0.0144%" height="15" fill="rgb(208,216,51)" fg:x="27433" fg:w="4"/><text x="99.2825%" y="175.50"></text></g><g><title>benchmark_queries`query_exec::tuple::_::_&lt;impl serde::ser::Serialize for query_exec::tuple::Field&gt;::serialize (161 samples, 0.58%)</title><rect x="98.4730%" y="181" width="0.5812%" height="15" fill="rgb(235,36,11)" fg:x="27278" fg:w="161"/><text x="98.7230%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (23 samples, 0.08%)</title><rect x="99.0578%" y="181" width="0.0830%" height="15" fill="rgb(213,189,28)" fg:x="27440" fg:w="23"/><text x="99.3078%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (19 samples, 0.07%)</title><rect x="99.0722%" y="165" width="0.0686%" height="15" fill="rgb(227,203,42)" fg:x="27444" fg:w="19"/><text x="99.3222%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (15 samples, 0.05%)</title><rect x="99.0867%" y="149" width="0.0541%" height="15" fill="rgb(244,72,36)" fg:x="27448" fg:w="15"/><text x="99.3367%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (10 samples, 0.04%)</title><rect x="99.1047%" y="133" width="0.0361%" height="15" fill="rgb(213,53,17)" fg:x="27453" fg:w="10"/><text x="99.3547%" y="143.50"></text></g><g><title>benchmark_queries`bincode::internal::serialize (395 samples, 1.43%)</title><rect x="97.7943%" y="197" width="1.4259%" height="15" fill="rgb(207,167,3)" fg:x="27090" fg:w="395"/><text x="98.0443%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (21 samples, 0.08%)</title><rect x="99.1444%" y="181" width="0.0758%" height="15" fill="rgb(216,98,30)" fg:x="27464" fg:w="21"/><text x="99.3944%" y="191.50"></text></g><g><title>benchmark_queries`query_exec::tuple::_::_&lt;impl serde::ser::Serialize for query_exec::tuple::Field&gt;::serialize (26 samples, 0.09%)</title><rect x="99.2239%" y="197" width="0.0939%" height="15" fill="rgb(236,123,15)" fg:x="27486" fg:w="26"/><text x="99.4739%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.01%)</title><rect x="99.3177%" y="197" width="0.0108%" height="15" fill="rgb(248,81,50)" fg:x="27512" fg:w="3"/><text x="99.5677%" y="207.50"></text></g><g><title>benchmark_queries`query_exec::tuple::Tuple::to_bytes (438 samples, 1.58%)</title><rect x="97.7510%" y="213" width="1.5812%" height="15" fill="rgb(214,120,4)" fg:x="27078" fg:w="438"/><text x="98.0010%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.01%)</title><rect x="99.3827%" y="133" width="0.0108%" height="15" fill="rgb(208,179,34)" fg:x="27530" fg:w="3"/><text x="99.6327%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (4 samples, 0.01%)</title><rect x="99.3827%" y="149" width="0.0144%" height="15" fill="rgb(227,140,7)" fg:x="27530" fg:w="4"/><text x="99.6327%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (9 samples, 0.03%)</title><rect x="99.3683%" y="165" width="0.0325%" height="15" fill="rgb(214,22,6)" fg:x="27526" fg:w="9"/><text x="99.6183%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (8 samples, 0.03%)</title><rect x="99.4007%" y="165" width="0.0289%" height="15" fill="rgb(207,137,27)" fg:x="27535" fg:w="8"/><text x="99.6507%" y="175.50"></text></g><g><title>benchmark_queries`alloc::raw_vec::finish_grow (27 samples, 0.10%)</title><rect x="99.3466%" y="181" width="0.0975%" height="15" fill="rgb(210,8,46)" fg:x="27520" fg:w="27"/><text x="99.5966%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.01%)</title><rect x="99.4296%" y="165" width="0.0144%" height="15" fill="rgb(240,16,54)" fg:x="27543" fg:w="4"/><text x="99.6796%" y="175.50"></text></g><g><title>benchmark_queries`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (32 samples, 0.12%)</title><rect x="99.3466%" y="197" width="0.1155%" height="15" fill="rgb(211,209,29)" fg:x="27520" fg:w="32"/><text x="99.5966%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.02%)</title><rect x="99.4441%" y="181" width="0.0180%" height="15" fill="rgb(226,228,24)" fg:x="27547" fg:w="5"/><text x="99.6941%" y="191.50"></text></g><g><title>benchmark_queries`query_exec::tuple::Tuple::to_normalized_key_bytes (38 samples, 0.14%)</title><rect x="99.3322%" y="213" width="0.1372%" height="15" fill="rgb(222,84,9)" fg:x="27516" fg:w="38"/><text x="99.5822%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.02%)</title><rect x="99.4693%" y="213" width="0.0180%" height="15" fill="rgb(234,203,30)" fg:x="27554" fg:w="5"/><text x="99.7193%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (4 samples, 0.01%)</title><rect x="99.4874%" y="213" width="0.0144%" height="15" fill="rgb(238,109,14)" fg:x="27559" fg:w="4"/><text x="99.7374%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.01%)</title><rect x="99.5271%" y="181" width="0.0108%" height="15" fill="rgb(233,206,34)" fg:x="27570" fg:w="3"/><text x="99.7771%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (11 samples, 0.04%)</title><rect x="99.5018%" y="213" width="0.0397%" height="15" fill="rgb(220,167,47)" fg:x="27563" fg:w="11"/><text x="99.7518%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.03%)</title><rect x="99.5090%" y="197" width="0.0325%" height="15" fill="rgb(238,105,10)" fg:x="27565" fg:w="9"/><text x="99.7590%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.03%)</title><rect x="99.5451%" y="213" width="0.0253%" height="15" fill="rgb(213,227,17)" fg:x="27575" fg:w="7"/><text x="99.7951%" y="223.50"></text></g><g><title>benchmark_queries`query_exec::executor::ondisk_pipeline::sort::SortBuffer&lt;M&gt;::append (526 samples, 1.90%)</title><rect x="97.6788%" y="229" width="1.8988%" height="15" fill="rgb(217,132,38)" fg:x="27058" fg:w="526"/><text x="97.9288%" y="239.50">b..</text></g><g><title>libsystem_malloc.dylib`_free (4 samples, 0.01%)</title><rect x="99.5921%" y="229" width="0.0144%" height="15" fill="rgb(242,146,4)" fg:x="27588" fg:w="4"/><text x="99.8421%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (39 samples, 0.14%)</title><rect x="99.6065%" y="229" width="0.1408%" height="15" fill="rgb(212,61,9)" fg:x="27592" fg:w="39"/><text x="99.8565%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.01%)</title><rect x="99.7473%" y="229" width="0.0108%" height="15" fill="rgb(247,126,22)" fg:x="27631" fg:w="3"/><text x="99.9973%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (23 samples, 0.08%)</title><rect x="99.7581%" y="229" width="0.0830%" height="15" fill="rgb(220,196,2)" fg:x="27634" fg:w="23"/><text x="100.0081%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (13 samples, 0.05%)</title><rect x="99.7942%" y="213" width="0.0469%" height="15" fill="rgb(208,46,4)" fg:x="27644" fg:w="13"/><text x="100.0442%" y="223.50"></text></g><g><title>benchmark_queries`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,726 samples, 6.23%)</title><rect x="93.6464%" y="245" width="6.2308%" height="15" fill="rgb(252,104,46)" fg:x="25941" fg:w="1726"/><text x="93.8964%" y="255.50">benchmar..</text></g><g><title>libsystem_platform.dylib`_platform_memset (9 samples, 0.03%)</title><rect x="99.8448%" y="229" width="0.0325%" height="15" fill="rgb(237,152,48)" fg:x="27658" fg:w="9"/><text x="100.0948%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_free (8 samples, 0.03%)</title><rect x="99.8881%" y="245" width="0.0289%" height="15" fill="rgb(221,59,37)" fg:x="27670" fg:w="8"/><text x="100.1381%" y="255.50"></text></g><g><title>benchmark_queries`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,741 samples, 6.28%)</title><rect x="93.6392%" y="261" width="6.2850%" height="15" fill="rgb(209,202,51)" fg:x="25939" fg:w="1741"/><text x="93.8892%" y="271.50">benchmar..</text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (3 samples, 0.01%)</title><rect x="99.9242%" y="181" width="0.0108%" height="15" fill="rgb(228,81,30)" fg:x="27680" fg:w="3"/><text x="100.1742%" y="191.50"></text></g><g><title>benchmark_queries`rayon_core::registry::in_worker (3 samples, 0.01%)</title><rect x="99.9242%" y="165" width="0.0108%" height="15" fill="rgb(227,42,39)" fg:x="27680" fg:w="3"/><text x="100.1742%" y="175.50"></text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (3 samples, 0.01%)</title><rect x="99.9242%" y="149" width="0.0108%" height="15" fill="rgb(221,26,2)" fg:x="27680" fg:w="3"/><text x="100.1742%" y="159.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (3 samples, 0.01%)</title><rect x="99.9242%" y="133" width="0.0108%" height="15" fill="rgb(254,61,31)" fg:x="27680" fg:w="3"/><text x="100.1742%" y="143.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::Folder::consume_iter (3 samples, 0.01%)</title><rect x="99.9242%" y="117" width="0.0108%" height="15" fill="rgb(222,173,38)" fg:x="27680" fg:w="3"/><text x="100.1742%" y="127.50"></text></g><g><title>benchmark_queries`sysinfo::apple::macos::process::update_process (3 samples, 0.01%)</title><rect x="99.9242%" y="101" width="0.0108%" height="15" fill="rgb(218,50,12)" fg:x="27680" fg:w="3"/><text x="100.1742%" y="111.50"></text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (4 samples, 0.01%)</title><rect x="99.9242%" y="229" width="0.0144%" height="15" fill="rgb(223,88,40)" fg:x="27680" fg:w="4"/><text x="100.1742%" y="239.50"></text></g><g><title>benchmark_queries`rayon_core::registry::in_worker (4 samples, 0.01%)</title><rect x="99.9242%" y="213" width="0.0144%" height="15" fill="rgb(237,54,19)" fg:x="27680" fg:w="4"/><text x="100.1742%" y="223.50"></text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (4 samples, 0.01%)</title><rect x="99.9242%" y="197" width="0.0144%" height="15" fill="rgb(251,129,25)" fg:x="27680" fg:w="4"/><text x="100.1742%" y="207.50"></text></g><g><title>benchmark_queries`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (22,236 samples, 80.27%)</title><rect x="19.6744%" y="405" width="80.2715%" height="15" fill="rgb(238,97,19)" fg:x="5450" fg:w="22236"/><text x="19.9244%" y="415.50">benchmark_queries`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (2,793 samples, 10.08%)</title><rect x="89.8632%" y="389" width="10.0827%" height="15" fill="rgb(240,169,18)" fg:x="24893" fg:w="2793"/><text x="90.1132%" y="399.50">benchmark_queri..</text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (2,793 samples, 10.08%)</title><rect x="89.8632%" y="373" width="10.0827%" height="15" fill="rgb(230,187,49)" fg:x="24893" fg:w="2793"/><text x="90.1132%" y="383.50">benchmark_queri..</text></g><g><title>benchmark_queries`rayon_core::registry::in_worker (1,747 samples, 6.31%)</title><rect x="93.6392%" y="357" width="6.3066%" height="15" fill="rgb(209,44,26)" fg:x="25939" fg:w="1747"/><text x="93.8892%" y="367.50">benchmar..</text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (1,747 samples, 6.31%)</title><rect x="93.6392%" y="341" width="6.3066%" height="15" fill="rgb(244,0,6)" fg:x="25939" fg:w="1747"/><text x="93.8892%" y="351.50">benchmar..</text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (1,747 samples, 6.31%)</title><rect x="93.6392%" y="325" width="6.3066%" height="15" fill="rgb(248,18,21)" fg:x="25939" fg:w="1747"/><text x="93.8892%" y="335.50">benchmar..</text></g><g><title>benchmark_queries`rayon_core::registry::in_worker (1,747 samples, 6.31%)</title><rect x="93.6392%" y="309" width="6.3066%" height="15" fill="rgb(245,180,19)" fg:x="25939" fg:w="1747"/><text x="93.8892%" y="319.50">benchmar..</text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (1,747 samples, 6.31%)</title><rect x="93.6392%" y="293" width="6.3066%" height="15" fill="rgb(252,118,36)" fg:x="25939" fg:w="1747"/><text x="93.8892%" y="303.50">benchmar..</text></g><g><title>benchmark_queries`rayon::iter::plumbing::bridge_producer_consumer::helper (1,747 samples, 6.31%)</title><rect x="93.6392%" y="277" width="6.3066%" height="15" fill="rgb(210,224,19)" fg:x="25939" fg:w="1747"/><text x="93.8892%" y="287.50">benchmar..</text></g><g><title>benchmark_queries`rayon_core::registry::in_worker (6 samples, 0.02%)</title><rect x="99.9242%" y="261" width="0.0217%" height="15" fill="rgb(218,30,24)" fg:x="27680" fg:w="6"/><text x="100.1742%" y="271.50"></text></g><g><title>benchmark_queries`rayon_core::join::join_context::_{{closure}} (6 samples, 0.02%)</title><rect x="99.9242%" y="245" width="0.0217%" height="15" fill="rgb(219,75,50)" fg:x="27680" fg:w="6"/><text x="100.1742%" y="255.50"></text></g><g><title>all (27,701 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(234,72,50)" fg:x="0" fg:w="27701"/><text x="0.2500%" y="543.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (22,251 samples, 80.33%)</title><rect x="19.6744%" y="517" width="80.3256%" height="15" fill="rgb(219,100,48)" fg:x="5450" fg:w="22251"/><text x="19.9244%" y="527.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (22,251 samples, 80.33%)</title><rect x="19.6744%" y="501" width="80.3256%" height="15" fill="rgb(253,5,41)" fg:x="5450" fg:w="22251"/><text x="19.9244%" y="511.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>benchmark_queries`std::sys::pal::unix::thread::Thread::new::thread_start (22,251 samples, 80.33%)</title><rect x="19.6744%" y="485" width="80.3256%" height="15" fill="rgb(247,181,11)" fg:x="5450" fg:w="22251"/><text x="19.9244%" y="495.50">benchmark_queries`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>benchmark_queries`core::ops::function::FnOnce::call_once{{vtable.shim}} (22,251 samples, 80.33%)</title><rect x="19.6744%" y="469" width="80.3256%" height="15" fill="rgb(222,223,25)" fg:x="5450" fg:w="22251"/><text x="19.9244%" y="479.50">benchmark_queries`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>benchmark_queries`std::sys::backtrace::__rust_begin_short_backtrace (22,251 samples, 80.33%)</title><rect x="19.6744%" y="453" width="80.3256%" height="15" fill="rgb(214,198,28)" fg:x="5450" fg:w="22251"/><text x="19.9244%" y="463.50">benchmark_queries`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>benchmark_queries`rayon_core::registry::ThreadBuilder::run (22,251 samples, 80.33%)</title><rect x="19.6744%" y="437" width="80.3256%" height="15" fill="rgb(230,46,43)" fg:x="5450" fg:w="22251"/><text x="19.9244%" y="447.50">benchmark_queries`rayon_core::registry::ThreadBuilder::run</text></g><g><title>benchmark_queries`rayon_core::registry::WorkerThread::wait_until_cold (22,251 samples, 80.33%)</title><rect x="19.6744%" y="421" width="80.3256%" height="15" fill="rgb(233,65,53)" fg:x="5450" fg:w="22251"/><text x="19.9244%" y="431.50">benchmark_queries`rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>libsystem_kernel.dylib`swtch_pri (12 samples, 0.04%)</title><rect x="99.9567%" y="405" width="0.0433%" height="15" fill="rgb(221,121,27)" fg:x="27689" fg:w="12"/><text x="100.2067%" y="415.50"></text></g></svg></svg>